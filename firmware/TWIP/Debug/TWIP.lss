
TWIP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b6  00800100  00002340  000023d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002340  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b0  008003b6  008003b6  0000268a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000268a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000026fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000434a  00000000  00000000  0000283c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001698  00000000  00000000  00006b86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002eef  00000000  00000000  0000821e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a38  00000000  00000000  0000b110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008d12  00000000  00000000  0000bb48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002803  00000000  00000000  0001485a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0001705d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000367e  00000000  00000000  00017085  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	4e c0       	rjmp	.+156    	; 0xa2 <__bad_interrupt>
       6:	00 00       	nop
       8:	4c c0       	rjmp	.+152    	; 0xa2 <__bad_interrupt>
       a:	00 00       	nop
       c:	4a c0       	rjmp	.+148    	; 0xa2 <__bad_interrupt>
       e:	00 00       	nop
      10:	48 c0       	rjmp	.+144    	; 0xa2 <__bad_interrupt>
      12:	00 00       	nop
      14:	46 c0       	rjmp	.+140    	; 0xa2 <__bad_interrupt>
      16:	00 00       	nop
      18:	44 c0       	rjmp	.+136    	; 0xa2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__vector_7>
      20:	40 c0       	rjmp	.+128    	; 0xa2 <__bad_interrupt>
      22:	00 00       	nop
      24:	3e c0       	rjmp	.+124    	; 0xa2 <__bad_interrupt>
      26:	00 00       	nop
      28:	3c c0       	rjmp	.+120    	; 0xa2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3a c0       	rjmp	.+116    	; 0xa2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	38 c0       	rjmp	.+112    	; 0xa2 <__bad_interrupt>
      32:	00 00       	nop
      34:	36 c0       	rjmp	.+108    	; 0xa2 <__bad_interrupt>
      36:	00 00       	nop
      38:	34 c0       	rjmp	.+104    	; 0xa2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	32 c0       	rjmp	.+100    	; 0xa2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	30 c0       	rjmp	.+96     	; 0xa2 <__bad_interrupt>
      42:	00 00       	nop
      44:	2e c0       	rjmp	.+92     	; 0xa2 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <__vector_18>
      4c:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <__vector_19>
      50:	28 c0       	rjmp	.+80     	; 0xa2 <__bad_interrupt>
      52:	00 00       	nop
      54:	26 c0       	rjmp	.+76     	; 0xa2 <__bad_interrupt>
      56:	00 00       	nop
      58:	24 c0       	rjmp	.+72     	; 0xa2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	22 c0       	rjmp	.+68     	; 0xa2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__vector_24>
      64:	1e c0       	rjmp	.+60     	; 0xa2 <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e4       	ldi	r30, 0x40	; 64
      7c:	f3 e2       	ldi	r31, 0x23	; 35
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3b       	cpi	r26, 0xB6	; 182
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a6 eb       	ldi	r26, 0xB6	; 182
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 36       	cpi	r26, 0x66	; 102
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <main>
      9e:	0c 94 9e 11 	jmp	0x233c	; 0x233c <_exit>

000000a2 <__bad_interrupt>:
      a2:	ae cf       	rjmp	.-164    	; 0x0 <__vectors>

000000a4 <BNO_start_reading>:
	I2C_stat_t _stat_r, _stat_w;
} _local;


bool BNO_start_reading(void)
{
      a4:	0f 93       	push	r16
      a6:	1f 93       	push	r17
      a8:	cf 93       	push	r28
	uint8_t flags;
	
	flags = SREG;
      aa:	cf b7       	in	r28, 0x3f	; 63
	cli();
      ac:	f8 94       	cli
	if (I2C_available_tasks() < 2) {
      ae:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <I2C_available_tasks>
      b2:	82 30       	cpi	r24, 0x02	; 2
      b4:	18 f4       	brcc	.+6      	; 0xbc <BNO_start_reading+0x18>
		// fail
		SREG = flags;
      b6:	cf bf       	out	0x3f, r28	; 63
		return false;	
      b8:	80 e0       	ldi	r24, 0x00	; 0
      ba:	2a c0       	rjmp	.+84     	; 0x110 <BNO_start_reading+0x6c>
 * Enqueue a write task.
 * Similar to the read operation.
 */
static inline bool I2C_write(uint8_t addr, uint8_t *buff, uint16_t len, volatile I2C_stat_t *status)
{
	return _I2C_enqueue_task(false, addr, buff, len, status);
      bc:	07 ec       	ldi	r16, 0xC7	; 199
      be:	13 e0       	ldi	r17, 0x03	; 3
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	30 e0       	ldi	r19, 0x00	; 0
      c4:	45 e0       	ldi	r20, 0x05	; 5
      c6:	51 e0       	ldi	r21, 0x01	; 1
      c8:	68 e2       	ldi	r22, 0x28	; 40
      ca:	80 e0       	ldi	r24, 0x00	; 0
      cc:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_I2C_enqueue_task>
 * Will write operation status in 'status' argument
 * as the transmission unfolds
 */
static inline bool I2C_read(uint8_t addr, uint8_t *buff, uint16_t max_len, volatile I2C_stat_t *status)
{
	return _I2C_enqueue_task(true, addr, buff, max_len, status);
      d0:	06 ec       	ldi	r16, 0xC6	; 198
      d2:	13 e0       	ldi	r17, 0x03	; 3
      d4:	26 e0       	ldi	r18, 0x06	; 6
      d6:	30 e0       	ldi	r19, 0x00	; 0
      d8:	4f eb       	ldi	r20, 0xBF	; 191
      da:	53 e0       	ldi	r21, 0x03	; 3
      dc:	68 e2       	ldi	r22, 0x28	; 40
      de:	81 e0       	ldi	r24, 0x01	; 1
      e0:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_I2C_enqueue_task>
 * Enqueue a write task.
 * Similar to the read operation.
 */
static inline bool I2C_write(uint8_t addr, uint8_t *buff, uint16_t len, volatile I2C_stat_t *status)
{
	return _I2C_enqueue_task(false, addr, buff, len, status);
      e4:	07 ec       	ldi	r16, 0xC7	; 199
      e6:	13 e0       	ldi	r17, 0x03	; 3
      e8:	21 e0       	ldi	r18, 0x01	; 1
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	44 e0       	ldi	r20, 0x04	; 4
      ee:	51 e0       	ldi	r21, 0x01	; 1
      f0:	68 e2       	ldi	r22, 0x28	; 40
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_I2C_enqueue_task>
 * Will write operation status in 'status' argument
 * as the transmission unfolds
 */
static inline bool I2C_read(uint8_t addr, uint8_t *buff, uint16_t max_len, volatile I2C_stat_t *status)
{
	return _I2C_enqueue_task(true, addr, buff, max_len, status);
      f8:	06 ec       	ldi	r16, 0xC6	; 198
      fa:	13 e0       	ldi	r17, 0x03	; 3
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	45 ec       	ldi	r20, 0xC5	; 197
     102:	53 e0       	ldi	r21, 0x03	; 3
     104:	68 e2       	ldi	r22, 0x28	; 40
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_I2C_enqueue_task>
	I2C_read(CONF_BNO055_ADDRESS, _local.angle_buff, 6, &_local._stat_r);
	// request calibration state
	I2C_write(CONF_BNO055_ADDRESS, &_addr_calib, 1, &_local._stat_w);
	I2C_read(CONF_BNO055_ADDRESS, &(_local.calib_state), 1, &_local._stat_r);	
	
	SREG = flags;
     10c:	cf bf       	out	0x3f, r28	; 63
	return true;
     10e:	81 e0       	ldi	r24, 0x01	; 1
}
     110:	cf 91       	pop	r28
     112:	1f 91       	pop	r17
     114:	0f 91       	pop	r16
     116:	08 95       	ret

00000118 <BNO_angle>:
		UART_write(buff[i]);
	}
}

BNO_angle_t BNO_angle(void)
{
     118:	7f 92       	push	r7
     11a:	8f 92       	push	r8
     11c:	9f 92       	push	r9
     11e:	af 92       	push	r10
     120:	bf 92       	push	r11
     122:	cf 92       	push	r12
     124:	df 92       	push	r13
     126:	ef 92       	push	r14
     128:	ff 92       	push	r15
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	ec 01       	movw	r28, r24
	uint8_t flags;
	BNO_angle_t angle;
	float fx, fy, fz;
	
	flags = SREG;
     134:	7f b6       	in	r7, 0x3f	; 63
	cli();
     136:	f8 94       	cli
     138:	0e eb       	ldi	r16, 0xBE	; 190
     13a:	13 e0       	ldi	r17, 0x03	; 3
	angle.y = (int32_t)(fy * 64);
	angle.z = (int32_t)(fz * 64);
	*/
	
	// real angle (float)
	angle.x = (fx / 16.0f);
     13c:	f8 01       	movw	r30, r16
     13e:	61 81       	ldd	r22, Z+1	; 0x01
     140:	72 81       	ldd	r23, Z+2	; 0x02
     142:	07 2e       	mov	r0, r23
     144:	00 0c       	add	r0, r0
     146:	88 0b       	sbc	r24, r24
     148:	99 0b       	sbc	r25, r25
     14a:	0e 94 0d 10 	call	0x201a	; 0x201a <__floatsisf>
     14e:	20 e0       	ldi	r18, 0x00	; 0
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	40 e8       	ldi	r20, 0x80	; 128
     154:	5d e3       	ldi	r21, 0x3D	; 61
     156:	0e 94 14 11 	call	0x2228	; 0x2228 <__mulsf3>
     15a:	4b 01       	movw	r8, r22
     15c:	5c 01       	movw	r10, r24
	angle.y = (fy / 16.0f);
     15e:	f8 01       	movw	r30, r16
     160:	63 81       	ldd	r22, Z+3	; 0x03
     162:	74 81       	ldd	r23, Z+4	; 0x04
     164:	07 2e       	mov	r0, r23
     166:	00 0c       	add	r0, r0
     168:	88 0b       	sbc	r24, r24
     16a:	99 0b       	sbc	r25, r25
     16c:	0e 94 0d 10 	call	0x201a	; 0x201a <__floatsisf>
     170:	20 e0       	ldi	r18, 0x00	; 0
     172:	30 e0       	ldi	r19, 0x00	; 0
     174:	40 e8       	ldi	r20, 0x80	; 128
     176:	5d e3       	ldi	r21, 0x3D	; 61
     178:	0e 94 14 11 	call	0x2228	; 0x2228 <__mulsf3>
     17c:	6b 01       	movw	r12, r22
     17e:	7c 01       	movw	r14, r24
	angle.z = (fz / 16.0f);
     180:	f8 01       	movw	r30, r16
     182:	65 81       	ldd	r22, Z+5	; 0x05
     184:	76 81       	ldd	r23, Z+6	; 0x06
     186:	07 2e       	mov	r0, r23
     188:	00 0c       	add	r0, r0
     18a:	88 0b       	sbc	r24, r24
     18c:	99 0b       	sbc	r25, r25
     18e:	0e 94 0d 10 	call	0x201a	; 0x201a <__floatsisf>
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	40 e8       	ldi	r20, 0x80	; 128
     198:	5d e3       	ldi	r21, 0x3D	; 61
     19a:	0e 94 14 11 	call	0x2228	; 0x2228 <__mulsf3>
	
	// calibration data
	angle.cal_sys = (_local.calib_state >> 6u) & 3u;
     19e:	f8 01       	movw	r30, r16
     1a0:	27 81       	ldd	r18, Z+7	; 0x07
	angle.cal_gyro = (_local.calib_state >> 4u) & 3u;
	angle.cal_acc = (_local.calib_state >> 2u) & 3u;
	angle.cal_mag = (_local.calib_state) & 3u;
	
	SREG = flags;
     1a2:	7f be       	out	0x3f, r7	; 63
	return angle;
     1a4:	88 82       	st	Y, r8
     1a6:	99 82       	std	Y+1, r9	; 0x01
     1a8:	aa 82       	std	Y+2, r10	; 0x02
     1aa:	bb 82       	std	Y+3, r11	; 0x03
     1ac:	cc 82       	std	Y+4, r12	; 0x04
     1ae:	dd 82       	std	Y+5, r13	; 0x05
     1b0:	ee 82       	std	Y+6, r14	; 0x06
     1b2:	ff 82       	std	Y+7, r15	; 0x07
     1b4:	68 87       	std	Y+8, r22	; 0x08
     1b6:	79 87       	std	Y+9, r23	; 0x09
     1b8:	8a 87       	std	Y+10, r24	; 0x0a
     1ba:	9b 87       	std	Y+11, r25	; 0x0b
     1bc:	92 2f       	mov	r25, r18
     1be:	92 95       	swap	r25
     1c0:	93 70       	andi	r25, 0x03	; 3
     1c2:	9c 87       	std	Y+12, r25	; 0x0c
     1c4:	92 2f       	mov	r25, r18
     1c6:	96 95       	lsr	r25
     1c8:	96 95       	lsr	r25
     1ca:	93 70       	andi	r25, 0x03	; 3
     1cc:	9d 87       	std	Y+13, r25	; 0x0d
     1ce:	92 2f       	mov	r25, r18
     1d0:	93 70       	andi	r25, 0x03	; 3
     1d2:	9e 87       	std	Y+14, r25	; 0x0e
     1d4:	82 2f       	mov	r24, r18
     1d6:	82 95       	swap	r24
     1d8:	86 95       	lsr	r24
     1da:	86 95       	lsr	r24
     1dc:	83 70       	andi	r24, 0x03	; 3
     1de:	8f 87       	std	Y+15, r24	; 0x0f
}
     1e0:	ce 01       	movw	r24, r28
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	1f 91       	pop	r17
     1e8:	0f 91       	pop	r16
     1ea:	ff 90       	pop	r15
     1ec:	ef 90       	pop	r14
     1ee:	df 90       	pop	r13
     1f0:	cf 90       	pop	r12
     1f2:	bf 90       	pop	r11
     1f4:	af 90       	pop	r10
     1f6:	9f 90       	pop	r9
     1f8:	8f 90       	pop	r8
     1fa:	7f 90       	pop	r7
     1fc:	08 95       	ret

000001fe <BNO_read_reg>:



int32_t BNO_read_reg(bno055_reg_t reg, uint8_t *data, uint8_t size)
{
     1fe:	cf 92       	push	r12
     200:	df 92       	push	r13
     202:	ff 92       	push	r15
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	00 d0       	rcall	.+0      	; 0x20e <BNO_read_reg+0x10>
     20e:	1f 92       	push	r1
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
     214:	8b 83       	std	Y+3, r24	; 0x03
     216:	6b 01       	movw	r12, r22
     218:	f4 2e       	mov	r15, r20
 * Enqueue a write task.
 * Similar to the read operation.
 */
static inline bool I2C_write(uint8_t addr, uint8_t *buff, uint16_t len, volatile I2C_stat_t *status)
{
	return _I2C_enqueue_task(false, addr, buff, len, status);
     21a:	8e 01       	movw	r16, r28
     21c:	0e 5f       	subi	r16, 0xFE	; 254
     21e:	1f 4f       	sbci	r17, 0xFF	; 255
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	ae 01       	movw	r20, r28
     226:	4d 5f       	subi	r20, 0xFD	; 253
     228:	5f 4f       	sbci	r21, 0xFF	; 255
     22a:	68 e2       	ldi	r22, 0x28	; 40
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_I2C_enqueue_task>
	volatile I2C_stat_t status_w, status_r;
	bool enq;
	
	// write reg address
	enq = I2C_write(CONF_BNO055_ADDRESS, (uint8_t*)&reg, 1, &status_w);
	if (!enq) {
     232:	88 23       	and	r24, r24
     234:	e9 f0       	breq	.+58     	; 0x270 <BNO_read_reg+0x72>
		return -1;
	}
	
	while (I2C_IN_PROGRESS == status_w) 
     236:	8a 81       	ldd	r24, Y+2	; 0x02
     238:	83 30       	cpi	r24, 0x03	; 3
     23a:	e9 f3       	breq	.-6      	; 0x236 <BNO_read_reg+0x38>
		;
		
	if (I2C_SUCCESS != status_w) {
     23c:	8a 81       	ldd	r24, Y+2	; 0x02
     23e:	88 23       	and	r24, r24
     240:	11 f0       	breq	.+4      	; 0x246 <BNO_read_reg+0x48>
		return status_w;
     242:	6a 81       	ldd	r22, Y+2	; 0x02
     244:	11 c0       	rjmp	.+34     	; 0x268 <BNO_read_reg+0x6a>
 * Will write operation status in 'status' argument
 * as the transmission unfolds
 */
static inline bool I2C_read(uint8_t addr, uint8_t *buff, uint16_t max_len, volatile I2C_stat_t *status)
{
	return _I2C_enqueue_task(true, addr, buff, max_len, status);
     246:	2f 2d       	mov	r18, r15
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	8e 01       	movw	r16, r28
     24c:	0f 5f       	subi	r16, 0xFF	; 255
     24e:	1f 4f       	sbci	r17, 0xFF	; 255
     250:	a6 01       	movw	r20, r12
     252:	68 e2       	ldi	r22, 0x28	; 40
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_I2C_enqueue_task>
	}
	
	// read reg
	I2C_read(CONF_BNO055_ADDRESS, data, size, &status_r);
	// wait for write and read to complete
	while (I2C_IN_PROGRESS == status_r)
     25a:	89 81       	ldd	r24, Y+1	; 0x01
     25c:	83 30       	cpi	r24, 0x03	; 3
     25e:	e9 f3       	breq	.-6      	; 0x25a <BNO_read_reg+0x5c>
		;
	// check Read status
	if (I2C_SUCCESS != status_r) {
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	88 23       	and	r24, r24
     264:	49 f0       	breq	.+18     	; 0x278 <BNO_read_reg+0x7a>
		return status_r;
     266:	69 81       	ldd	r22, Y+1	; 0x01
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	07 c0       	rjmp	.+14     	; 0x27e <BNO_read_reg+0x80>
	bool enq;
	
	// write reg address
	enq = I2C_write(CONF_BNO055_ADDRESS, (uint8_t*)&reg, 1, &status_w);
	if (!enq) {
		return -1;
     270:	6f ef       	ldi	r22, 0xFF	; 255
     272:	7f ef       	ldi	r23, 0xFF	; 255
     274:	cb 01       	movw	r24, r22
     276:	03 c0       	rjmp	.+6      	; 0x27e <BNO_read_reg+0x80>
	if (I2C_SUCCESS != status_r) {
		return status_r;
	}
	
	// (value already written to destination)
	return I2C_SUCCESS;
     278:	60 e0       	ldi	r22, 0x00	; 0
     27a:	70 e0       	ldi	r23, 0x00	; 0
     27c:	cb 01       	movw	r24, r22
}
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	0f 90       	pop	r0
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	1f 91       	pop	r17
     28a:	0f 91       	pop	r16
     28c:	ff 90       	pop	r15
     28e:	df 90       	pop	r13
     290:	cf 90       	pop	r12
     292:	08 95       	ret

00000294 <BNO_read_calib_levels>:
	return true;
}


void BNO_read_calib_levels(uint8_t *lvl_sys, uint8_t *lvl_gyro, uint8_t *lvl_acc, uint8_t *lvl_mag)
{
     294:	af 92       	push	r10
     296:	bf 92       	push	r11
     298:	cf 92       	push	r12
     29a:	df 92       	push	r13
     29c:	ef 92       	push	r14
     29e:	ff 92       	push	r15
     2a0:	0f 93       	push	r16
     2a2:	1f 93       	push	r17
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	1f 92       	push	r1
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
     2ae:	5c 01       	movw	r10, r24
     2b0:	6b 01       	movw	r12, r22
     2b2:	7a 01       	movw	r14, r20
     2b4:	89 01       	movw	r16, r18
	uint8_t data;
	
	// read calibration register
	BNO_read_reg(BNO055_CALIB_STAT_ADDR, &data, 1);
     2b6:	41 e0       	ldi	r20, 0x01	; 1
     2b8:	be 01       	movw	r22, r28
     2ba:	6f 5f       	subi	r22, 0xFF	; 255
     2bc:	7f 4f       	sbci	r23, 0xFF	; 255
     2be:	85 e3       	ldi	r24, 0x35	; 53
     2c0:	9e df       	rcall	.-196    	; 0x1fe <BNO_read_reg>
	
	*lvl_sys = (data >> 6u) & 3u;
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	98 2f       	mov	r25, r24
     2c6:	92 95       	swap	r25
     2c8:	96 95       	lsr	r25
     2ca:	96 95       	lsr	r25
     2cc:	93 70       	andi	r25, 0x03	; 3
     2ce:	f5 01       	movw	r30, r10
     2d0:	90 83       	st	Z, r25
	*lvl_gyro = (data >> 4u) & 3u;
     2d2:	98 2f       	mov	r25, r24
     2d4:	92 95       	swap	r25
     2d6:	93 70       	andi	r25, 0x03	; 3
     2d8:	f6 01       	movw	r30, r12
     2da:	90 83       	st	Z, r25
	*lvl_acc = (data >> 2u) & 3u;
     2dc:	98 2f       	mov	r25, r24
     2de:	96 95       	lsr	r25
     2e0:	96 95       	lsr	r25
     2e2:	93 70       	andi	r25, 0x03	; 3
     2e4:	f7 01       	movw	r30, r14
     2e6:	90 83       	st	Z, r25
	*lvl_mag = (data) & 3u;
     2e8:	83 70       	andi	r24, 0x03	; 3
     2ea:	f8 01       	movw	r30, r16
     2ec:	80 83       	st	Z, r24
}
     2ee:	0f 90       	pop	r0
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	1f 91       	pop	r17
     2f6:	0f 91       	pop	r16
     2f8:	ff 90       	pop	r15
     2fa:	ef 90       	pop	r14
     2fc:	df 90       	pop	r13
     2fe:	cf 90       	pop	r12
     300:	bf 90       	pop	r11
     302:	af 90       	pop	r10
     304:	08 95       	ret

00000306 <BNO_read_print_cal>:

void BNO_read_print_cal(void)
{
     306:	cf 92       	push	r12
     308:	df 92       	push	r13
     30a:	ef 92       	push	r14
     30c:	ff 92       	push	r15
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	cd b7       	in	r28, 0x3d	; 61
     316:	de b7       	in	r29, 0x3e	; 62
     318:	66 97       	sbiw	r28, 0x16	; 22
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	f8 94       	cli
     31e:	de bf       	out	0x3e, r29	; 62
     320:	0f be       	out	0x3f, r0	; 63
     322:	cd bf       	out	0x3d, r28	; 61
     324:	ce 01       	movw	r24, r28
     326:	01 96       	adiw	r24, 0x01	; 1
     328:	7c 01       	movw	r14, r24
	uint8_t buff[22];
	int i;
	bno055_reg_t reg;
	
	for (reg = ACCEL_OFFSET_X_LSB_ADDR, i = 0;
     32a:	15 e5       	ldi	r17, 0x55	; 85
	reg <= MAG_RADIUS_MSB_ADDR;
	reg ++, i ++) {
		// read reg from BNO055
		BNO_read_reg(reg, buff + i, 1);
     32c:	41 e0       	ldi	r20, 0x01	; 1
     32e:	b7 01       	movw	r22, r14
     330:	81 2f       	mov	r24, r17
     332:	65 df       	rcall	.-310    	; 0x1fe <BNO_read_reg>
		// write raw data to UART 
		UART_write(buff[i]);
     334:	f7 01       	movw	r30, r14
     336:	80 81       	ld	r24, Z
     338:	9f ef       	ldi	r25, 0xFF	; 255
     33a:	e9 1a       	sub	r14, r25
     33c:	f9 0a       	sbc	r15, r25
     33e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <UART_write>
	int i;
	bno055_reg_t reg;
	
	for (reg = ACCEL_OFFSET_X_LSB_ADDR, i = 0;
	reg <= MAG_RADIUS_MSB_ADDR;
	reg ++, i ++) {
     342:	1f 5f       	subi	r17, 0xFF	; 255
{
	uint8_t buff[22];
	int i;
	bno055_reg_t reg;
	
	for (reg = ACCEL_OFFSET_X_LSB_ADDR, i = 0;
     344:	1b 36       	cpi	r17, 0x6B	; 107
     346:	91 f7       	brne	.-28     	; 0x32c <BNO_read_print_cal+0x26>
		// read reg from BNO055
		BNO_read_reg(reg, buff + i, 1);
		// write raw data to UART 
		UART_write(buff[i]);
	}
}
     348:	66 96       	adiw	r28, 0x16	; 22
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	f8 94       	cli
     34e:	de bf       	out	0x3e, r29	; 62
     350:	0f be       	out	0x3f, r0	; 63
     352:	cd bf       	out	0x3d, r28	; 61
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	1f 91       	pop	r17
     35a:	ff 90       	pop	r15
     35c:	ef 90       	pop	r14
     35e:	df 90       	pop	r13
     360:	cf 90       	pop	r12
     362:	08 95       	ret

00000364 <BNO_write_reg>:
	// (value already written to destination)
	return I2C_SUCCESS;
}

int32_t BNO_write_reg(bno055_reg_t reg, uint8_t data)
{
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	00 d0       	rcall	.+0      	; 0x36e <BNO_write_reg+0xa>
     36e:	1f 92       	push	r1
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
	volatile I2C_stat_t status_w;
	uint8_t buff[2];
	
	buff[0] = reg;
     374:	89 83       	std	Y+1, r24	; 0x01
	buff[1] = data;
     376:	6a 83       	std	Y+2, r22	; 0x02
 * Enqueue a write task.
 * Similar to the read operation.
 */
static inline bool I2C_write(uint8_t addr, uint8_t *buff, uint16_t len, volatile I2C_stat_t *status)
{
	return _I2C_enqueue_task(false, addr, buff, len, status);
     378:	8e 01       	movw	r16, r28
     37a:	0d 5f       	subi	r16, 0xFD	; 253
     37c:	1f 4f       	sbci	r17, 0xFF	; 255
     37e:	22 e0       	ldi	r18, 0x02	; 2
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	ae 01       	movw	r20, r28
     384:	4f 5f       	subi	r20, 0xFF	; 255
     386:	5f 4f       	sbci	r21, 0xFF	; 255
     388:	68 e2       	ldi	r22, 0x28	; 40
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_I2C_enqueue_task>
	
	// write reg address
	I2C_write(CONF_BNO055_ADDRESS, buff, 2, &status_w);
	// wait for write to complete
	while (I2C_IN_PROGRESS == status_w)
     390:	8b 81       	ldd	r24, Y+3	; 0x03
     392:	83 30       	cpi	r24, 0x03	; 3
     394:	e9 f3       	breq	.-6      	; 0x390 <BNO_write_reg+0x2c>
		;
	
	return status_w;
     396:	6b 81       	ldd	r22, Y+3	; 0x03
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
}
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	08 95       	ret

000003ae <BNO_init>:




int32_t BNO_init(bool block_on_failure)
{
     3ae:	1f 93       	push	r17
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	1f 92       	push	r1
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	18 2f       	mov	r17, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3bc:	2f ef       	ldi	r18, 0xFF	; 255
     3be:	83 ed       	ldi	r24, 0xD3	; 211
     3c0:	90 e3       	ldi	r25, 0x30	; 48
     3c2:	21 50       	subi	r18, 0x01	; 1
     3c4:	80 40       	sbci	r24, 0x00	; 0
     3c6:	90 40       	sbci	r25, 0x00	; 0
     3c8:	e1 f7       	brne	.-8      	; 0x3c2 <BNO_init+0x14>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <BNO_init+0x1e>
     3cc:	00 00       	nop
  
	// wait for boot
	_delay_ms(1000);
	
	// make sure the ADDRESS is correct and the sensor is present
	BNO_read_reg(BNO055_CHIP_ID_ADDR, &id, 1);	
     3ce:	41 e0       	ldi	r20, 0x01	; 1
     3d0:	be 01       	movw	r22, r28
     3d2:	6f 5f       	subi	r22, 0xFF	; 255
     3d4:	7f 4f       	sbci	r23, 0xFF	; 255
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	12 df       	rcall	.-476    	; 0x1fe <BNO_read_reg>
	if(id != BNO055_ID) {
     3da:	89 81       	ldd	r24, Y+1	; 0x01
     3dc:	80 3a       	cpi	r24, 0xA0	; 160
     3de:	31 f0       	breq	.+12     	; 0x3ec <BNO_init+0x3e>
	_delay_ms(25);

	return I2C_SUCCESS;

_gyro_init_err:
	if (block_on_failure) {
     3e0:	11 11       	cpse	r17, r1
     3e2:	2f c0       	rjmp	.+94     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		IND_set_mode(IND_ERROR);
		while (1)
			;
	} 
	
	return error;
     3e4:	6f ef       	ldi	r22, 0xFF	; 255
     3e6:	7f ef       	ldi	r23, 0xFF	; 255
     3e8:	cb 01       	movw	r24, r22
		goto _gyro_init_err;
	}

	// Switch to config mode
	// and wait for switch
	BNO_write_reg(BNO055_OPR_MODE_ADDR, OPERATION_MODE_CONFIG);
     3ea:	2f c0       	rjmp	.+94     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	8d e3       	ldi	r24, 0x3D	; 61
     3f0:	b9 df       	rcall	.-142    	; 0x364 <BNO_write_reg>
     3f2:	2f e7       	ldi	r18, 0x7F	; 127
     3f4:	88 e3       	ldi	r24, 0x38	; 56
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	21 50       	subi	r18, 0x01	; 1
     3fa:	80 40       	sbci	r24, 0x00	; 0
     3fc:	90 40       	sbci	r25, 0x00	; 0
     3fe:	e1 f7       	brne	.-8      	; 0x3f8 <BNO_init+0x4a>
     400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	_delay_ms(25);

	/* Set Power Mode: Normal */
	BNO_write_reg(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
     402:	00 00       	nop
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	8e e3       	ldi	r24, 0x3E	; 62
     408:	ad df       	rcall	.-166    	; 0x364 <BNO_write_reg>
     40a:	2f e7       	ldi	r18, 0x7F	; 127
     40c:	88 e3       	ldi	r24, 0x38	; 56
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	21 50       	subi	r18, 0x01	; 1
     412:	80 40       	sbci	r24, 0x00	; 0
     414:	90 40       	sbci	r25, 0x00	; 0
     416:	e1 f7       	brne	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	_delay_ms(25);

	// select register page 0
	// (in order to access sensor data)
	BNO_write_reg(BNO055_PAGE_ID_ADDR, 0);
     41a:	00 00       	nop
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	87 e0       	ldi	r24, 0x07	; 7

	// TODO: re-add after adding calib save to EEPROM
	//BNO_write_cal();

	// Set Sensor Mode
	BNO_write_reg(BNO055_OPR_MODE_ADDR, CONF_BNO055_MODE);
     420:	a1 df       	rcall	.-190    	; 0x364 <BNO_write_reg>
     422:	68 e0       	ldi	r22, 0x08	; 8
     424:	8d e3       	ldi	r24, 0x3D	; 61
     426:	9e df       	rcall	.-196    	; 0x364 <BNO_write_reg>
     428:	2f e7       	ldi	r18, 0x7F	; 127
     42a:	88 e3       	ldi	r24, 0x38	; 56
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	21 50       	subi	r18, 0x01	; 1
     430:	80 40       	sbci	r24, 0x00	; 0
     432:	90 40       	sbci	r25, 0x00	; 0
     434:	e1 f7       	brne	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     436:	00 c0       	rjmp	.+0      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     438:	00 00       	nop
	_delay_ms(25);

	return I2C_SUCCESS;
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	cb 01       	movw	r24, r22
     440:	04 c0       	rjmp	.+8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>

_gyro_init_err:
	if (block_on_failure) {
		IND_set_mode(IND_ERROR);
     442:	82 e0       	ldi	r24, 0x02	; 2
     444:	0e 94 ca 0c 	call	0x1994	; 0x1994 <IND_set_mode>
     448:	ff cf       	rjmp	.-2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
	//_set_mode(mode);
	//_write_reg(BNO055_OPR_MODE_ADDR, CONF_BNO055_MODE);
	//_delay_ms(25);
	
	//return I2C_SUCCESS;
}
     44a:	0f 90       	pop	r0
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	1f 91       	pop	r17
     452:	08 95       	ret

00000454 <BNO_print_calib_on_change>:


void BNO_print_calib_on_change(void)
{
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	00 d0       	rcall	.+0      	; 0x45a <BNO_print_calib_on_change+0x6>
     45a:	00 d0       	rcall	.+0      	; 0x45c <BNO_print_calib_on_change+0x8>
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
	static uint8_t  lvl_sys_old = 100, lvl_gyro_old = 100,
	lvl_acc_old = 100, lvl_mag_old = 100;
	static uint32_t calib_time = 0;
	
	// read calibration status
	if (CTRL_get_time_elapsed(calib_time) > 100) {
     460:	60 91 ba 03 	lds	r22, 0x03BA	; 0x8003ba <calib_time.2081>
     464:	70 91 bb 03 	lds	r23, 0x03BB	; 0x8003bb <calib_time.2081+0x1>
     468:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <calib_time.2081+0x2>
     46c:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <calib_time.2081+0x3>
     470:	44 d6       	rcall	.+3208   	; 0x10fa <CTRL_get_time_elapsed>
     472:	65 36       	cpi	r22, 0x65	; 101
     474:	71 05       	cpc	r23, r1
     476:	81 05       	cpc	r24, r1
     478:	91 05       	cpc	r25, r1
     47a:	08 f4       	brcc	.+2      	; 0x47e <BNO_print_calib_on_change+0x2a>
		uint8_t lvl_sys, lvl_gyro, lvl_acc, lvl_mag;
		
		calib_time = CTRL_get_time();
     47c:	61 c0       	rjmp	.+194    	; 0x540 <BNO_print_calib_on_change+0xec>
     47e:	34 d6       	rcall	.+3176   	; 0x10e8 <CTRL_get_time>
     480:	60 93 ba 03 	sts	0x03BA, r22	; 0x8003ba <calib_time.2081>
     484:	70 93 bb 03 	sts	0x03BB, r23	; 0x8003bb <calib_time.2081+0x1>
     488:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <calib_time.2081+0x2>
     48c:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <calib_time.2081+0x3>
		BNO_read_calib_levels(&lvl_sys, &lvl_gyro, &lvl_acc, &lvl_mag);
     490:	9e 01       	movw	r18, r28
     492:	2f 5f       	subi	r18, 0xFF	; 255
     494:	3f 4f       	sbci	r19, 0xFF	; 255
     496:	ae 01       	movw	r20, r28
     498:	4e 5f       	subi	r20, 0xFE	; 254
     49a:	5f 4f       	sbci	r21, 0xFF	; 255
     49c:	be 01       	movw	r22, r28
     49e:	6d 5f       	subi	r22, 0xFD	; 253
     4a0:	7f 4f       	sbci	r23, 0xFF	; 255
     4a2:	ce 01       	movw	r24, r28
     4a4:	04 96       	adiw	r24, 0x04	; 4
     4a6:	f6 de       	rcall	.-532    	; 0x294 <BNO_read_calib_levels>
		
		if (lvl_sys != lvl_sys_old) {
     4a8:	8c 81       	ldd	r24, Y+4	; 0x04
     4aa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <lvl_sys_old.2077>
     4ae:	89 17       	cp	r24, r25
			print("cal sys=%d\n", lvl_sys);
     4b0:	71 f0       	breq	.+28     	; 0x4ce <BNO_print_calib_on_change+0x7a>
     4b2:	1f 92       	push	r1
     4b4:	8f 93       	push	r24
     4b6:	87 e0       	ldi	r24, 0x07	; 7
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	9f 93       	push	r25
     4bc:	8f 93       	push	r24
     4be:	04 d4       	rcall	.+2056   	; 0xcc8 <print>
			lvl_sys_old = lvl_sys;
     4c0:	8c 81       	ldd	r24, Y+4	; 0x04
     4c2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <lvl_sys_old.2077>
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
		}
		if (lvl_gyro != lvl_gyro_old) {
     4ce:	8b 81       	ldd	r24, Y+3	; 0x03
     4d0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <lvl_gyro_old.2078>
     4d4:	89 17       	cp	r24, r25
			print("cal gyro=%d\n", lvl_gyro);
     4d6:	71 f0       	breq	.+28     	; 0x4f4 <BNO_print_calib_on_change+0xa0>
     4d8:	1f 92       	push	r1
     4da:	8f 93       	push	r24
     4dc:	83 e1       	ldi	r24, 0x13	; 19
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	9f 93       	push	r25
     4e2:	8f 93       	push	r24
     4e4:	f1 d3       	rcall	.+2018   	; 0xcc8 <print>
			lvl_gyro_old = lvl_gyro;
     4e6:	8b 81       	ldd	r24, Y+3	; 0x03
     4e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <lvl_gyro_old.2078>
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
		}
		if (lvl_acc != lvl_acc_old) {
     4f2:	0f 90       	pop	r0
     4f4:	8a 81       	ldd	r24, Y+2	; 0x02
     4f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <lvl_acc_old.2079>
     4fa:	89 17       	cp	r24, r25
			print("cal acc=%d\n", lvl_acc);
     4fc:	71 f0       	breq	.+28     	; 0x51a <BNO_print_calib_on_change+0xc6>
     4fe:	1f 92       	push	r1
     500:	8f 93       	push	r24
     502:	80 e2       	ldi	r24, 0x20	; 32
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	9f 93       	push	r25
     508:	8f 93       	push	r24
     50a:	de d3       	rcall	.+1980   	; 0xcc8 <print>
			lvl_acc_old = lvl_acc;
     50c:	8a 81       	ldd	r24, Y+2	; 0x02
     50e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <lvl_acc_old.2079>
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
		}
		if (lvl_mag != lvl_mag_old) {
     518:	0f 90       	pop	r0
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     520:	89 17       	cp	r24, r25
			print("cal mag=%d\n", lvl_mag);
     522:	71 f0       	breq	.+28     	; 0x540 <BNO_print_calib_on_change+0xec>
     524:	1f 92       	push	r1
     526:	8f 93       	push	r24
     528:	8c e2       	ldi	r24, 0x2C	; 44
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	9f 93       	push	r25
     52e:	8f 93       	push	r24
     530:	cb d3       	rcall	.+1942   	; 0xcc8 <print>
			lvl_mag_old = lvl_mag;
     532:	89 81       	ldd	r24, Y+1	; 0x01
     534:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
		}
	}
}
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	08 95       	ret

0000054e <BNO_print_data>:

void BNO_print_data(void)
{
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	64 97       	sbiw	r28, 0x14	; 20
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	0f be       	out	0x3f, r0	; 63
	static uint32_t _time = 0;
	BNO_angle_t angle;
	uint8_t lvl_sys, lvl_gyro, lvl_acc, lvl_mag;
	
	if (CTRL_get_time_elapsed(_time) > 300) {
     560:	cd bf       	out	0x3d, r28	; 61
     562:	60 91 b6 03 	lds	r22, 0x03B6	; 0x8003b6 <__data_end>
     566:	70 91 b7 03 	lds	r23, 0x03B7	; 0x8003b7 <__data_end+0x1>
     56a:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <__data_end+0x2>
     56e:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <__data_end+0x3>
     572:	c3 d5       	rcall	.+2950   	; 0x10fa <CTRL_get_time_elapsed>
     574:	6d 32       	cpi	r22, 0x2D	; 45
     576:	71 40       	sbci	r23, 0x01	; 1
     578:	81 05       	cpc	r24, r1
     57a:	91 05       	cpc	r25, r1
		_time = CTRL_get_time();
     57c:	08 f4       	brcc	.+2      	; 0x580 <BNO_print_data+0x32>
     57e:	7b c0       	rjmp	.+246    	; 0x676 <BNO_print_data+0x128>
     580:	b3 d5       	rcall	.+2918   	; 0x10e8 <CTRL_get_time>
     582:	60 93 b6 03 	sts	0x03B6, r22	; 0x8003b6 <__data_end>
     586:	70 93 b7 03 	sts	0x03B7, r23	; 0x8003b7 <__data_end+0x1>
     58a:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <__data_end+0x2>
		
		// request data
		BNO_start_reading();
     58e:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <__data_end+0x3>
		// wait for data
		while (I2C_IN_PROGRESS == _local._stat_r)
     592:	88 dd       	rcall	.-1264   	; 0xa4 <BNO_start_reading>
     594:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <_local+0x8>
		;
		// print angle
		if (I2C_SUCCESS == _local._stat_r) {
     598:	83 30       	cpi	r24, 0x03	; 3
     59a:	e1 f3       	breq	.-8      	; 0x594 <BNO_print_data+0x46>
     59c:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <_local+0x8>
			angle = BNO_angle();
     5a0:	81 11       	cpse	r24, r1
     5a2:	65 c0       	rjmp	.+202    	; 0x66e <BNO_print_data+0x120>
     5a4:	ce 01       	movw	r24, r28
			print("============\n\r");
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	b7 dd       	rcall	.-1170   	; 0x118 <BNO_angle>
     5aa:	88 e3       	ldi	r24, 0x38	; 56
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	9f 93       	push	r25
     5b0:	8f 93       	push	r24
			print("x=%f\n\r", angle.x);
     5b2:	8a d3       	rcall	.+1812   	; 0xcc8 <print>
     5b4:	8c 81       	ldd	r24, Y+4	; 0x04
     5b6:	8f 93       	push	r24
     5b8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ba:	8f 93       	push	r24
     5bc:	8a 81       	ldd	r24, Y+2	; 0x02
     5be:	8f 93       	push	r24
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	8f 93       	push	r24
     5c4:	87 e4       	ldi	r24, 0x47	; 71
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	9f 93       	push	r25
     5ca:	8f 93       	push	r24
			print("y=%f\n\r", angle.y);
     5cc:	7d d3       	rcall	.+1786   	; 0xcc8 <print>
     5ce:	88 85       	ldd	r24, Y+8	; 0x08
     5d0:	8f 93       	push	r24
     5d2:	8f 81       	ldd	r24, Y+7	; 0x07
     5d4:	8f 93       	push	r24
     5d6:	8e 81       	ldd	r24, Y+6	; 0x06
     5d8:	8f 93       	push	r24
     5da:	8d 81       	ldd	r24, Y+5	; 0x05
     5dc:	8f 93       	push	r24
     5de:	8e e4       	ldi	r24, 0x4E	; 78
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	9f 93       	push	r25
     5e4:	8f 93       	push	r24
			print("z=%f\n\r", angle.z);
     5e6:	70 d3       	rcall	.+1760   	; 0xcc8 <print>
     5e8:	8c 85       	ldd	r24, Y+12	; 0x0c
     5ea:	8f 93       	push	r24
     5ec:	8b 85       	ldd	r24, Y+11	; 0x0b
     5ee:	8f 93       	push	r24
     5f0:	8a 85       	ldd	r24, Y+10	; 0x0a
     5f2:	8f 93       	push	r24
     5f4:	89 85       	ldd	r24, Y+9	; 0x09
     5f6:	8f 93       	push	r24
     5f8:	85 e5       	ldi	r24, 0x55	; 85
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	9f 93       	push	r25
			BNO_read_calib_levels(&lvl_sys, &lvl_gyro, &lvl_acc, &lvl_mag);
     5fe:	8f 93       	push	r24
     600:	63 d3       	rcall	.+1734   	; 0xcc8 <print>
     602:	9e 01       	movw	r18, r28
     604:	2f 5e       	subi	r18, 0xEF	; 239
     606:	3f 4f       	sbci	r19, 0xFF	; 255
     608:	ae 01       	movw	r20, r28
     60a:	4e 5e       	subi	r20, 0xEE	; 238
     60c:	5f 4f       	sbci	r21, 0xFF	; 255
     60e:	be 01       	movw	r22, r28
     610:	6d 5e       	subi	r22, 0xED	; 237
     612:	7f 4f       	sbci	r23, 0xFF	; 255
     614:	ce 01       	movw	r24, r28
			print("c_s=%d\n\r", lvl_sys);
     616:	44 96       	adiw	r24, 0x14	; 20
     618:	3d de       	rcall	.-902    	; 0x294 <BNO_read_calib_levels>
     61a:	8c 89       	ldd	r24, Y+20	; 0x14
     61c:	1f 92       	push	r1
     61e:	8f 93       	push	r24
     620:	8c e5       	ldi	r24, 0x5C	; 92
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	9f 93       	push	r25
			print("c_g=%d\n\r", lvl_gyro);
     626:	8f 93       	push	r24
     628:	4f d3       	rcall	.+1694   	; 0xcc8 <print>
     62a:	8b 89       	ldd	r24, Y+19	; 0x13
     62c:	1f 92       	push	r1
     62e:	8f 93       	push	r24
     630:	85 e6       	ldi	r24, 0x65	; 101
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	9f 93       	push	r25
			print("c_a=%d\n\r", lvl_acc);
     636:	8f 93       	push	r24
     638:	47 d3       	rcall	.+1678   	; 0xcc8 <print>
     63a:	8a 89       	ldd	r24, Y+18	; 0x12
     63c:	1f 92       	push	r1
     63e:	8f 93       	push	r24
     640:	8e e6       	ldi	r24, 0x6E	; 110
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	9f 93       	push	r25
     646:	8f 93       	push	r24
			print("c_m=%d\n\r", lvl_mag);
     648:	3f d3       	rcall	.+1662   	; 0xcc8 <print>
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
     654:	89 89       	ldd	r24, Y+17	; 0x11
     656:	1f 92       	push	r1
     658:	8f 93       	push	r24
     65a:	87 e7       	ldi	r24, 0x77	; 119
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	9f 93       	push	r25
     660:	8f 93       	push	r24
     662:	32 d3       	rcall	.+1636   	; 0xcc8 <print>
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
		} else {
			UART_write_str("BNO: Failed to read data\r\n");
     66c:	04 c0       	rjmp	.+8      	; 0x676 <BNO_print_data+0x128>
     66e:	80 e8       	ldi	r24, 0x80	; 128
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <UART_write_str>
		}
	}
}
     676:	64 96       	adiw	r28, 0x14	; 20
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
     682:	df 91       	pop	r29

bool _BNO_test_1(void)
{
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <_BNO_test_1>:
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	00 d0       	rcall	.+0      	; 0x692 <_BNO_test_1+0xa>
	I2C_stat_t status;
	uint8_t data;
	bool enq;
	
	print("== BNO055 Test 1: Read ==\n");
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	8b e9       	ldi	r24, 0x9B	; 155
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	9f 93       	push	r25
     69c:	8f 93       	push	r24
	// wait for I2C to be ready
	while (!I2C_available_tasks())
     69e:	14 d3       	rcall	.+1576   	; 0xcc8 <print>
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <I2C_available_tasks>
		;
	
	print("Writing reg address\n");
     6a8:	88 23       	and	r24, r24
     6aa:	e1 f3       	breq	.-8      	; 0x6a4 <_BNO_test_1+0x1c>
     6ac:	86 eb       	ldi	r24, 0xB6	; 182
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	9f 93       	push	r25
     6b2:	8f 93       	push	r24
	data = BNO055_CHIP_ID_ADDR;
     6b4:	09 d3       	rcall	.+1554   	; 0xcc8 <print>
     6b6:	19 82       	std	Y+1, r1	; 0x01
     6b8:	8e 01       	movw	r16, r28
     6ba:	0e 5f       	subi	r16, 0xFE	; 254
     6bc:	1f 4f       	sbci	r17, 0xFF	; 255
     6be:	21 e0       	ldi	r18, 0x01	; 1
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	ae 01       	movw	r20, r28
     6c4:	4f 5f       	subi	r20, 0xFF	; 255
     6c6:	5f 4f       	sbci	r21, 0xFF	; 255
     6c8:	68 e2       	ldi	r22, 0x28	; 40
     6ca:	80 e0       	ldi	r24, 0x00	; 0
	enq = I2C_write(CONF_BNO055_ADDRESS, &data, 1, &status);
	if (enq) {
     6cc:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_I2C_enqueue_task>
     6d0:	18 2f       	mov	r17, r24
     6d2:	0f 90       	pop	r0
		print("Task added to queue\n");
     6d4:	0f 90       	pop	r0
     6d6:	88 23       	and	r24, r24
     6d8:	41 f0       	breq	.+16     	; 0x6ea <_BNO_test_1+0x62>
     6da:	8b ec       	ldi	r24, 0xCB	; 203
     6dc:	91 e0       	ldi	r25, 0x01	; 1
		} else {
		print("Failed to add to queue\n");
		return false;
	}
	
	while (I2C_IN_PROGRESS == status)
     6de:	9f 93       	push	r25
     6e0:	8f 93       	push	r24
     6e2:	f2 d2       	rcall	.+1508   	; 0xcc8 <print>
	data = BNO055_CHIP_ID_ADDR;
	enq = I2C_write(CONF_BNO055_ADDRESS, &data, 1, &status);
	if (enq) {
		print("Task added to queue\n");
		} else {
		print("Failed to add to queue\n");
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	08 c0       	rjmp	.+16     	; 0x6fa <_BNO_test_1+0x72>
     6ea:	80 ee       	ldi	r24, 0xE0	; 224
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	9f 93       	push	r25
		return false;
     6f0:	8f 93       	push	r24
     6f2:	ea d2       	rcall	.+1492   	; 0xcc8 <print>
     6f4:	0f 90       	pop	r0
	}
	
	while (I2C_IN_PROGRESS == status)
     6f6:	0f 90       	pop	r0
     6f8:	68 c0       	rjmp	.+208    	; 0x7ca <_BNO_test_1+0x142>
     6fa:	8a 81       	ldd	r24, Y+2	; 0x02
	;
	print("DONE\n");
     6fc:	83 30       	cpi	r24, 0x03	; 3
     6fe:	e9 f3       	breq	.-6      	; 0x6fa <_BNO_test_1+0x72>
     700:	88 ef       	ldi	r24, 0xF8	; 248
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	9f 93       	push	r25
     706:	8f 93       	push	r24
	
	if (status != I2C_SUCCESS) {
     708:	df d2       	rcall	.+1470   	; 0xcc8 <print>
     70a:	8a 81       	ldd	r24, Y+2	; 0x02
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
			print("I2C: WRITE NACK\n");
		}
		return status;
	}
	
	print("Reading reg value .. ");
     710:	81 11       	cpse	r24, r1
     712:	21 c0       	rjmp	.+66     	; 0x756 <_BNO_test_1+0xce>
     714:	8a e1       	ldi	r24, 0x1A	; 26
     716:	92 e0       	ldi	r25, 0x02	; 2
     718:	9f 93       	push	r25
     71a:	8f 93       	push	r24
	data = 0;
     71c:	d5 d2       	rcall	.+1450   	; 0xcc8 <print>
 * Will write operation status in 'status' argument
 * as the transmission unfolds
 */
static inline bool I2C_read(uint8_t addr, uint8_t *buff, uint16_t max_len, volatile I2C_stat_t *status)
{
	return _I2C_enqueue_task(true, addr, buff, max_len, status);
     71e:	19 82       	std	Y+1, r1	; 0x01
     720:	8e 01       	movw	r16, r28
     722:	0e 5f       	subi	r16, 0xFE	; 254
     724:	1f 4f       	sbci	r17, 0xFF	; 255
     726:	21 e0       	ldi	r18, 0x01	; 1
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	ae 01       	movw	r20, r28
     72c:	4f 5f       	subi	r20, 0xFF	; 255
     72e:	5f 4f       	sbci	r21, 0xFF	; 255
     730:	68 e2       	ldi	r22, 0x28	; 40
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_I2C_enqueue_task>
	I2C_read(CONF_BNO055_ADDRESS, &data, 1, &status);
	while (I2C_IN_PROGRESS == status)
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	8a 81       	ldd	r24, Y+2	; 0x02
	;
	print("DONE\n");
     73e:	83 30       	cpi	r24, 0x03	; 3
     740:	e9 f3       	breq	.-6      	; 0x73c <_BNO_test_1+0xb4>
     742:	88 ef       	ldi	r24, 0xF8	; 248
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	9f 93       	push	r25
	
	if (I2C_SUCCESS != status) {
     748:	8f 93       	push	r24
     74a:	be d2       	rcall	.+1404   	; 0xcc8 <print>
     74c:	8a 81       	ldd	r24, Y+2	; 0x02
     74e:	0f 90       	pop	r0
		// handle errors
		if (I2C_ADDRESS_NACK == status) {
     750:	0f 90       	pop	r0
     752:	88 23       	and	r24, r24
     754:	a9 f0       	breq	.+42     	; 0x780 <_BNO_test_1+0xf8>
			print("I2C: NACK\n");
     756:	8a 81       	ldd	r24, Y+2	; 0x02
     758:	81 30       	cpi	r24, 0x01	; 1
     75a:	19 f4       	brne	.+6      	; 0x762 <_BNO_test_1+0xda>
			} else if (I2C_WRITE_NACK == status) {
     75c:	8e ef       	ldi	r24, 0xFE	; 254
     75e:	91 e0       	ldi	r25, 0x01	; 1
			print("I2C: WRITE NACK\n");
     760:	05 c0       	rjmp	.+10     	; 0x76c <_BNO_test_1+0xe4>
     762:	8a 81       	ldd	r24, Y+2	; 0x02
     764:	82 30       	cpi	r24, 0x02	; 2
     766:	39 f4       	brne	.+14     	; 0x776 <_BNO_test_1+0xee>
     768:	89 e0       	ldi	r24, 0x09	; 9
     76a:	92 e0       	ldi	r25, 0x02	; 2
     76c:	9f 93       	push	r25
     76e:	8f 93       	push	r24
		}
		return status;
     770:	ab d2       	rcall	.+1366   	; 0xcc8 <print>
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	8a 81       	ldd	r24, Y+2	; 0x02
	}
	
	print("RW SUCCESS!\n");
     778:	11 e0       	ldi	r17, 0x01	; 1
     77a:	81 11       	cpse	r24, r1
     77c:	26 c0       	rjmp	.+76     	; 0x7ca <_BNO_test_1+0x142>
     77e:	24 c0       	rjmp	.+72     	; 0x7c8 <_BNO_test_1+0x140>
     780:	80 e3       	ldi	r24, 0x30	; 48
     782:	92 e0       	ldi	r25, 0x02	; 2
	
	print("Check Value .. ");
     784:	9f 93       	push	r25
     786:	8f 93       	push	r24
     788:	9f d2       	rcall	.+1342   	; 0xcc8 <print>
     78a:	8d e3       	ldi	r24, 0x3D	; 61
     78c:	92 e0       	ldi	r25, 0x02	; 2
     78e:	9f 93       	push	r25
	
	if (BNO055_ID == data) {
     790:	8f 93       	push	r24
     792:	9a d2       	rcall	.+1332   	; 0xcc8 <print>
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	0f 90       	pop	r0
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
		print("OK\n");
     79e:	80 3a       	cpi	r24, 0xA0	; 160
     7a0:	41 f4       	brne	.+16     	; 0x7b2 <_BNO_test_1+0x12a>
     7a2:	85 e9       	ldi	r24, 0x95	; 149
     7a4:	92 e0       	ldi	r25, 0x02	; 2
     7a6:	9f 93       	push	r25
     7a8:	8f 93       	push	r24
     7aa:	8e d2       	rcall	.+1308   	; 0xcc8 <print>
		} else {
		print("FAIL=%x\n", data);
     7ac:	0f 90       	pop	r0
     7ae:	0f 90       	pop	r0
     7b0:	0b c0       	rjmp	.+22     	; 0x7c8 <_BNO_test_1+0x140>
     7b2:	1f 92       	push	r1
     7b4:	8f 93       	push	r24
     7b6:	8d e4       	ldi	r24, 0x4D	; 77
     7b8:	92 e0       	ldi	r25, 0x02	; 2
     7ba:	9f 93       	push	r25
     7bc:	8f 93       	push	r24
     7be:	84 d2       	rcall	.+1288   	; 0xcc8 <print>
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
	}
	
	return I2C_SUCCESS;
     7c4:	0f 90       	pop	r0
}
     7c6:	0f 90       	pop	r0
     7c8:	10 e0       	ldi	r17, 0x00	; 0
     7ca:	81 2f       	mov	r24, r17
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28



bool _BNO_test_2(void)
{
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	08 95       	ret

000007da <_BNO_test_2>:
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
	uint8_t data;
	I2C_stat_t stat;
	
	
	print(" == BNO: Test 2 ==\n");
     7de:	00 d0       	rcall	.+0      	; 0x7e0 <_BNO_test_2+0x6>
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
     7e4:	86 e5       	ldi	r24, 0x56	; 86
     7e6:	92 e0       	ldi	r25, 0x02	; 2
	data = 0;
     7e8:	9f 93       	push	r25
	stat = BNO_read_reg(BNO055_CHIP_ID_ADDR, &data, 1);
     7ea:	8f 93       	push	r24
     7ec:	6d d2       	rcall	.+1242   	; 0xcc8 <print>
     7ee:	1a 82       	std	Y+2, r1	; 0x02
     7f0:	41 e0       	ldi	r20, 0x01	; 1
     7f2:	be 01       	movw	r22, r28
     7f4:	6e 5f       	subi	r22, 0xFE	; 254
     7f6:	7f 4f       	sbci	r23, 0xFF	; 255
     7f8:	80 e0       	ldi	r24, 0x00	; 0
	
	if (I2C_SUCCESS != stat) {
     7fa:	01 dd       	rcall	.-1534   	; 0x1fe <BNO_read_reg>
     7fc:	69 83       	std	Y+1, r22	; 0x01
     7fe:	89 81       	ldd	r24, Y+1	; 0x01
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
		print("I2C error=%d\n", stat);
     804:	88 23       	and	r24, r24
     806:	31 f0       	breq	.+12     	; 0x814 <_BNO_test_2+0x3a>
     808:	89 81       	ldd	r24, Y+1	; 0x01
     80a:	1f 92       	push	r1
     80c:	8f 93       	push	r24
		} else {
		if (BNO055_ID == data) {
     80e:	8a e6       	ldi	r24, 0x6A	; 106
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	10 c0       	rjmp	.+32     	; 0x834 <_BNO_test_2+0x5a>
			print("OK\n");
     814:	8a 81       	ldd	r24, Y+2	; 0x02
     816:	80 3a       	cpi	r24, 0xA0	; 160
     818:	49 f4       	brne	.+18     	; 0x82c <_BNO_test_2+0x52>
     81a:	85 e9       	ldi	r24, 0x95	; 149
     81c:	92 e0       	ldi	r25, 0x02	; 2
     81e:	9f 93       	push	r25
			return true;
     820:	8f 93       	push	r24
     822:	52 d2       	rcall	.+1188   	; 0xcc8 <print>
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
			} else {
			print("FAIL val=%x\n", data);
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	0c c0       	rjmp	.+24     	; 0x844 <_BNO_test_2+0x6a>
     82c:	1f 92       	push	r1
     82e:	8f 93       	push	r24
     830:	88 e7       	ldi	r24, 0x78	; 120
     832:	92 e0       	ldi	r25, 0x02	; 2
     834:	9f 93       	push	r25
     836:	8f 93       	push	r24
     838:	47 d2       	rcall	.+1166   	; 0xcc8 <print>
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
		}
	}
	
	
	return false;
     83e:	0f 90       	pop	r0
}
     840:	0f 90       	pop	r0
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	df 91       	pop	r29


bool _BNO_test_3(void)
{
     84a:	cf 91       	pop	r28
     84c:	08 95       	ret

0000084e <_BNO_test_3>:
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	1f 92       	push	r1
	I2C_stat_t stat;
	
	print("BNO: init\n");
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	85 e8       	ldi	r24, 0x85	; 133
     85a:	92 e0       	ldi	r25, 0x02	; 2
     85c:	9f 93       	push	r25
	stat = BNO_init(false);
     85e:	8f 93       	push	r24
     860:	33 d2       	rcall	.+1126   	; 0xcc8 <print>
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	a4 dd       	rcall	.-1208   	; 0x3ae <BNO_init>
	if (I2C_SUCCESS != stat) {
     866:	69 83       	std	Y+1, r22	; 0x01
     868:	89 81       	ldd	r24, Y+1	; 0x01
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	88 23       	and	r24, r24
		IND_set_mode(IND_ERROR);
     870:	21 f0       	breq	.+8      	; 0x87a <_BNO_test_3+0x2c>
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	0e 94 ca 0c 	call	0x1994	; 0x1994 <IND_set_mode>
		// loop forever
		while (1)
			;
	}
	print("BNO: OK\n");
     878:	ff cf       	rjmp	.-2      	; 0x878 <_BNO_test_3+0x2a>
     87a:	80 e9       	ldi	r24, 0x90	; 144
     87c:	92 e0       	ldi	r25, 0x02	; 2
     87e:	9f 93       	push	r25
     880:	8f 93       	push	r24
     882:	22 d2       	rcall	.+1092   	; 0xcc8 <print>
	
	return true;
}
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28


bool _BNO_test_4(void)
{
     890:	08 95       	ret

00000892 <_BNO_test_4>:
     892:	bf 92       	push	r11
     894:	cf 92       	push	r12
     896:	df 92       	push	r13
     898:	ef 92       	push	r14
     89a:	ff 92       	push	r15
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	1f 92       	push	r1
     8a6:	cd b7       	in	r28, 0x3d	; 61
	int i;
	uint8_t data;
	
	BNO_write_reg(BNO055_OPR_MODE_ADDR, OPERATION_MODE_CONFIG);
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	8d e3       	ldi	r24, 0x3D	; 61
     8ae:	5a dd       	rcall	.-1356   	; 0x364 <BNO_write_reg>
     8b0:	2f ef       	ldi	r18, 0xFF	; 255
     8b2:	86 e7       	ldi	r24, 0x76	; 118
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	21 50       	subi	r18, 0x01	; 1
     8b8:	80 40       	sbci	r24, 0x00	; 0
     8ba:	90 40       	sbci	r25, 0x00	; 0
     8bc:	e1 f7       	brne	.-8      	; 0x8b6 <_BNO_test_4+0x24>
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <_BNO_test_4+0x2e>
	_delay_ms(30);
	
	
	// FIX ME PLS!!!
	// 160 != 0
	for (i = 0; i <= 12; i++) {
     8c0:	00 00       	nop
     8c2:	00 e0       	ldi	r16, 0x00	; 0
		data = 0xff;
     8c4:	10 e0       	ldi	r17, 0x00	; 0
     8c6:	bb 24       	eor	r11, r11
		BNO_read_reg(GYRO_OFFSET_Z_LSB_ADDR, &data, 1);
		
		if (data == i) {
			print("%d == %d\n", data, i);
			} else {
			print("%d != %d\n", data, i);
     8c8:	ba 94       	dec	r11
     8ca:	83 ea       	ldi	r24, 0xA3	; 163
     8cc:	e8 2e       	mov	r14, r24
     8ce:	82 e0       	ldi	r24, 0x02	; 2
		data = 0xff;
		BNO_write_reg(GYRO_OFFSET_Z_LSB_ADDR, i);
		BNO_read_reg(GYRO_OFFSET_Z_LSB_ADDR, &data, 1);
		
		if (data == i) {
			print("%d == %d\n", data, i);
     8d0:	f8 2e       	mov	r15, r24
     8d2:	99 e9       	ldi	r25, 0x99	; 153
     8d4:	c9 2e       	mov	r12, r25
     8d6:	92 e0       	ldi	r25, 0x02	; 2
	
	
	// FIX ME PLS!!!
	// 160 != 0
	for (i = 0; i <= 12; i++) {
		data = 0xff;
     8d8:	d9 2e       	mov	r13, r25
		BNO_write_reg(GYRO_OFFSET_Z_LSB_ADDR, i);
     8da:	b9 82       	std	Y+1, r11	; 0x01
     8dc:	60 2f       	mov	r22, r16
     8de:	85 e6       	ldi	r24, 0x65	; 101
     8e0:	41 dd       	rcall	.-1406   	; 0x364 <BNO_write_reg>
		BNO_read_reg(GYRO_OFFSET_Z_LSB_ADDR, &data, 1);
     8e2:	41 e0       	ldi	r20, 0x01	; 1
     8e4:	be 01       	movw	r22, r28
     8e6:	6f 5f       	subi	r22, 0xFF	; 255
     8e8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ea:	85 e6       	ldi	r24, 0x65	; 101
     8ec:	88 dc       	rcall	.-1776   	; 0x1fe <BNO_read_reg>
		
		if (data == i) {
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	28 2f       	mov	r18, r24
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	20 17       	cp	r18, r16
     8f6:	31 07       	cpc	r19, r17
     8f8:	39 f4       	brne	.+14     	; 0x908 <__stack+0x9>
			print("%d == %d\n", data, i);
     8fa:	1f 93       	push	r17
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	0f 93       	push	r16
     902:	df 92       	push	r13
     904:	cf 92       	push	r12
     906:	06 c0       	rjmp	.+12     	; 0x914 <__stack+0x15>
			} else {
			print("%d != %d\n", data, i);
     908:	1f 93       	push	r17
     90a:	0f 93       	push	r16
     90c:	1f 92       	push	r1
     90e:	8f 93       	push	r24
     910:	ff 92       	push	r15
     912:	ef 92       	push	r14
     914:	d9 d1       	rcall	.+946    	; 0xcc8 <print>
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	2f ef       	ldi	r18, 0xFF	; 255
     924:	85 ea       	ldi	r24, 0xA5	; 165
     926:	9e e0       	ldi	r25, 0x0E	; 14
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	80 40       	sbci	r24, 0x00	; 0
     92c:	90 40       	sbci	r25, 0x00	; 0
     92e:	e1 f7       	brne	.-8      	; 0x928 <__stack+0x29>
     930:	00 c0       	rjmp	.+0      	; 0x932 <__stack+0x33>
     932:	00 00       	nop
	_delay_ms(30);
	
	
	// FIX ME PLS!!!
	// 160 != 0
	for (i = 0; i <= 12; i++) {
     934:	0f 5f       	subi	r16, 0xFF	; 255
     936:	1f 4f       	sbci	r17, 0xFF	; 255
     938:	0d 30       	cpi	r16, 0x0D	; 13
     93a:	11 05       	cpc	r17, r1
     93c:	71 f6       	brne	.-100    	; 0x8da <_BNO_test_4+0x48>
		}
		
		_delay_ms(300);
	}
	
	BNO_write_reg(BNO055_OPR_MODE_ADDR, OPERATION_MODE_NDOF);
     93e:	6c e0       	ldi	r22, 0x0C	; 12
     940:	8d e3       	ldi	r24, 0x3D	; 61
     942:	10 dd       	rcall	.-1504   	; 0x364 <BNO_write_reg>
     944:	81 e0       	ldi	r24, 0x01	; 1
	
	return true;
}
     946:	0f 90       	pop	r0
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	ff 90       	pop	r15
     952:	ef 90       	pop	r14
     954:	df 90       	pop	r13
     956:	cf 90       	pop	r12
     958:	bf 90       	pop	r11
     95a:	08 95       	ret

0000095c <_BNO_test_5>:
     95c:	cf 93       	push	r28

bool _BNO_test_5(void)
{
     95e:	df 93       	push	r29
     960:	1f 92       	push	r1
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
     966:	41 e0       	ldi	r20, 0x01	; 1
	uint8_t data;
	
	BNO_read_reg(BNO055_CHIP_ID_ADDR, &data, 1);
     968:	be 01       	movw	r22, r28
     96a:	6f 5f       	subi	r22, 0xFF	; 255
     96c:	7f 4f       	sbci	r23, 0xFF	; 255
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	46 dc       	rcall	.-1908   	; 0x1fe <BNO_read_reg>
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	0f 90       	pop	r0
	
	return true;
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <_strcmp>:
	_cmd.index = 0;
}


bool _strcmp(const char * str1, const char * str2, int n)
{
     97c:	fb 01       	movw	r30, r22
     97e:	dc 01       	movw	r26, r24
	int i;
	for (i = 0; i != (n-1) ; i++) {
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	41 50       	subi	r20, 0x01	; 1
     986:	51 09       	sbc	r21, r1
     988:	24 17       	cp	r18, r20
     98a:	35 07       	cpc	r19, r21
     98c:	99 f0       	breq	.+38     	; 0x9b4 <_strcmp+0x38>
		if ((str1[i] == '\0') || (str2[i] == '\0')) {
     98e:	9d 91       	ld	r25, X+
     990:	99 23       	and	r25, r25
     992:	19 f0       	breq	.+6      	; 0x99a <_strcmp+0x1e>
     994:	81 91       	ld	r24, Z+
     996:	81 11       	cpse	r24, r1
     998:	08 c0       	rjmp	.+16     	; 0x9aa <_strcmp+0x2e>
			return str1[i] == str2[i];
     99a:	fb 01       	movw	r30, r22
     99c:	e2 0f       	add	r30, r18
     99e:	f3 1f       	adc	r31, r19
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	20 81       	ld	r18, Z
     9a4:	29 13       	cpse	r18, r25
     9a6:	08 c0       	rjmp	.+16     	; 0x9b8 <_strcmp+0x3c>
     9a8:	08 c0       	rjmp	.+16     	; 0x9ba <_strcmp+0x3e>
		}
		
		if (str1[i] != str2[i]) {
     9aa:	98 13       	cpse	r25, r24
     9ac:	05 c0       	rjmp	.+10     	; 0x9b8 <_strcmp+0x3c>


bool _strcmp(const char * str1, const char * str2, int n)
{
	int i;
	for (i = 0; i != (n-1) ; i++) {
     9ae:	2f 5f       	subi	r18, 0xFF	; 255
     9b0:	3f 4f       	sbci	r19, 0xFF	; 255
     9b2:	ea cf       	rjmp	.-44     	; 0x988 <_strcmp+0xc>
		if (str1[i] != str2[i]) {
			return false;
		}
	}
	
	return true;
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	08 95       	ret
		if ((str1[i] == '\0') || (str2[i] == '\0')) {
			return str1[i] == str2[i];
		}
		
		if (str1[i] != str2[i]) {
			return false;
     9b8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
     9ba:	08 95       	ret

000009bc <_print_sint>:
	EEPROM_write_array(0, (uint8_t*)&calib, sizeof(calib));
}


static void _print_sint(int num)
{
     9bc:	cf 92       	push	r12
     9be:	df 92       	push	r13
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	2a 97       	sbiw	r28, 0x0a	; 10
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	8c 01       	movw	r16, r24
	int len;
	char buff[10];
	
	
	if (0 == num) {
     9de:	00 97       	sbiw	r24, 0x00	; 0
     9e0:	89 f4       	brne	.+34     	; 0xa04 <_print_sint+0x48>
		UART_write('0');
     9e2:	80 e3       	ldi	r24, 0x30	; 48
		// print number
		for (len = len -1; len >= 0; len--) {
			UART_write(buff[len]);
		}
	}
}
     9e4:	2a 96       	adiw	r28, 0x0a	; 10
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	de bf       	out	0x3e, r29	; 62
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	cd bf       	out	0x3d, r28	; 61
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	ff 90       	pop	r15
     9fa:	ef 90       	pop	r14
     9fc:	df 90       	pop	r13
     9fe:	cf 90       	pop	r12
	int len;
	char buff[10];
	
	
	if (0 == num) {
		UART_write('0');
     a00:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <UART_write>
	} else {
		// if negative
		if (num < 0) {
     a04:	97 ff       	sbrs	r25, 7
     a06:	06 c0       	rjmp	.+12     	; 0xa14 <_print_sint+0x58>
			UART_write('-');
     a08:	8d e2       	ldi	r24, 0x2D	; 45
     a0a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <UART_write>
			num = -num;
     a0e:	11 95       	neg	r17
     a10:	01 95       	neg	r16
     a12:	11 09       	sbc	r17, r1
     a14:	ce 01       	movw	r24, r28
     a16:	01 96       	adiw	r24, 0x01	; 1
     a18:	7c 01       	movw	r14, r24
	EEPROM_write_array(0, (uint8_t*)&calib, sizeof(calib));
}


static void _print_sint(int num)
{
     a1a:	fc 01       	movw	r30, r24
		}
		
		// convert int to reverse char representation
		len = 0;
		while (num) {
			buff[len++] = '0' + (num % 10);
     a1c:	8a e0       	ldi	r24, 0x0A	; 10
     a1e:	c8 2e       	mov	r12, r24
     a20:	d1 2c       	mov	r13, r1
     a22:	9f 01       	movw	r18, r30
     a24:	2e 19       	sub	r18, r14
     a26:	3f 09       	sbc	r19, r15
     a28:	c8 01       	movw	r24, r16
     a2a:	b6 01       	movw	r22, r12
     a2c:	0e 94 77 11 	call	0x22ee	; 0x22ee <__divmodhi4>
     a30:	80 5d       	subi	r24, 0xD0	; 208
     a32:	81 93       	st	Z+, r24
			num /= 10;
     a34:	8b 01       	movw	r16, r22
			num = -num;
		}
		
		// convert int to reverse char representation
		len = 0;
		while (num) {
     a36:	67 2b       	or	r22, r23
     a38:	a1 f7       	brne	.-24     	; 0xa22 <_print_sint+0x66>
     a3a:	89 01       	movw	r16, r18
     a3c:	0f 5f       	subi	r16, 0xFF	; 255
     a3e:	1f 4f       	sbci	r17, 0xFF	; 255
     a40:	0e 0d       	add	r16, r14
     a42:	1f 1d       	adc	r17, r15
			buff[len++] = '0' + (num % 10);
			num /= 10;
		}
		
		// print number
		for (len = len -1; len >= 0; len--) {
     a44:	e0 16       	cp	r14, r16
     a46:	f1 06       	cpc	r15, r17
     a48:	31 f0       	breq	.+12     	; 0xa56 <_print_sint+0x9a>
			UART_write(buff[len]);
     a4a:	f8 01       	movw	r30, r16
     a4c:	82 91       	ld	r24, -Z
     a4e:	8f 01       	movw	r16, r30
     a50:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <UART_write>
     a54:	f7 cf       	rjmp	.-18     	; 0xa44 <_print_sint+0x88>
		}
	}
}
     a56:	2a 96       	adiw	r28, 0x0a	; 10
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	df 90       	pop	r13
     a70:	cf 90       	pop	r12
     a72:	08 95       	ret

00000a74 <CONS_init>:
} _cmd;


void CONS_init(void)
{
	_cmd.index = 0;
     a74:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <_cmd+0x1e>
     a78:	08 95       	ret

00000a7a <_handle_cmd>:
	_handle_cmd();
	_cmd.index = 0;
}

void _handle_cmd(void)
{
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	c4 55       	subi	r28, 0x54	; 84
     a84:	d1 09       	sbc	r29, r1
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	f8 94       	cli
     a8a:	de bf       	out	0x3e, r29	; 62
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	cd bf       	out	0x3d, r28	; 61
	
	/* P, I, D parameters are integers representing 
	 * the parameter value times 1000 
	 */
	// PID P term change
	if (('p' == _cmd.data[0]) 
     a90:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <_cmd>
     a94:	80 37       	cpi	r24, 0x70	; 112
     a96:	e1 f4       	brne	.+56     	; 0xad0 <_handle_cmd+0x56>
	&&  ('=' == _cmd.data[1])) {
     a98:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_cmd+0x1>
     a9c:	8d 33       	cpi	r24, 0x3D	; 61
     a9e:	09 f0       	breq	.+2      	; 0xaa2 <_handle_cmd+0x28>
     aa0:	95 c0       	rjmp	.+298    	; 0xbcc <_handle_cmd+0x152>
		if (_cmd.index >= 6) {
     aa2:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <_cmd+0x1e>
     aa6:	86 30       	cpi	r24, 0x06	; 6
     aa8:	08 f4       	brcc	.+2      	; 0xaac <_handle_cmd+0x32>
     aaa:	db c0       	rjmp	.+438    	; 0xc62 <_handle_cmd+0x1e8>
			tmp = ((uint32_t)_cmd.data[2])
			|	((uint32_t)_cmd.data[3] << 8)
			|	((uint32_t)_cmd.data[4] << 16)
			|	((uint32_t)_cmd.data[5] << 24);
			CTRL_set_PID_bp((float)tmp / 1000.0);
     aac:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <_cmd+0x2>
     ab0:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <_cmd+0x3>
     ab4:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <_cmd+0x4>
     ab8:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <_cmd+0x5>
     abc:	0e 94 0d 10 	call	0x201a	; 0x201a <__floatsisf>
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	4a e7       	ldi	r20, 0x7A	; 122
     ac6:	54 e4       	ldi	r21, 0x44	; 68
     ac8:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__divsf3>
     acc:	b7 d2       	rcall	.+1390   	; 0x103c <CTRL_set_PID_bp>
     ace:	1d c0       	rjmp	.+58     	; 0xb0a <_handle_cmd+0x90>
			UART_write_str("ok");
		}
	// PID I term change
	} else if ( ('i' == _cmd.data[0]) 
     ad0:	89 36       	cpi	r24, 0x69	; 105
     ad2:	f1 f4       	brne	.+60     	; 0xb10 <_handle_cmd+0x96>
			&&  ('=' == _cmd.data[1])) {
     ad4:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_cmd+0x1>
     ad8:	8d 33       	cpi	r24, 0x3D	; 61
     ada:	09 f0       	breq	.+2      	; 0xade <_handle_cmd+0x64>
     adc:	77 c0       	rjmp	.+238    	; 0xbcc <_handle_cmd+0x152>
		if (_cmd.index >= 6) {
     ade:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <_cmd+0x1e>
     ae2:	86 30       	cpi	r24, 0x06	; 6
     ae4:	08 f4       	brcc	.+2      	; 0xae8 <_handle_cmd+0x6e>
     ae6:	bd c0       	rjmp	.+378    	; 0xc62 <_handle_cmd+0x1e8>
			tmp = ((uint32_t)_cmd.data[2])
			|	((uint32_t)_cmd.data[3] << 8)
			|	((uint32_t)_cmd.data[4] << 16)
			|	((uint32_t)_cmd.data[5] << 24);
			CTRL_set_PID_bi((float)tmp / 1000.0);
     ae8:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <_cmd+0x2>
     aec:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <_cmd+0x3>
     af0:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <_cmd+0x4>
     af4:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <_cmd+0x5>
     af8:	0e 94 0d 10 	call	0x201a	; 0x201a <__floatsisf>
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	4a e7       	ldi	r20, 0x7A	; 122
     b02:	54 e4       	ldi	r21, 0x44	; 68
     b04:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__divsf3>
     b08:	a5 d2       	rcall	.+1354   	; 0x1054 <CTRL_set_PID_bi>
			UART_write_str("ok");
     b0a:	8d ea       	ldi	r24, 0xAD	; 173
     b0c:	92 e0       	ldi	r25, 0x02	; 2
     b0e:	a7 c0       	rjmp	.+334    	; 0xc5e <_handle_cmd+0x1e4>
		}
	// PID D term change
	} else if ( ('d' == _cmd.data[0]) 
     b10:	84 36       	cpi	r24, 0x64	; 100
     b12:	e1 f4       	brne	.+56     	; 0xb4c <_handle_cmd+0xd2>
			&&  ('=' == _cmd.data[1])) {
     b14:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_cmd+0x1>
     b18:	8d 33       	cpi	r24, 0x3D	; 61
     b1a:	09 f0       	breq	.+2      	; 0xb1e <_handle_cmd+0xa4>
     b1c:	57 c0       	rjmp	.+174    	; 0xbcc <_handle_cmd+0x152>
		if (_cmd.index >= 6) {
     b1e:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <_cmd+0x1e>
     b22:	86 30       	cpi	r24, 0x06	; 6
     b24:	08 f4       	brcc	.+2      	; 0xb28 <_handle_cmd+0xae>
     b26:	9d c0       	rjmp	.+314    	; 0xc62 <_handle_cmd+0x1e8>
			tmp = ((uint32_t)_cmd.data[2])
			|	((uint32_t)_cmd.data[3] << 8)
			|	((uint32_t)_cmd.data[4] << 16)
			|	((uint32_t)_cmd.data[5] << 24);
			CTRL_set_PID_bd((float)tmp / 1000.0);
     b28:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <_cmd+0x2>
     b2c:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <_cmd+0x3>
     b30:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <_cmd+0x4>
     b34:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <_cmd+0x5>
     b38:	0e 94 0d 10 	call	0x201a	; 0x201a <__floatsisf>
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	4a e7       	ldi	r20, 0x7A	; 122
     b42:	54 e4       	ldi	r21, 0x44	; 68
     b44:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__divsf3>
     b48:	91 d2       	rcall	.+1314   	; 0x106c <CTRL_set_PID_bd>
     b4a:	df cf       	rjmp	.-66     	; 0xb0a <_handle_cmd+0x90>
			UART_write_str("ok");
		}
	} else if (('a' == _cmd.data[0])
     b4c:	81 36       	cpi	r24, 0x61	; 97
     b4e:	e1 f4       	brne	.+56     	; 0xb88 <_handle_cmd+0x10e>
		   &&  ('=' == _cmd.data[1])) {
     b50:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_cmd+0x1>
     b54:	8d 33       	cpi	r24, 0x3D	; 61
     b56:	09 f0       	breq	.+2      	; 0xb5a <_handle_cmd+0xe0>
     b58:	39 c0       	rjmp	.+114    	; 0xbcc <_handle_cmd+0x152>
		if (_cmd.index >= 6) {
     b5a:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <_cmd+0x1e>
     b5e:	86 30       	cpi	r24, 0x06	; 6
     b60:	08 f4       	brcc	.+2      	; 0xb64 <_handle_cmd+0xea>
     b62:	7f c0       	rjmp	.+254    	; 0xc62 <_handle_cmd+0x1e8>
			tmp = ((uint32_t)_cmd.data[2])
			|	((uint32_t)_cmd.data[3] << 8)
			|	((uint32_t)_cmd.data[4] << 16)
			|	((uint32_t)_cmd.data[5] << 24);
			CTRL_set_angle_off((float)tmp / 1000.0f);
     b64:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <_cmd+0x2>
     b68:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <_cmd+0x3>
     b6c:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <_cmd+0x4>
     b70:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <_cmd+0x5>
     b74:	0e 94 0d 10 	call	0x201a	; 0x201a <__floatsisf>
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	4a e7       	ldi	r20, 0x7A	; 122
     b7e:	54 e4       	ldi	r21, 0x44	; 68
     b80:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__divsf3>
     b84:	7f d2       	rcall	.+1278   	; 0x1084 <CTRL_set_angle_off>
     b86:	c1 cf       	rjmp	.-126    	; 0xb0a <_handle_cmd+0x90>
			UART_write_str("ok");
		}
	} else if ( ('t' == _cmd.data[0])
     b88:	84 37       	cpi	r24, 0x74	; 116
     b8a:	e1 f4       	brne	.+56     	; 0xbc4 <_handle_cmd+0x14a>
			&&  ('=' == _cmd.data[1])) {
     b8c:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_cmd+0x1>
     b90:	8d 33       	cpi	r24, 0x3D	; 61
     b92:	e1 f4       	brne	.+56     	; 0xbcc <_handle_cmd+0x152>
		if ((_cmd.index > 2) 
     b94:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <_cmd+0x1e>
     b98:	83 30       	cpi	r24, 0x03	; 3
     b9a:	08 f4       	brcc	.+2      	; 0xb9e <_handle_cmd+0x124>
     b9c:	62 c0       	rjmp	.+196    	; 0xc62 <_handle_cmd+0x1e8>
		&& ('1' == _cmd.data[2])) {
     b9e:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <_cmd+0x2>
     ba2:	81 33       	cpi	r24, 0x31	; 49
			_BNO_test_1();
     ba4:	11 f4       	brne	.+4      	; 0xbaa <_handle_cmd+0x130>
     ba6:	70 dd       	rcall	.-1312   	; 0x688 <_BNO_test_1>
		} else if ((_cmd.index > 2)
		&& ('2' == _cmd.data[2])) {
     ba8:	5c c0       	rjmp	.+184    	; 0xc62 <_handle_cmd+0x1e8>
			_BNO_test_2();
     baa:	82 33       	cpi	r24, 0x32	; 50
     bac:	11 f4       	brne	.+4      	; 0xbb2 <_handle_cmd+0x138>
     bae:	15 de       	rcall	.-982    	; 0x7da <_BNO_test_2>
		} else if ((_cmd.index > 2)
		&& ('3' == _cmd.data[2])) {
     bb0:	58 c0       	rjmp	.+176    	; 0xc62 <_handle_cmd+0x1e8>
			_BNO_test_3();
     bb2:	83 33       	cpi	r24, 0x33	; 51
     bb4:	11 f4       	brne	.+4      	; 0xbba <_handle_cmd+0x140>
     bb6:	4b de       	rcall	.-874    	; 0x84e <_BNO_test_3>
		} else if ((_cmd.index > 2)
		&& ('4' == _cmd.data[2])) {
     bb8:	54 c0       	rjmp	.+168    	; 0xc62 <_handle_cmd+0x1e8>
     bba:	84 33       	cpi	r24, 0x34	; 52
			_BNO_test_4();
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <_handle_cmd+0x146>
     bbe:	51 c0       	rjmp	.+162    	; 0xc62 <_handle_cmd+0x1e8>
     bc0:	68 de       	rcall	.-816    	; 0x892 <_BNO_test_4>
		}
	} else if ('c' == _cmd.data[0]){
     bc2:	4f c0       	rjmp	.+158    	; 0xc62 <_handle_cmd+0x1e8>
     bc4:	83 36       	cpi	r24, 0x63	; 99
		BNO_read_print_cal();
     bc6:	11 f4       	brne	.+4      	; 0xbcc <_handle_cmd+0x152>
     bc8:	9e db       	rcall	.-2244   	; 0x306 <BNO_read_print_cal>
	} else if (_strcmp((char*)_cmd.data, "stream_on", -1)) {
     bca:	4b c0       	rjmp	.+150    	; 0xc62 <_handle_cmd+0x1e8>
     bcc:	4f ef       	ldi	r20, 0xFF	; 255
     bce:	5f ef       	ldi	r21, 0xFF	; 255
     bd0:	60 eb       	ldi	r22, 0xB0	; 176
     bd2:	72 e0       	ldi	r23, 0x02	; 2
     bd4:	88 ec       	ldi	r24, 0xC8	; 200
     bd6:	93 e0       	ldi	r25, 0x03	; 3
     bd8:	d1 de       	rcall	.-606    	; 0x97c <_strcmp>
     bda:	88 23       	and	r24, r24
     bdc:	21 f0       	breq	.+8      	; 0xbe6 <_handle_cmd+0x16c>
		CONF_streaming_on = true;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <CONF_streaming_on>
	} else if (_strcmp((char*)_cmd.data, "stream_off", -1)) {
     be4:	3e c0       	rjmp	.+124    	; 0xc62 <_handle_cmd+0x1e8>
     be6:	4f ef       	ldi	r20, 0xFF	; 255
     be8:	5f ef       	ldi	r21, 0xFF	; 255
     bea:	6a eb       	ldi	r22, 0xBA	; 186
     bec:	72 e0       	ldi	r23, 0x02	; 2
     bee:	88 ec       	ldi	r24, 0xC8	; 200
     bf0:	93 e0       	ldi	r25, 0x03	; 3
     bf2:	c4 de       	rcall	.-632    	; 0x97c <_strcmp>
     bf4:	88 23       	and	r24, r24
     bf6:	29 f0       	breq	.+10     	; 0xc02 <_handle_cmd+0x188>
		CONF_streaming_on = false;
     bf8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <CONF_streaming_on>
		UART_write_str("streaming off!\r\n");
     bfc:	85 ec       	ldi	r24, 0xC5	; 197
     bfe:	92 e0       	ldi	r25, 0x02	; 2
	} else if (_strcmp((char*)_cmd.data, "echo", 4)) {
     c00:	2e c0       	rjmp	.+92     	; 0xc5e <_handle_cmd+0x1e4>
     c02:	44 e0       	ldi	r20, 0x04	; 4
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	66 ed       	ldi	r22, 0xD6	; 214
     c08:	72 e0       	ldi	r23, 0x02	; 2
     c0a:	88 ec       	ldi	r24, 0xC8	; 200
     c0c:	93 e0       	ldi	r25, 0x03	; 3
     c0e:	b6 de       	rcall	.-660    	; 0x97c <_strcmp>
     c10:	88 23       	and	r24, r24
		UART_write_str("echo");
     c12:	19 f0       	breq	.+6      	; 0xc1a <_handle_cmd+0x1a0>
     c14:	86 ed       	ldi	r24, 0xD6	; 214
	} else if (_strcmp("calib", (char*)_cmd.data, 5)) {
     c16:	92 e0       	ldi	r25, 0x02	; 2
     c18:	22 c0       	rjmp	.+68     	; 0xc5e <_handle_cmd+0x1e4>
     c1a:	45 e0       	ldi	r20, 0x05	; 5
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	68 ec       	ldi	r22, 0xC8	; 200
     c20:	73 e0       	ldi	r23, 0x03	; 3
     c22:	8b ed       	ldi	r24, 0xDB	; 219
     c24:	92 e0       	ldi	r25, 0x02	; 2
     c26:	aa de       	rcall	.-684    	; 0x97c <_strcmp>
     c28:	88 23       	and	r24, r24

void _cmd_calib(void)
{
	struct calibration_t calib;
	
	calib = CTRL_get_calib();
     c2a:	b9 f0       	breq	.+46     	; 0xc5a <_handle_cmd+0x1e0>
     c2c:	ce 01       	movw	r24, r28
     c2e:	8b 96       	adiw	r24, 0x2b	; 43
     c30:	94 d2       	rcall	.+1320   	; 0x115a <CTRL_get_calib>
     c32:	8a e2       	ldi	r24, 0x2A	; 42
     c34:	fe 01       	movw	r30, r28
     c36:	bb 96       	adiw	r30, 0x2b	; 43
     c38:	de 01       	movw	r26, r28
     c3a:	11 96       	adiw	r26, 0x01	; 1
     c3c:	01 90       	ld	r0, Z+
     c3e:	0d 92       	st	X+, r0
     c40:	8a 95       	dec	r24
	
	EEPROM_write_array(0, (uint8_t*)&calib, sizeof(calib));
     c42:	e1 f7       	brne	.-8      	; 0xc3c <_handle_cmd+0x1c2>
     c44:	4a e2       	ldi	r20, 0x2A	; 42
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	be 01       	movw	r22, r28
     c4a:	6f 5f       	subi	r22, 0xFF	; 255
     c4c:	7f 4f       	sbci	r23, 0xFF	; 255
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	14 d5       	rcall	.+2600   	; 0x167c <EEPROM_write_array>
		UART_write_str("streaming off!\r\n");
	} else if (_strcmp((char*)_cmd.data, "echo", 4)) {
		UART_write_str("echo");
	} else if (_strcmp("calib", (char*)_cmd.data, 5)) {
		_cmd_calib();
		UART_write_str("Calib saved!\r\n");
     c54:	81 ee       	ldi	r24, 0xE1	; 225
     c56:	92 e0       	ldi	r25, 0x02	; 2
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <_handle_cmd+0x1e4>
	} else {
		UART_write_str("Invalid cmd!");
     c5a:	80 ef       	ldi	r24, 0xF0	; 240
     c5c:	92 e0       	ldi	r25, 0x02	; 2
     c5e:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <UART_write_str>
	}
}
     c62:	cc 5a       	subi	r28, 0xAC	; 172
     c64:	df 4f       	sbci	r29, 0xFF	; 255
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	08 95       	ret

00000c76 <CONS_handle>:
	return true;
}


void CONS_handle(void)
{
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
	while (UART_available() > 0) {
     c7a:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <UART_available>
     c7e:	18 16       	cp	r1, r24
     c80:	19 06       	cpc	r1, r25
     c82:	fc f4       	brge	.+62     	; 0xcc2 <CONS_handle+0x4c>
		// append byte
		_cmd.data[_cmd.index] = UART_read();
     c84:	c0 91 e6 03 	lds	r28, 0x03E6	; 0x8003e6 <_cmd+0x1e>
     c88:	d0 e0       	ldi	r29, 0x00	; 0
     c8a:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <UART_read>
     c8e:	c8 53       	subi	r28, 0x38	; 56
     c90:	dc 4f       	sbci	r29, 0xFC	; 252
		// check for complete command
		if ('\n' == _cmd.data[_cmd.index]) {
     c92:	88 83       	st	Y, r24
     c94:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <_cmd+0x1e>
     c98:	e8 2f       	mov	r30, r24
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	e8 53       	subi	r30, 0x38	; 56
     c9e:	fc 4f       	sbci	r31, 0xFC	; 252
     ca0:	90 81       	ld	r25, Z
     ca2:	9a 30       	cpi	r25, 0x0A	; 10
			// replace newline with line terminator
			_cmd.data[_cmd.index] = '\0';
     ca4:	29 f4       	brne	.+10     	; 0xcb0 <CONS_handle+0x3a>
	}
	
	return;
	
_cons_iterate_command:
	_handle_cmd();
     ca6:	10 82       	st	Z, r1
     ca8:	e8 de       	rcall	.-560    	; 0xa7a <_handle_cmd>
	_cmd.index = 0;
     caa:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <_cmd+0x1e>
     cae:	09 c0       	rjmp	.+18     	; 0xcc2 <CONS_handle+0x4c>
			_cmd.data[_cmd.index] = '\0';
			// handle buffer content as command
			goto _cons_iterate_command;
		}
		else {
			if (_cmd.index >= CONS_CMD_LINE_SIZE) {
     cb0:	8e 31       	cpi	r24, 0x1E	; 30
     cb2:	18 f0       	brcs	.+6      	; 0xcba <CONS_handle+0x44>
				_cmd.index = 0;
     cb4:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <_cmd+0x1e>
     cb8:	e0 cf       	rjmp	.-64     	; 0xc7a <CONS_handle+0x4>
			}
			else {
				_cmd.index ++;
     cba:	8f 5f       	subi	r24, 0xFF	; 255
     cbc:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <_cmd+0x1e>
     cc0:	dc cf       	rjmp	.-72     	; 0xc7a <CONS_handle+0x4>
	return;
	
_cons_iterate_command:
	_handle_cmd();
	_cmd.index = 0;
}
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	08 95       	ret

00000cc8 <print>:
	// print decimal part
	_print_sint((int)(100 * (num - floor(num))));
}

void print(const char *format, ...)
{
     cc8:	2f 92       	push	r2
     cca:	3f 92       	push	r3
     ccc:	4f 92       	push	r4
     cce:	5f 92       	push	r5
     cd0:	6f 92       	push	r6
     cd2:	7f 92       	push	r7
     cd4:	8f 92       	push	r8
     cd6:	9f 92       	push	r9
     cd8:	af 92       	push	r10
     cda:	bf 92       	push	r11
     cdc:	cf 92       	push	r12
     cde:	df 92       	push	r13
     ce0:	ef 92       	push	r14
     ce2:	ff 92       	push	r15
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	2a 97       	sbiw	r28, 0x0a	; 10
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
     cfc:	fe 01       	movw	r30, r28
     cfe:	7f 96       	adiw	r30, 0x1f	; 31
     d00:	81 91       	ld	r24, Z+
     d02:	91 91       	ld	r25, Z+
	va_list args;
	int index;
	
	va_start(args, format);
     d04:	7f 01       	movw	r14, r30
	
	// iterate format
	index = 0;
     d06:	00 e0       	ldi	r16, 0x00	; 0
     d08:	10 e0       	ldi	r17, 0x00	; 0
     d0a:	fe 01       	movw	r30, r28
     d0c:	31 96       	adiw	r30, 0x01	; 1
     d0e:	5f 01       	movw	r10, r30
	while (format[index] != '\0') {
     d10:	ef 8d       	ldd	r30, Y+31	; 0x1f
     d12:	f8 a1       	ldd	r31, Y+32	; 0x20
     d14:	e0 0f       	add	r30, r16
     d16:	f1 1f       	adc	r31, r17
     d18:	80 81       	ld	r24, Z
     d1a:	88 23       	and	r24, r24
     d1c:	09 f4       	brne	.+2      	; 0xd20 <print+0x58>
     d1e:	95 c0       	rjmp	.+298    	; 0xe4a <print+0x182>
		if ('%' == format[index]) {
     d20:	85 32       	cpi	r24, 0x25	; 37
     d22:	09 f0       	breq	.+2      	; 0xd26 <print+0x5e>
     d24:	8e c0       	rjmp	.+284    	; 0xe42 <print+0x17a>
			switch (format[index + 1]) {
     d26:	81 81       	ldd	r24, Z+1	; 0x01
     d28:	86 36       	cpi	r24, 0x66	; 102
     d2a:	09 f4       	brne	.+2      	; 0xd2e <print+0x66>
     d2c:	49 c0       	rjmp	.+146    	; 0xdc0 <print+0xf8>
     d2e:	1c f4       	brge	.+6      	; 0xd36 <print+0x6e>
     d30:	84 36       	cpi	r24, 0x64	; 100
     d32:	31 f0       	breq	.+12     	; 0xd40 <print+0x78>
     d34:	83 c0       	rjmp	.+262    	; 0xe3c <print+0x174>
     d36:	89 36       	cpi	r24, 0x69	; 105
     d38:	19 f0       	breq	.+6      	; 0xd40 <print+0x78>
     d3a:	88 37       	cpi	r24, 0x78	; 120
     d3c:	51 f0       	breq	.+20     	; 0xd52 <print+0x8a>
				case 'd':
				case 'i':
					_print_sint(va_arg(args, int));
     d3e:	7e c0       	rjmp	.+252    	; 0xe3c <print+0x174>
     d40:	67 01       	movw	r12, r14
     d42:	f2 e0       	ldi	r31, 0x02	; 2
     d44:	cf 0e       	add	r12, r31
     d46:	d1 1c       	adc	r13, r1
     d48:	f7 01       	movw	r30, r14
     d4a:	80 81       	ld	r24, Z
     d4c:	91 81       	ldd	r25, Z+1	; 0x01
     d4e:	36 de       	rcall	.-916    	; 0x9bc <_print_sint>
					break;
				case 'x':
					_print_hex(va_arg(args, int));
     d50:	35 c0       	rjmp	.+106    	; 0xdbc <print+0xf4>
     d52:	67 01       	movw	r12, r14
     d54:	f2 e0       	ldi	r31, 0x02	; 2
     d56:	cf 0e       	add	r12, r31
     d58:	d1 1c       	adc	r13, r1
     d5a:	f7 01       	movw	r30, r14
     d5c:	20 81       	ld	r18, Z
static void _print_hex(int num)
{
	int len;
	char buff[10];
	
	if (0 == num) {
     d5e:	31 81       	ldd	r19, Z+1	; 0x01
     d60:	21 15       	cp	r18, r1
     d62:	31 05       	cpc	r19, r1
		UART_write('0');
     d64:	19 f4       	brne	.+6      	; 0xd6c <print+0xa4>
     d66:	80 e3       	ldi	r24, 0x30	; 48
     d68:	8c d7       	rcall	.+3864   	; 0x1c82 <UART_write>
     d6a:	28 c0       	rjmp	.+80     	; 0xdbc <print+0xf4>
static void _print_hex(int num)
{
	int len;
	char buff[10];
	
	if (0 == num) {
     d6c:	f5 01       	movw	r30, r10
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	42 2f       	mov	r20, r18
     d74:	4f 70       	andi	r20, 0x0F	; 15
		UART_write('0');
	} else {
		// convert int to reverse char representation
		len = 0;
		while (num) {
			if ((num & 0xf) < 10) {
     d76:	b9 01       	movw	r22, r18
     d78:	6f 70       	andi	r22, 0x0F	; 15
     d7a:	77 27       	eor	r23, r23
     d7c:	6a 30       	cpi	r22, 0x0A	; 10
     d7e:	71 05       	cpc	r23, r1
     d80:	14 f4       	brge	.+4      	; 0xd86 <print+0xbe>
				buff[len++] = '0' + (num & 0xf);
     d82:	40 5d       	subi	r20, 0xD0	; 208
     d84:	01 c0       	rjmp	.+2      	; 0xd88 <print+0xc0>
			} else {
				buff[len++] = 'A' + (num & 0xf) - 10;
     d86:	49 5c       	subi	r20, 0xC9	; 201
     d88:	40 83       	st	Z, r20
			}
			num = (unsigned int)num >> 4;
     d8a:	44 e0       	ldi	r20, 0x04	; 4
     d8c:	36 95       	lsr	r19
     d8e:	27 95       	ror	r18
     d90:	4a 95       	dec	r20
     d92:	e1 f7       	brne	.-8      	; 0xd8c <print+0xc4>
     d94:	ac 01       	movw	r20, r24
     d96:	4f 5f       	subi	r20, 0xFF	; 255
     d98:	5f 4f       	sbci	r21, 0xFF	; 255
	if (0 == num) {
		UART_write('0');
	} else {
		// convert int to reverse char representation
		len = 0;
		while (num) {
     d9a:	31 96       	adiw	r30, 0x01	; 1
     d9c:	21 15       	cp	r18, r1
     d9e:	31 05       	cpc	r19, r1
     da0:	11 f0       	breq	.+4      	; 0xda6 <print+0xde>
     da2:	ca 01       	movw	r24, r20
     da4:	e6 cf       	rjmp	.-52     	; 0xd72 <print+0xaa>
     da6:	75 01       	movw	r14, r10
     da8:	e8 0e       	add	r14, r24
			}
			num = (unsigned int)num >> 4;
		}
		
		// print number
		for (len = len -1; len >= 0; len--) {
     daa:	f9 1e       	adc	r15, r25
     dac:	ae 14       	cp	r10, r14
     dae:	bf 04       	cpc	r11, r15
			UART_write(buff[len]);
     db0:	29 f0       	breq	.+10     	; 0xdbc <print+0xf4>
     db2:	f7 01       	movw	r30, r14
     db4:	82 91       	ld	r24, -Z
     db6:	7f 01       	movw	r14, r30
     db8:	64 d7       	rcall	.+3784   	; 0x1c82 <UART_write>
     dba:	f8 cf       	rjmp	.-16     	; 0xdac <print+0xe4>
				case 'd':
				case 'i':
					_print_sint(va_arg(args, int));
					break;
				case 'x':
					_print_hex(va_arg(args, int));
     dbc:	76 01       	movw	r14, r12
     dbe:	3e c0       	rjmp	.+124    	; 0xe3c <print+0x174>
					break;
				case 'f':
					_print_float((float)va_arg(args, double));
     dc0:	17 01       	movw	r2, r14
     dc2:	f4 e0       	ldi	r31, 0x04	; 4
     dc4:	2f 0e       	add	r2, r31
     dc6:	31 1c       	adc	r3, r1
     dc8:	f7 01       	movw	r30, r14
     dca:	c0 80       	ld	r12, Z
     dcc:	d1 80       	ldd	r13, Z+1	; 0x01
     dce:	e2 80       	ldd	r14, Z+2	; 0x02
     dd0:	f3 80       	ldd	r15, Z+3	; 0x03

static void _print_float(float num)
{
	int num_sign;
	
	num_sign = (num < 0) ? -1 : 1;
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	a9 01       	movw	r20, r18
     dd8:	c7 01       	movw	r24, r14
     dda:	b6 01       	movw	r22, r12
     ddc:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__cmpsf2>
     de0:	87 ff       	sbrs	r24, 7
     de2:	04 c0       	rjmp	.+8      	; 0xdec <print+0x124>
     de4:	88 24       	eor	r8, r8
     de6:	8a 94       	dec	r8
     de8:	98 2c       	mov	r9, r8
     dea:	03 c0       	rjmp	.+6      	; 0xdf2 <print+0x12a>
     dec:	88 24       	eor	r8, r8
     dee:	83 94       	inc	r8
	num = fabs(num);
     df0:	91 2c       	mov	r9, r1
	
	// print integer part
	_print_sint((int)floor(num) * num_sign);
     df2:	e8 94       	clt
     df4:	f7 f8       	bld	r15, 7
     df6:	c7 01       	movw	r24, r14
     df8:	b6 01       	movw	r22, r12
     dfa:	0e 94 48 10 	call	0x2090	; 0x2090 <floor>
     dfe:	2b 01       	movw	r4, r22
     e00:	3c 01       	movw	r6, r24
     e02:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__fixsfsi>
     e06:	86 9e       	mul	r8, r22
     e08:	90 01       	movw	r18, r0
     e0a:	87 9e       	mul	r8, r23
     e0c:	30 0d       	add	r19, r0
     e0e:	96 9e       	mul	r9, r22
     e10:	30 0d       	add	r19, r0
	UART_write('.');
     e12:	11 24       	eor	r1, r1
     e14:	c9 01       	movw	r24, r18
	// print decimal part
	_print_sint((int)(100 * (num - floor(num))));
     e16:	d2 dd       	rcall	.-1116   	; 0x9bc <_print_sint>
     e18:	8e e2       	ldi	r24, 0x2E	; 46
     e1a:	33 d7       	rcall	.+3686   	; 0x1c82 <UART_write>
     e1c:	a3 01       	movw	r20, r6
     e1e:	92 01       	movw	r18, r4
     e20:	c7 01       	movw	r24, r14
     e22:	b6 01       	movw	r22, r12
     e24:	f6 d7       	rcall	.+4076   	; 0x1e12 <__subsf3>
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	48 ec       	ldi	r20, 0xC8	; 200
     e2c:	52 e4       	ldi	r21, 0x42	; 66
     e2e:	0e 94 14 11 	call	0x2228	; 0x2228 <__mulsf3>
     e32:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__fixsfsi>
     e36:	cb 01       	movw	r24, r22
					break;
				case 'x':
					_print_hex(va_arg(args, int));
					break;
				case 'f':
					_print_float((float)va_arg(args, double));
     e38:	c1 dd       	rcall	.-1150   	; 0x9bc <_print_sint>
					break;
			}
			index ++;
     e3a:	71 01       	movw	r14, r2
     e3c:	0f 5f       	subi	r16, 0xFF	; 255
     e3e:	1f 4f       	sbci	r17, 0xFF	; 255
		} else {
			// write to UART
			UART_write(format[index]);
     e40:	01 c0       	rjmp	.+2      	; 0xe44 <print+0x17c>
     e42:	1f d7       	rcall	.+3646   	; 0x1c82 <UART_write>
		}
		index ++;
     e44:	0f 5f       	subi	r16, 0xFF	; 255
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
     e48:	63 cf       	rjmp	.-314    	; 0xd10 <print+0x48>
	}
	
	va_end(args); 
}
     e4a:	2a 96       	adiw	r28, 0x0a	; 10
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	ff 90       	pop	r15
     e60:	ef 90       	pop	r14
     e62:	df 90       	pop	r13
     e64:	cf 90       	pop	r12
     e66:	bf 90       	pop	r11
     e68:	af 90       	pop	r10
     e6a:	9f 90       	pop	r9
     e6c:	8f 90       	pop	r8
     e6e:	7f 90       	pop	r7
     e70:	6f 90       	pop	r6
     e72:	5f 90       	pop	r5
     e74:	4f 90       	pop	r4
     e76:	3f 90       	pop	r3




void _CONS_test_print(void)
{
     e78:	2f 90       	pop	r2
     e7a:	08 95       	ret

00000e7c <_CONS_test_print>:
	print("Test 1: Ana are mere!\r\n");
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	8d ef       	ldi	r24, 0xFD	; 253
     e84:	92 e0       	ldi	r25, 0x02	; 2
     e86:	9f 93       	push	r25
	print("Test 2: Ana are %d mere!\r\n", 123);
     e88:	8f 93       	push	r24
     e8a:	1e df       	rcall	.-452    	; 0xcc8 <print>
     e8c:	1f 92       	push	r1
     e8e:	db e7       	ldi	r29, 0x7B	; 123
     e90:	df 93       	push	r29
     e92:	85 e1       	ldi	r24, 0x15	; 21
     e94:	93 e0       	ldi	r25, 0x03	; 3
     e96:	9f 93       	push	r25
	print("Test 3: Ana are %d mere SI %d pere!\r\n", 123, -1);
     e98:	8f 93       	push	r24
     e9a:	16 df       	rcall	.-468    	; 0xcc8 <print>
     e9c:	cf ef       	ldi	r28, 0xFF	; 255
     e9e:	cf 93       	push	r28
     ea0:	cf 93       	push	r28
     ea2:	1f 92       	push	r1
     ea4:	df 93       	push	r29
     ea6:	80 e3       	ldi	r24, 0x30	; 48
     ea8:	93 e0       	ldi	r25, 0x03	; 3
     eaa:	9f 93       	push	r25
	print("Test 4: Ana are %x mere\r\n", 0xfff3);
     eac:	8f 93       	push	r24
     eae:	0c df       	rcall	.-488    	; 0xcc8 <print>
     eb0:	cf 93       	push	r28
     eb2:	83 ef       	ldi	r24, 0xF3	; 243
     eb4:	8f 93       	push	r24
     eb6:	86 e5       	ldi	r24, 0x56	; 86
     eb8:	93 e0       	ldi	r25, 0x03	; 3
     eba:	9f 93       	push	r25
	print("Test 5: Ana are %f mere\r\n", 1234.456);
     ebc:	8f 93       	push	r24
     ebe:	04 df       	rcall	.-504    	; 0xcc8 <print>
     ec0:	84 e4       	ldi	r24, 0x44	; 68
     ec2:	8f 93       	push	r24
     ec4:	1a e9       	ldi	r17, 0x9A	; 154
     ec6:	1f 93       	push	r17
     ec8:	de e4       	ldi	r29, 0x4E	; 78
     eca:	df 93       	push	r29
     ecc:	c8 e9       	ldi	r28, 0x98	; 152
     ece:	cf 93       	push	r28
     ed0:	80 e7       	ldi	r24, 0x70	; 112
     ed2:	93 e0       	ldi	r25, 0x03	; 3
     ed4:	9f 93       	push	r25
     ed6:	8f 93       	push	r24
	print("Test 6: Ana are %f mere\r\n", -1234.456);
     ed8:	f7 de       	rcall	.-530    	; 0xcc8 <print>
     eda:	84 ec       	ldi	r24, 0xC4	; 196
     edc:	8f 93       	push	r24
     ede:	1f 93       	push	r17
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	8a e8       	ldi	r24, 0x8A	; 138
     ee6:	93 e0       	ldi	r25, 0x03	; 3
     ee8:	9f 93       	push	r25
     eea:	8f 93       	push	r24
     eec:	ed de       	rcall	.-550    	; 0xcc8 <print>
     eee:	8d b7       	in	r24, 0x3d	; 61
     ef0:	9e b7       	in	r25, 0x3e	; 62
     ef2:	4c 96       	adiw	r24, 0x1c	; 28
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	9e bf       	out	0x3e, r25	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	8d bf       	out	0x3d, r24	; 61
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	1f 91       	pop	r17
     f04:	08 95       	ret

00000f06 <CTRL_init>:
	MOTOR_A_speed((int16_t)cmd);
	MOTOR_B_speed((int16_t)cmd);
}

void CTRL_init(void)
{
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	aa 97       	sbiw	r28, 0x2a	; 42
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
	struct calibration_t calib;
	
	_pid.running = false;
     f1a:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <_pid>
	_pid.system_time = 0;
     f1e:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <_pid+0x1a>
     f22:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <_pid+0x1b>
     f26:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <_pid+0x1c>
     f2a:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <_pid+0x1d>
	_pid.cal_time = 0;
     f2e:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <_pid+0x1e>
     f32:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <_pid+0x1f>
     f36:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <_pid+0x20>
     f3a:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <_pid+0x21>
	_pid.angle_off = 0;
     f3e:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <_pid+0x16>
     f42:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <_pid+0x17>
     f46:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <_pid+0x18>
     f4a:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_pid+0x19>
	_pid.output_command = true;
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <_pid+0x1>
	
	// Fast PWM Mode, TOP @OCR0A
	// Disabled output
	TCCR2A = 3u << WGM00;
     f54:	83 e0       	ldi	r24, 0x03	; 3
     f56:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	
	// TC TOP value
	OCR2A = CONF_CTRL_TIMER_CNT;
     f5a:	8c e9       	ldi	r24, 0x9C	; 156
     f5c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	// reset timer counter
	TCNT2 = 0;
     f60:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
/* Set timer source or no source */
static inline void _timer_enable(bool enable)
{
	// Fast PWM Mode, TOP @OCR0A
	// Prescaled 1/1024
	TCCR2B = (uint8_t)enable * ((1u << WGM02) | (CONF_CTRL_CLK << CS20));
     f64:	8f e0       	ldi	r24, 0x0F	; 15
     f66:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	// Prescaled 1/1024
	//TCCR2B = (1u << WGM02) | (CONF_CTRL_CLK << CS20);
	_timer_enable(true);
	
	// enable OCRA compare interrupt
	TIMSK2 |= (1 << OCIE2A);
     f6a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     f6e:	82 60       	ori	r24, 0x02	; 2
     f70:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	
	// restore calibration from EEPROM
	EEPROM_read_array(0, (uint8_t *)&calib, sizeof(calib));
     f74:	4a e2       	ldi	r20, 0x2A	; 42
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	be 01       	movw	r22, r28
     f7a:	6f 5f       	subi	r22, 0xFF	; 255
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	98 d3       	rcall	.+1840   	; 0x16b4 <EEPROM_read_array>
	if (CALIB_VALIDATION == calib.validation) {
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	9a 81       	ldd	r25, Y+2	; 0x02
     f88:	ab 81       	ldd	r26, Y+3	; 0x03
     f8a:	bc 81       	ldd	r27, Y+4	; 0x04
     f8c:	85 3a       	cpi	r24, 0xA5	; 165
     f8e:	95 4a       	sbci	r25, 0xA5	; 165
     f90:	a5 4a       	sbci	r26, 0xA5	; 165
     f92:	b5 4a       	sbci	r27, 0xA5	; 165
     f94:	81 f5       	brne	.+96     	; 0xff6 <CTRL_init+0xf0>
		_pid.bp = calib.bp;
     f96:	8d 81       	ldd	r24, Y+5	; 0x05
     f98:	9e 81       	ldd	r25, Y+6	; 0x06
     f9a:	af 81       	ldd	r26, Y+7	; 0x07
     f9c:	b8 85       	ldd	r27, Y+8	; 0x08
     f9e:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <_pid+0xa>
     fa2:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <_pid+0xb>
     fa6:	a0 93 f3 03 	sts	0x03F3, r26	; 0x8003f3 <_pid+0xc>
     faa:	b0 93 f4 03 	sts	0x03F4, r27	; 0x8003f4 <_pid+0xd>
		_pid.bi = calib.bi;
     fae:	89 85       	ldd	r24, Y+9	; 0x09
     fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb2:	ab 85       	ldd	r26, Y+11	; 0x0b
     fb4:	bc 85       	ldd	r27, Y+12	; 0x0c
     fb6:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <_pid+0xe>
     fba:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <_pid+0xf>
     fbe:	a0 93 f7 03 	sts	0x03F7, r26	; 0x8003f7 <_pid+0x10>
     fc2:	b0 93 f8 03 	sts	0x03F8, r27	; 0x8003f8 <_pid+0x11>
		_pid.bd = calib.bd;
     fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fca:	af 85       	ldd	r26, Y+15	; 0x0f
     fcc:	b8 89       	ldd	r27, Y+16	; 0x10
     fce:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <_pid+0x12>
     fd2:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <_pid+0x13>
     fd6:	a0 93 fb 03 	sts	0x03FB, r26	; 0x8003fb <_pid+0x14>
     fda:	b0 93 fc 03 	sts	0x03FC, r27	; 0x8003fc <_pid+0x15>
		_pid.angle_off = calib.angle_off;
     fde:	89 89       	ldd	r24, Y+17	; 0x11
     fe0:	9a 89       	ldd	r25, Y+18	; 0x12
     fe2:	ab 89       	ldd	r26, Y+19	; 0x13
     fe4:	bc 89       	ldd	r27, Y+20	; 0x14
     fe6:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <_pid+0x16>
     fea:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <_pid+0x17>
     fee:	a0 93 ff 03 	sts	0x03FF, r26	; 0x8003ff <_pid+0x18>
     ff2:	b0 93 00 04 	sts	0x0400, r27	; 0x800400 <_pid+0x19>
		
	}
}
     ff6:	aa 96       	adiw	r28, 0x2a	; 42
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	08 95       	ret

00001008 <CTRL_set_PID_terms>:

void CTRL_set_PID_terms(float bp, float bi, float bd)
{
    1008:	ef 92       	push	r14
    100a:	ff 92       	push	r15
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1010:	af b7       	in	r26, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1012:	f8 94       	cli
	{
		_pid.bp = bp;
    1014:	e7 ee       	ldi	r30, 0xE7	; 231
    1016:	f3 e0       	ldi	r31, 0x03	; 3
    1018:	62 87       	std	Z+10, r22	; 0x0a
    101a:	73 87       	std	Z+11, r23	; 0x0b
    101c:	84 87       	std	Z+12, r24	; 0x0c
    101e:	95 87       	std	Z+13, r25	; 0x0d
		_pid.bi = bi;
    1020:	26 87       	std	Z+14, r18	; 0x0e
    1022:	37 87       	std	Z+15, r19	; 0x0f
    1024:	40 8b       	std	Z+16, r20	; 0x10
    1026:	51 8b       	std	Z+17, r21	; 0x11
		_pid.bd = bd;
    1028:	e2 8a       	std	Z+18, r14	; 0x12
    102a:	f3 8a       	std	Z+19, r15	; 0x13
    102c:	04 8b       	std	Z+20, r16	; 0x14
    102e:	15 8b       	std	Z+21, r17	; 0x15
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1030:	af bf       	out	0x3f, r26	; 63
	}
}
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	08 95       	ret

0000103c <CTRL_set_PID_bp>:

void CTRL_set_PID_bp(float bp)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    103c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    103e:	f8 94       	cli
	{
		_pid.bp = bp;
    1040:	60 93 f1 03 	sts	0x03F1, r22	; 0x8003f1 <_pid+0xa>
    1044:	70 93 f2 03 	sts	0x03F2, r23	; 0x8003f2 <_pid+0xb>
    1048:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <_pid+0xc>
    104c:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <_pid+0xd>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1050:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1052:	08 95       	ret

00001054 <CTRL_set_PID_bi>:
	}
}

void CTRL_set_PID_bi(float bi)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1054:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1056:	f8 94       	cli
	{
		_pid.bi = bi;	
    1058:	60 93 f5 03 	sts	0x03F5, r22	; 0x8003f5 <_pid+0xe>
    105c:	70 93 f6 03 	sts	0x03F6, r23	; 0x8003f6 <_pid+0xf>
    1060:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <_pid+0x10>
    1064:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <_pid+0x11>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1068:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    106a:	08 95       	ret

0000106c <CTRL_set_PID_bd>:
}

void CTRL_set_PID_bd(float bd)
{
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    106c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    106e:	f8 94       	cli
	{
		_pid.bd = bd;
    1070:	60 93 f9 03 	sts	0x03F9, r22	; 0x8003f9 <_pid+0x12>
    1074:	70 93 fa 03 	sts	0x03FA, r23	; 0x8003fa <_pid+0x13>
    1078:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <_pid+0x14>
    107c:	90 93 fc 03 	sts	0x03FC, r25	; 0x8003fc <_pid+0x15>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1080:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1082:	08 95       	ret

00001084 <CTRL_set_angle_off>:
	}
}

void CTRL_set_angle_off(float off)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1084:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1086:	f8 94       	cli
	{
		_pid.angle_off = off;
    1088:	60 93 fd 03 	sts	0x03FD, r22	; 0x8003fd <_pid+0x16>
    108c:	70 93 fe 03 	sts	0x03FE, r23	; 0x8003fe <_pid+0x17>
    1090:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <_pid+0x18>
    1094:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <_pid+0x19>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1098:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    109a:	08 95       	ret

0000109c <CTRL_PID_start>:
	}
}

void CTRL_PID_start(void)
{
    109c:	cf 93       	push	r28
	
	_pid.output_command = true;	
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <_pid+0x1>
	// do not start twice
	if (_pid.running) {
    10a4:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <_pid>
    10a8:	91 11       	cpse	r25, r1
    10aa:	12 c0       	rjmp	.+36     	; 0x10d0 <CTRL_PID_start+0x34>
		return;
	}
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    10ac:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10ae:	f8 94       	cli
	{
		_pid.running = true;
    10b0:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <_pid>
		
		// request vector data from BNO055 sensor
		BNO_start_reading();
    10b4:	0e 94 52 00 	call	0xa4	; 0xa4 <BNO_start_reading>
		
		// Start motors
		MOTOR_A_speed(0);
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	60 d5       	rcall	.+2752   	; 0x1b7e <MOTOR_A_speed>
		MOTOR_B_speed(0);
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	67 d5       	rcall	.+2766   	; 0x1b92 <MOTOR_B_speed>
void MOTOR_B_speed(int16_t speed);

/* Start both motors */
static inline void MOTORS_on(void)
{
	TCCR0B = CONF_MOTOR_CLK;
    10c4:	83 e0       	ldi	r24, 0x03	; 3
    10c6:	85 bd       	out	0x25, r24	; 37
	DDRD |= (1 << PORTD6) | (1 << PORTD5);
    10c8:	8a b1       	in	r24, 0x0a	; 10
    10ca:	80 66       	ori	r24, 0x60	; 96
    10cc:	8a b9       	out	0x0a, r24	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10ce:	cf bf       	out	0x3f, r28	; 63
		MOTORS_on();
	}
}
    10d0:	cf 91       	pop	r28
    10d2:	08 95       	ret

000010d4 <CTRL_stop>:


void CTRL_stop(void)
{
	uint8_t flags = SREG;
    10d4:	9f b7       	in	r25, 0x3f	; 63
	cli();
    10d6:	f8 94       	cli


/* Stop both motors */ 
static inline void MOTORS_off(void)
{
	TCCR0B = TC0_CLK_OFF;
    10d8:	15 bc       	out	0x25, r1	; 37
	DDRD &= ~(1 << PORTD6) & ~(1 << PORTD5);
    10da:	8a b1       	in	r24, 0x0a	; 10
    10dc:	8f 79       	andi	r24, 0x9F	; 159
    10de:	8a b9       	out	0x0a, r24	; 10
	
	// turn off the motors
	MOTORS_off();
	_pid.running = false;
    10e0:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <_pid>
	
	SREG = flags;
    10e4:	9f bf       	out	0x3f, r25	; 63
    10e6:	08 95       	ret

000010e8 <CTRL_get_time>:
}

uint32_t CTRL_get_time(void)
{
	return _pid.system_time;
    10e8:	60 91 01 04 	lds	r22, 0x0401	; 0x800401 <_pid+0x1a>
    10ec:	70 91 02 04 	lds	r23, 0x0402	; 0x800402 <_pid+0x1b>
    10f0:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <_pid+0x1c>
    10f4:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <_pid+0x1d>
}
    10f8:	08 95       	ret

000010fa <CTRL_get_time_elapsed>:


uint32_t CTRL_get_time_elapsed(uint32_t past)
{
    10fa:	cf 92       	push	r12
    10fc:	df 92       	push	r13
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
	uint32_t present;
	
	present = _pid.system_time;
    1106:	00 91 01 04 	lds	r16, 0x0401	; 0x800401 <_pid+0x1a>
    110a:	10 91 02 04 	lds	r17, 0x0402	; 0x800402 <_pid+0x1b>
    110e:	20 91 03 04 	lds	r18, 0x0403	; 0x800403 <_pid+0x1c>
    1112:	30 91 04 04 	lds	r19, 0x0404	; 0x800404 <_pid+0x1d>
	
	return (past < present) 
		 ? (present - past) 
		 : (past - present);
    1116:	60 17       	cp	r22, r16
    1118:	71 07       	cpc	r23, r17
    111a:	82 07       	cpc	r24, r18
    111c:	93 07       	cpc	r25, r19
    111e:	48 f4       	brcc	.+18     	; 0x1132 <CTRL_get_time_elapsed+0x38>
    1120:	68 01       	movw	r12, r16
    1122:	79 01       	movw	r14, r18
    1124:	c6 1a       	sub	r12, r22
    1126:	d7 0a       	sbc	r13, r23
    1128:	e8 0a       	sbc	r14, r24
    112a:	f9 0a       	sbc	r15, r25
    112c:	c7 01       	movw	r24, r14
    112e:	b6 01       	movw	r22, r12
    1130:	04 c0       	rjmp	.+8      	; 0x113a <CTRL_get_time_elapsed+0x40>
    1132:	60 1b       	sub	r22, r16
    1134:	71 0b       	sbc	r23, r17
    1136:	82 0b       	sbc	r24, r18
    1138:	93 0b       	sbc	r25, r19
}
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
    113e:	ff 90       	pop	r15
    1140:	ef 90       	pop	r14
    1142:	df 90       	pop	r13
    1144:	cf 90       	pop	r12
    1146:	08 95       	ret

00001148 <CTRL_get_last_angle>:


int32_t CTRL_get_last_angle(void)
{
	return _pid.angle_old;
    1148:	60 91 e9 03 	lds	r22, 0x03E9	; 0x8003e9 <_pid+0x2>
    114c:	70 91 ea 03 	lds	r23, 0x03EA	; 0x8003ea <_pid+0x3>
    1150:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <_pid+0x4>
    1154:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <_pid+0x5>
}
    1158:	2d c7       	rjmp	.+3674   	; 0x1fb4 <__fixsfsi>

0000115a <CTRL_get_calib>:

struct calibration_t CTRL_get_calib(void)
{
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	aa 97       	sbiw	r28, 0x2a	; 42
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	f8 94       	cli
    116c:	de bf       	out	0x3e, r29	; 62
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	cd bf       	out	0x3d, r28	; 61
    1172:	8c 01       	movw	r16, r24
	struct calibration_t calib;
	
	// set calibration as valid
	calib.validation = CALIB_VALIDATION;
    1174:	85 ea       	ldi	r24, 0xA5	; 165
    1176:	95 ea       	ldi	r25, 0xA5	; 165
    1178:	dc 01       	movw	r26, r24
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	9a 83       	std	Y+2, r25	; 0x02
    117e:	ab 83       	std	Y+3, r26	; 0x03
    1180:	bc 83       	std	Y+4, r27	; 0x04
	// PID coeficients
	calib.bp = _pid.bp;
    1182:	e7 ee       	ldi	r30, 0xE7	; 231
    1184:	f3 e0       	ldi	r31, 0x03	; 3
    1186:	82 85       	ldd	r24, Z+10	; 0x0a
    1188:	93 85       	ldd	r25, Z+11	; 0x0b
    118a:	a4 85       	ldd	r26, Z+12	; 0x0c
    118c:	b5 85       	ldd	r27, Z+13	; 0x0d
    118e:	8d 83       	std	Y+5, r24	; 0x05
    1190:	9e 83       	std	Y+6, r25	; 0x06
    1192:	af 83       	std	Y+7, r26	; 0x07
    1194:	b8 87       	std	Y+8, r27	; 0x08
	calib.bi = _pid.bi;
    1196:	86 85       	ldd	r24, Z+14	; 0x0e
    1198:	97 85       	ldd	r25, Z+15	; 0x0f
    119a:	a0 89       	ldd	r26, Z+16	; 0x10
    119c:	b1 89       	ldd	r27, Z+17	; 0x11
    119e:	89 87       	std	Y+9, r24	; 0x09
    11a0:	9a 87       	std	Y+10, r25	; 0x0a
    11a2:	ab 87       	std	Y+11, r26	; 0x0b
    11a4:	bc 87       	std	Y+12, r27	; 0x0c
	calib.bd = _pid.bd;
    11a6:	82 89       	ldd	r24, Z+18	; 0x12
    11a8:	93 89       	ldd	r25, Z+19	; 0x13
    11aa:	a4 89       	ldd	r26, Z+20	; 0x14
    11ac:	b5 89       	ldd	r27, Z+21	; 0x15
    11ae:	8d 87       	std	Y+13, r24	; 0x0d
    11b0:	9e 87       	std	Y+14, r25	; 0x0e
    11b2:	af 87       	std	Y+15, r26	; 0x0f
    11b4:	b8 8b       	std	Y+16, r27	; 0x10
	// IMU sensor offset
	calib.angle_off = _pid.angle_off;
    11b6:	86 89       	ldd	r24, Z+22	; 0x16
    11b8:	97 89       	ldd	r25, Z+23	; 0x17
    11ba:	a0 8d       	ldd	r26, Z+24	; 0x18
    11bc:	b1 8d       	ldd	r27, Z+25	; 0x19
    11be:	89 8b       	std	Y+17, r24	; 0x11
    11c0:	9a 8b       	std	Y+18, r25	; 0x12
    11c2:	ab 8b       	std	Y+19, r26	; 0x13
    11c4:	bc 8b       	std	Y+20, r27	; 0x14
	// IMU sensor calibration
	BNO_read_reg(
    11c6:	46 e1       	ldi	r20, 0x16	; 22
    11c8:	be 01       	movw	r22, r28
    11ca:	6b 5e       	subi	r22, 0xEB	; 235
    11cc:	7f 4f       	sbci	r23, 0xFF	; 255
    11ce:	85 e5       	ldi	r24, 0x55	; 85
    11d0:	16 d8       	rcall	.-4052   	; 0x1fe <BNO_read_reg>
		ACCEL_OFFSET_X_LSB_ADDR, 
		(uint8_t *)&(calib.bno), 
		MAG_RADIUS_MSB_ADDR - ACCEL_OFFSET_X_LSB_ADDR + 1
	);
	
	return calib;
    11d2:	8a e2       	ldi	r24, 0x2A	; 42
    11d4:	fe 01       	movw	r30, r28
    11d6:	31 96       	adiw	r30, 0x01	; 1
    11d8:	d8 01       	movw	r26, r16
    11da:	01 90       	ld	r0, Z+
    11dc:	0d 92       	st	X+, r0
    11de:	8a 95       	dec	r24
    11e0:	e1 f7       	brne	.-8      	; 0x11da <CTRL_get_calib+0x80>
}
    11e2:	c8 01       	movw	r24, r16
    11e4:	aa 96       	adiw	r28, 0x2a	; 42
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	1f 91       	pop	r17
    11f6:	0f 91       	pop	r16
    11f8:	08 95       	ret

000011fa <CTRL_load_calib>:

void CTRL_load_calib(void)
{
    11fa:	ef 92       	push	r14
    11fc:	ff 92       	push	r15
    11fe:	1f 93       	push	r17
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	aa 97       	sbiw	r28, 0x2a	; 42
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
	struct calibration_t calib;
	
	// load from EEPROM
	EEPROM_read_array(0, (uint8_t *)&calib, sizeof(calib));
    1214:	4a e2       	ldi	r20, 0x2A	; 42
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	be 01       	movw	r22, r28
    121a:	6f 5f       	subi	r22, 0xFF	; 255
    121c:	7f 4f       	sbci	r23, 0xFF	; 255
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	48 d2       	rcall	.+1168   	; 0x16b4 <EEPROM_read_array>
	
	// check if data corrupter
	if (CALIB_VALIDATION == calib.validation) {
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	9a 81       	ldd	r25, Y+2	; 0x02
    1228:	ab 81       	ldd	r26, Y+3	; 0x03
    122a:	bc 81       	ldd	r27, Y+4	; 0x04
    122c:	85 3a       	cpi	r24, 0xA5	; 165
    122e:	95 4a       	sbci	r25, 0xA5	; 165
    1230:	a5 4a       	sbci	r26, 0xA5	; 165
    1232:	b5 4a       	sbci	r27, 0xA5	; 165
    1234:	09 f0       	breq	.+2      	; 0x1238 <CTRL_load_calib+0x3e>
    1236:	58 c0       	rjmp	.+176    	; 0x12e8 <CTRL_load_calib+0xee>
		// pid parameters
		_pid.bp = calib.bp;
    1238:	8d 81       	ldd	r24, Y+5	; 0x05
    123a:	9e 81       	ldd	r25, Y+6	; 0x06
    123c:	af 81       	ldd	r26, Y+7	; 0x07
    123e:	b8 85       	ldd	r27, Y+8	; 0x08
    1240:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <_pid+0xa>
    1244:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <_pid+0xb>
    1248:	a0 93 f3 03 	sts	0x03F3, r26	; 0x8003f3 <_pid+0xc>
    124c:	b0 93 f4 03 	sts	0x03F4, r27	; 0x8003f4 <_pid+0xd>
		_pid.bi = calib.bi;
    1250:	89 85       	ldd	r24, Y+9	; 0x09
    1252:	9a 85       	ldd	r25, Y+10	; 0x0a
    1254:	ab 85       	ldd	r26, Y+11	; 0x0b
    1256:	bc 85       	ldd	r27, Y+12	; 0x0c
    1258:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <_pid+0xe>
    125c:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <_pid+0xf>
    1260:	a0 93 f7 03 	sts	0x03F7, r26	; 0x8003f7 <_pid+0x10>
    1264:	b0 93 f8 03 	sts	0x03F8, r27	; 0x8003f8 <_pid+0x11>
		_pid.bd = calib.bd;
    1268:	8d 85       	ldd	r24, Y+13	; 0x0d
    126a:	9e 85       	ldd	r25, Y+14	; 0x0e
    126c:	af 85       	ldd	r26, Y+15	; 0x0f
    126e:	b8 89       	ldd	r27, Y+16	; 0x10
    1270:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <_pid+0x12>
    1274:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <_pid+0x13>
    1278:	a0 93 fb 03 	sts	0x03FB, r26	; 0x8003fb <_pid+0x14>
    127c:	b0 93 fc 03 	sts	0x03FC, r27	; 0x8003fc <_pid+0x15>
		_pid.angle_off = calib.angle_off;
    1280:	89 89       	ldd	r24, Y+17	; 0x11
    1282:	9a 89       	ldd	r25, Y+18	; 0x12
    1284:	ab 89       	ldd	r26, Y+19	; 0x13
    1286:	bc 89       	ldd	r27, Y+20	; 0x14
    1288:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <_pid+0x16>
    128c:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <_pid+0x17>
    1290:	a0 93 ff 03 	sts	0x03FF, r26	; 0x8003ff <_pid+0x18>
    1294:	b0 93 00 04 	sts	0x0400, r27	; 0x800400 <_pid+0x19>
		
		// BNO055 enter config mode
		BNO_write_reg(BNO055_OPR_MODE_ADDR, OPERATION_MODE_CONFIG);
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	8d e3       	ldi	r24, 0x3D	; 61
    129c:	63 d8       	rcall	.-3898   	; 0x364 <BNO_write_reg>
    129e:	8f ef       	ldi	r24, 0xFF	; 255
    12a0:	96 e7       	ldi	r25, 0x76	; 118
    12a2:	e1 e0       	ldi	r30, 0x01	; 1
    12a4:	81 50       	subi	r24, 0x01	; 1
    12a6:	90 40       	sbci	r25, 0x00	; 0
    12a8:	e0 40       	sbci	r30, 0x00	; 0
    12aa:	e1 f7       	brne	.-8      	; 0x12a4 <CTRL_load_calib+0xaa>
    12ac:	00 c0       	rjmp	.+0      	; 0x12ae <CTRL_load_calib+0xb4>
		_delay_ms(30);
		
		// select register page 0
		BNO_write_reg(BNO055_PAGE_ID_ADDR, 0);
    12ae:	00 00       	nop
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	87 e0       	ldi	r24, 0x07	; 7
    12b4:	57 d8       	rcall	.-3922   	; 0x364 <BNO_write_reg>
    12b6:	7e 01       	movw	r14, r28
    12b8:	f5 e1       	ldi	r31, 0x15	; 21
    12ba:	ef 0e       	add	r14, r31
    12bc:	f1 1c       	adc	r15, r1
		
		// write BNO055 calibration
		for (uint16_t i = ACCEL_OFFSET_X_LSB_ADDR;
		i <= MAG_RADIUS_MSB_ADDR;
		i ++) {
			BNO_write_reg(i, calib.bno[i - ACCEL_OFFSET_X_LSB_ADDR]);	
    12be:	15 e5       	ldi	r17, 0x55	; 85
    12c0:	f7 01       	movw	r30, r14
    12c2:	61 91       	ld	r22, Z+
    12c4:	7f 01       	movw	r14, r30
    12c6:	81 2f       	mov	r24, r17
    12c8:	4d d8       	rcall	.-3942   	; 0x364 <BNO_write_reg>
		
		// select register page 0
		BNO_write_reg(BNO055_PAGE_ID_ADDR, 0);
		
		// write BNO055 calibration
		for (uint16_t i = ACCEL_OFFSET_X_LSB_ADDR;
    12ca:	1f 5f       	subi	r17, 0xFF	; 255
    12cc:	1b 36       	cpi	r17, 0x6B	; 107
		i ++) {
			BNO_write_reg(i, calib.bno[i - ACCEL_OFFSET_X_LSB_ADDR]);	
		}
		
		// restore previous mode
		BNO_write_reg(BNO055_OPR_MODE_ADDR, CONF_BNO055_MODE);
    12ce:	c1 f7       	brne	.-16     	; 0x12c0 <CTRL_load_calib+0xc6>
    12d0:	68 e0       	ldi	r22, 0x08	; 8
    12d2:	8d e3       	ldi	r24, 0x3D	; 61
    12d4:	47 d8       	rcall	.-3954   	; 0x364 <BNO_write_reg>
    12d6:	ff ef       	ldi	r31, 0xFF	; 255
    12d8:	26 e7       	ldi	r18, 0x76	; 118
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	f1 50       	subi	r31, 0x01	; 1
    12de:	20 40       	sbci	r18, 0x00	; 0
    12e0:	80 40       	sbci	r24, 0x00	; 0
    12e2:	e1 f7       	brne	.-8      	; 0x12dc <CTRL_load_calib+0xe2>
    12e4:	00 c0       	rjmp	.+0      	; 0x12e6 <CTRL_load_calib+0xec>
    12e6:	00 00       	nop
		_delay_ms(30);
	}
}
    12e8:	aa 96       	adiw	r28, 0x2a	; 42
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	1f 91       	pop	r17
    12fa:	ff 90       	pop	r15
    12fc:	ef 90       	pop	r14
    12fe:	08 95       	ret

00001300 <__vector_7>:
}


// Control system routine
ISR(TIMER2_COMPA_vect)
{
    1300:	1f 92       	push	r1
    1302:	0f 92       	push	r0
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	0f 92       	push	r0
    1308:	11 24       	eor	r1, r1
    130a:	4f 92       	push	r4
    130c:	5f 92       	push	r5
    130e:	6f 92       	push	r6
    1310:	7f 92       	push	r7
    1312:	8f 92       	push	r8
    1314:	9f 92       	push	r9
    1316:	af 92       	push	r10
    1318:	bf 92       	push	r11
    131a:	cf 92       	push	r12
    131c:	df 92       	push	r13
    131e:	ef 92       	push	r14
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	2f 93       	push	r18
    1328:	3f 93       	push	r19
    132a:	4f 93       	push	r20
    132c:	5f 93       	push	r21
    132e:	6f 93       	push	r22
    1330:	7f 93       	push	r23
    1332:	8f 93       	push	r24
    1334:	9f 93       	push	r25
    1336:	af 93       	push	r26
    1338:	bf 93       	push	r27
    133a:	ef 93       	push	r30
    133c:	ff 93       	push	r31
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	68 97       	sbiw	r28, 0x18	; 24
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	cd bf       	out	0x3d, r28	; 61
	BNO_angle_t angle_BNO;
	float angle;
	float cmd;
	
	// add 10ms
	_pid.system_time += 10;
    134c:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <_pid+0x1a>
    1350:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <_pid+0x1b>
    1354:	a0 91 03 04 	lds	r26, 0x0403	; 0x800403 <_pid+0x1c>
    1358:	b0 91 04 04 	lds	r27, 0x0404	; 0x800404 <_pid+0x1d>
    135c:	0a 96       	adiw	r24, 0x0a	; 10
    135e:	a1 1d       	adc	r26, r1
    1360:	b1 1d       	adc	r27, r1
    1362:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <_pid+0x1a>
    1366:	90 93 02 04 	sts	0x0402, r25	; 0x800402 <_pid+0x1b>
    136a:	a0 93 03 04 	sts	0x0403, r26	; 0x800403 <_pid+0x1c>
    136e:	b0 93 04 04 	sts	0x0404, r27	; 0x800404 <_pid+0x1d>
	IND_iterate();	
    1372:	72 d3       	rcall	.+1764   	; 0x1a58 <IND_iterate>
	if (!_pid.running) {
    1374:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <_pid>
    1378:	88 23       	and	r24, r24
    137a:	09 f4       	brne	.+2      	; 0x137e <__vector_7+0x7e>
    137c:	3e c1       	rjmp	.+636    	; 0x15fa <__vector_7+0x2fa>
		return;
	}
	
	// current angle
	angle_BNO = BNO_angle();
    137e:	ce 01       	movw	r24, r28
    1380:	01 96       	adiw	r24, 0x01	; 1
    1382:	0e 94 8c 00 	call	0x118	; 0x118 <BNO_angle>
    1386:	89 84       	ldd	r8, Y+9	; 0x09
    1388:	9a 84       	ldd	r9, Y+10	; 0x0a
    138a:	ab 84       	ldd	r10, Y+11	; 0x0b
    138c:	bc 84       	ldd	r11, Y+12	; 0x0c
    138e:	1d 85       	ldd	r17, Y+13	; 0x0d
    1390:	0e 85       	ldd	r16, Y+14	; 0x0e
	angle = angle_BNO.z + _pid.angle_off;
    1392:	60 91 fd 03 	lds	r22, 0x03FD	; 0x8003fd <_pid+0x16>
    1396:	70 91 fe 03 	lds	r23, 0x03FE	; 0x8003fe <_pid+0x17>
    139a:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <_pid+0x18>
    139e:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <_pid+0x19>
    13a2:	a5 01       	movw	r20, r10
    13a4:	94 01       	movw	r18, r8
    13a6:	36 d5       	rcall	.+2668   	; 0x1e14 <__addsf3>
    13a8:	6b 01       	movw	r12, r22
    13aa:	7c 01       	movw	r14, r24
	// start new readings
	BNO_start_reading();
    13ac:	0e 94 52 00 	call	0xa4	; 0xa4 <BNO_start_reading>
	
	////// DEV //////////
	_dev_bno_x = angle_BNO.x;
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	9a 81       	ldd	r25, Y+2	; 0x02
    13b4:	ab 81       	ldd	r26, Y+3	; 0x03
    13b6:	bc 81       	ldd	r27, Y+4	; 0x04
    13b8:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <_dev_bno_x>
    13bc:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <_dev_bno_x+0x1>
    13c0:	a0 93 5a 05 	sts	0x055A, r26	; 0x80055a <_dev_bno_x+0x2>
    13c4:	b0 93 5b 05 	sts	0x055B, r27	; 0x80055b <_dev_bno_x+0x3>
	_dev_bno_y = angle_BNO.y;
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	af 81       	ldd	r26, Y+7	; 0x07
    13ce:	b8 85       	ldd	r27, Y+8	; 0x08
    13d0:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <_dev_bno_y>
    13d4:	90 93 5e 05 	sts	0x055E, r25	; 0x80055e <_dev_bno_y+0x1>
    13d8:	a0 93 5f 05 	sts	0x055F, r26	; 0x80055f <_dev_bno_y+0x2>
    13dc:	b0 93 60 05 	sts	0x0560, r27	; 0x800560 <_dev_bno_y+0x3>
	_dev_bno_z = angle_BNO.z;
    13e0:	80 92 62 05 	sts	0x0562, r8	; 0x800562 <_dev_bno_z>
    13e4:	90 92 63 05 	sts	0x0563, r9	; 0x800563 <_dev_bno_z+0x1>
    13e8:	a0 92 64 05 	sts	0x0564, r10	; 0x800564 <_dev_bno_z+0x2>
    13ec:	b0 92 65 05 	sts	0x0565, r11	; 0x800565 <_dev_bno_z+0x3>
	_dev_bno_cal_gyro = angle_BNO.cal_gyro;
    13f0:	10 93 61 05 	sts	0x0561, r17	; 0x800561 <_dev_bno_cal_gyro>
	_dev_bno_cal_acc = angle_BNO.cal_acc;
    13f4:	00 93 5c 05 	sts	0x055C, r16	; 0x80055c <_dev_bno_cal_acc>
	///////////////////
	
	// refresh calibration if calibration lvl decreases
	if ((3 != angle_BNO.cal_acc) || (3 != angle_BNO.cal_gyro)) {
    13f8:	03 30       	cpi	r16, 0x03	; 3
    13fa:	11 f4       	brne	.+4      	; 0x1400 <__vector_7+0x100>
    13fc:	13 30       	cpi	r17, 0x03	; 3
/* Set timer source or no source */
static inline void _timer_enable(bool enable)
{
	// Fast PWM Mode, TOP @OCR0A
	// Prescaled 1/1024
	TCCR2B = (uint8_t)enable * ((1u << WGM02) | (CONF_CTRL_CLK << CS20));
    13fe:	41 f0       	breq	.+16     	; 0x1410 <__vector_7+0x110>
    1400:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
		// (prevent this interrupt)
		_timer_enable(false);
		// enable global interrupts for I2C to work
		sei();
		//BNO_write_cal();
		CTRL_load_calib();
    1404:	78 94       	sei
    1406:	f9 de       	rcall	.-526    	; 0x11fa <CTRL_load_calib>
		cli();
    1408:	f8 94       	cli
/* Set timer source or no source */
static inline void _timer_enable(bool enable)
{
	// Fast PWM Mode, TOP @OCR0A
	// Prescaled 1/1024
	TCCR2B = (uint8_t)enable * ((1u << WGM02) | (CONF_CTRL_CLK << CS20));
    140a:	8f e0       	ldi	r24, 0x0F	; 15
    140c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	}
	
	
#if defined (SAFETY_ANGLE)
	// !!! safety stop !!!
	if (fabs(angle) > CONF_CTRL_MAX_ANGLE) {
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	4c e0       	ldi	r20, 0x0C	; 12
    1416:	52 e4       	ldi	r21, 0x42	; 66
    1418:	c7 01       	movw	r24, r14
    141a:	b6 01       	movw	r22, r12
    141c:	9f 77       	andi	r25, 0x7F	; 127
    141e:	00 d7       	rcall	.+3584   	; 0x2220 <__gesf2>
    1420:	18 16       	cp	r1, r24
		// stop routine and indicate error
		//CTRL_stop();
		//IND_set_mode(IND_ERROR);
		_pid.output_command = false;
    1422:	14 f4       	brge	.+4      	; 0x1428 <__vector_7+0x128>
	}
#endif

	if (!_pid.output_command) {
    1424:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <_pid+0x1>
    1428:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <_pid+0x1>
		MOTOR_A_speed(0);
    142c:	81 11       	cpse	r24, r1
    142e:	0b c0       	rjmp	.+22     	; 0x1446 <__vector_7+0x146>
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
		MOTOR_B_speed(0);
    1434:	a4 d3       	rcall	.+1864   	; 0x1b7e <MOTOR_A_speed>
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	ab d3       	rcall	.+1878   	; 0x1b92 <MOTOR_B_speed>


/* Stop both motors */ 
static inline void MOTORS_off(void)
{
	TCCR0B = TC0_CLK_OFF;
    143c:	15 bc       	out	0x25, r1	; 37
	DDRD &= ~(1 << PORTD6) & ~(1 << PORTD5);
    143e:	8a b1       	in	r24, 0x0a	; 10
    1440:	8f 79       	andi	r24, 0x9F	; 159
    1442:	8a b9       	out	0x0a, r24	; 10
    1444:	da c0       	rjmp	.+436    	; 0x15fa <__vector_7+0x2fa>
		MOTORS_off();
		return;
	}

	// pass through PID
	cmd = (_pid.bp * angle)
    1446:	40 90 f1 03 	lds	r4, 0x03F1	; 0x8003f1 <_pid+0xa>
    144a:	50 90 f2 03 	lds	r5, 0x03F2	; 0x8003f2 <_pid+0xb>
    144e:	60 90 f3 03 	lds	r6, 0x03F3	; 0x8003f3 <_pid+0xc>
    1452:	70 90 f4 03 	lds	r7, 0x03F4	; 0x8003f4 <_pid+0xd>
		+  (_pid.bd * (_pid.angle_old - angle))
    1456:	80 90 f9 03 	lds	r8, 0x03F9	; 0x8003f9 <_pid+0x12>
    145a:	90 90 fa 03 	lds	r9, 0x03FA	; 0x8003fa <_pid+0x13>
    145e:	a0 90 fb 03 	lds	r10, 0x03FB	; 0x8003fb <_pid+0x14>
    1462:	b0 90 fc 03 	lds	r11, 0x03FC	; 0x8003fc <_pid+0x15>
    1466:	60 91 e9 03 	lds	r22, 0x03E9	; 0x8003e9 <_pid+0x2>
    146a:	70 91 ea 03 	lds	r23, 0x03EA	; 0x8003ea <_pid+0x3>
    146e:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <_pid+0x4>
    1472:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <_pid+0x5>
		+  (_pid.bi * _pid.angle_sum);
    1476:	20 91 f5 03 	lds	r18, 0x03F5	; 0x8003f5 <_pid+0xe>
    147a:	30 91 f6 03 	lds	r19, 0x03F6	; 0x8003f6 <_pid+0xf>
    147e:	40 91 f7 03 	lds	r20, 0x03F7	; 0x8003f7 <_pid+0x10>
    1482:	50 91 f8 03 	lds	r21, 0x03F8	; 0x8003f8 <_pid+0x11>
    1486:	29 8b       	std	Y+17, r18	; 0x11
    1488:	3a 8b       	std	Y+18, r19	; 0x12
    148a:	4b 8b       	std	Y+19, r20	; 0x13
    148c:	5c 8b       	std	Y+20, r21	; 0x14
    148e:	20 91 ed 03 	lds	r18, 0x03ED	; 0x8003ed <_pid+0x6>
    1492:	30 91 ee 03 	lds	r19, 0x03EE	; 0x8003ee <_pid+0x7>
    1496:	40 91 ef 03 	lds	r20, 0x03EF	; 0x8003ef <_pid+0x8>
    149a:	50 91 f0 03 	lds	r21, 0x03F0	; 0x8003f0 <_pid+0x9>
    149e:	2d 8b       	std	Y+21, r18	; 0x15
    14a0:	3e 8b       	std	Y+22, r19	; 0x16
		MOTORS_off();
		return;
	}

	// pass through PID
	cmd = (_pid.bp * angle)
    14a2:	4f 8b       	std	Y+23, r20	; 0x17
    14a4:	58 8f       	std	Y+24, r21	; 0x18
    14a6:	a7 01       	movw	r20, r14
    14a8:	96 01       	movw	r18, r12
    14aa:	b3 d4       	rcall	.+2406   	; 0x1e12 <__subsf3>
    14ac:	a5 01       	movw	r20, r10
    14ae:	94 01       	movw	r18, r8
    14b0:	bb d6       	rcall	.+3446   	; 0x2228 <__mulsf3>
    14b2:	4b 01       	movw	r8, r22
    14b4:	5c 01       	movw	r10, r24
    14b6:	a3 01       	movw	r20, r6
    14b8:	92 01       	movw	r18, r4
    14ba:	c7 01       	movw	r24, r14
    14bc:	b6 01       	movw	r22, r12
    14be:	b4 d6       	rcall	.+3432   	; 0x2228 <__mulsf3>
    14c0:	9b 01       	movw	r18, r22
    14c2:	ac 01       	movw	r20, r24
    14c4:	c5 01       	movw	r24, r10
    14c6:	b4 01       	movw	r22, r8
    14c8:	a5 d4       	rcall	.+2378   	; 0x1e14 <__addsf3>
    14ca:	4b 01       	movw	r8, r22
    14cc:	5c 01       	movw	r10, r24
    14ce:	2d 89       	ldd	r18, Y+21	; 0x15
    14d0:	3e 89       	ldd	r19, Y+22	; 0x16
    14d2:	4f 89       	ldd	r20, Y+23	; 0x17
    14d4:	58 8d       	ldd	r21, Y+24	; 0x18
    14d6:	69 89       	ldd	r22, Y+17	; 0x11
    14d8:	7a 89       	ldd	r23, Y+18	; 0x12
    14da:	8b 89       	ldd	r24, Y+19	; 0x13
    14dc:	9c 89       	ldd	r25, Y+20	; 0x14
    14de:	a4 d6       	rcall	.+3400   	; 0x2228 <__mulsf3>
    14e0:	9b 01       	movw	r18, r22
    14e2:	ac 01       	movw	r20, r24
    14e4:	c5 01       	movw	r24, r10
    14e6:	b4 01       	movw	r22, r8
    14e8:	95 d4       	rcall	.+2346   	; 0x1e14 <__addsf3>
    14ea:	4b 01       	movw	r8, r22
    14ec:	5c 01       	movw	r10, r24
    14ee:	c0 92 e9 03 	sts	0x03E9, r12	; 0x8003e9 <_pid+0x2>
		+  (_pid.bd * (_pid.angle_old - angle))
		+  (_pid.bi * _pid.angle_sum);
	// update PID
	_pid.angle_old = angle;
    14f2:	d0 92 ea 03 	sts	0x03EA, r13	; 0x8003ea <_pid+0x3>
    14f6:	e0 92 eb 03 	sts	0x03EB, r14	; 0x8003eb <_pid+0x4>
    14fa:	f0 92 ec 03 	sts	0x03EC, r15	; 0x8003ec <_pid+0x5>
    14fe:	20 91 ed 03 	lds	r18, 0x03ED	; 0x8003ed <_pid+0x6>
	// integral sum
	_pid.angle_sum += angle;
    1502:	30 91 ee 03 	lds	r19, 0x03EE	; 0x8003ee <_pid+0x7>
    1506:	40 91 ef 03 	lds	r20, 0x03EF	; 0x8003ef <_pid+0x8>
    150a:	50 91 f0 03 	lds	r21, 0x03F0	; 0x8003f0 <_pid+0x9>
    150e:	c7 01       	movw	r24, r14
    1510:	b6 01       	movw	r22, r12
    1512:	80 d4       	rcall	.+2304   	; 0x1e14 <__addsf3>
    1514:	60 93 ed 03 	sts	0x03ED, r22	; 0x8003ed <_pid+0x6>
    1518:	70 93 ee 03 	sts	0x03EE, r23	; 0x8003ee <_pid+0x7>
    151c:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <_pid+0x8>
    1520:	90 93 f0 03 	sts	0x03F0, r25	; 0x8003f0 <_pid+0x9>
    1524:	60 91 ed 03 	lds	r22, 0x03ED	; 0x8003ed <_pid+0x6>
	// cap integral sum
	if (_pid.angle_sum > CONF_CTRL_PID_MAX_SUM) {
    1528:	70 91 ee 03 	lds	r23, 0x03EE	; 0x8003ee <_pid+0x7>
    152c:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <_pid+0x8>
    1530:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <_pid+0x9>
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	48 ec       	ldi	r20, 0xC8	; 200
    153a:	52 e4       	ldi	r21, 0x42	; 66
    153c:	71 d6       	rcall	.+3298   	; 0x2220 <__gesf2>
    153e:	18 16       	cp	r1, r24
    1540:	2c f4       	brge	.+10     	; 0x154c <__vector_7+0x24c>
    1542:	80 e0       	ldi	r24, 0x00	; 0
		_pid.angle_sum = CONF_CTRL_PID_MAX_SUM;
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	a8 ec       	ldi	r26, 0xC8	; 200
    1548:	b2 e4       	ldi	r27, 0x42	; 66
    154a:	13 c0       	rjmp	.+38     	; 0x1572 <__vector_7+0x272>
    154c:	60 91 ed 03 	lds	r22, 0x03ED	; 0x8003ed <_pid+0x6>
	} else if (_pid.angle_sum < -CONF_CTRL_PID_MAX_SUM) {
    1550:	70 91 ee 03 	lds	r23, 0x03EE	; 0x8003ee <_pid+0x7>
    1554:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <_pid+0x8>
    1558:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <_pid+0x9>
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	48 ec       	ldi	r20, 0xC8	; 200
    1562:	52 ec       	ldi	r21, 0xC2	; 194
    1564:	bb d4       	rcall	.+2422   	; 0x1edc <__cmpsf2>
    1566:	87 ff       	sbrs	r24, 7
    1568:	0c c0       	rjmp	.+24     	; 0x1582 <__vector_7+0x282>
    156a:	80 e0       	ldi	r24, 0x00	; 0
		_pid.angle_sum = -CONF_CTRL_PID_MAX_SUM;
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	a8 ec       	ldi	r26, 0xC8	; 200
    1570:	b2 ec       	ldi	r27, 0xC2	; 194
    1572:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <_pid+0x6>
    1576:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <_pid+0x7>
    157a:	a0 93 ef 03 	sts	0x03EF, r26	; 0x8003ef <_pid+0x8>
    157e:	b0 93 f0 03 	sts	0x03F0, r27	; 0x8003f0 <_pid+0x9>
    1582:	20 e0       	ldi	r18, 0x00	; 0
	}
	
	
	// zero angle
	if (fabs(cmd) < CONF_CTRL_PID_MIN_CMD) {
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	44 eb       	ldi	r20, 0xB4	; 180
    1588:	52 e4       	ldi	r21, 0x42	; 66
    158a:	c5 01       	movw	r24, r10
    158c:	b4 01       	movw	r22, r8
    158e:	9f 77       	andi	r25, 0x7F	; 127
    1590:	a5 d4       	rcall	.+2378   	; 0x1edc <__cmpsf2>
    1592:	87 ff       	sbrs	r24, 7
    1594:	07 c0       	rjmp	.+14     	; 0x15a4 <__vector_7+0x2a4>
    1596:	84 b1       	in	r24, 0x04	; 4
		cmd = 0;
		// turn off PWM
		DDRB &= ~((1 << PORTB0) | (1 << PORTB1));
    1598:	8c 7f       	andi	r24, 0xFC	; 252
    159a:	84 b9       	out	0x04, r24	; 4
	}
	
	
	// zero angle
	if (fabs(cmd) < CONF_CTRL_PID_MIN_CMD) {
		cmd = 0;
    159c:	81 2c       	mov	r8, r1
    159e:	91 2c       	mov	r9, r1
    15a0:	54 01       	movw	r10, r8
    15a2:	22 c0       	rjmp	.+68     	; 0x15e8 <__vector_7+0x2e8>
		// turn off PWM
		DDRB &= ~((1 << PORTB0) | (1 << PORTB1));
	} else {
		// enable PWM
		DDRB |= (1 << PORTB0) | (1 << PORTB1);
    15a4:	84 b1       	in	r24, 0x04	; 4
    15a6:	83 60       	ori	r24, 0x03	; 3
    15a8:	84 b9       	out	0x04, r24	; 4
		// cap between -255 and 255
		if (cmd > 255.0f) {
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	4f e7       	ldi	r20, 0x7F	; 127
    15b0:	53 e4       	ldi	r21, 0x43	; 67
    15b2:	c5 01       	movw	r24, r10
    15b4:	b4 01       	movw	r22, r8
    15b6:	34 d6       	rcall	.+3176   	; 0x2220 <__gesf2>
    15b8:	18 16       	cp	r1, r24
    15ba:	84 f0       	brlt	.+32     	; 0x15dc <__vector_7+0x2dc>
    15bc:	20 e0       	ldi	r18, 0x00	; 0
			cmd = 255.0f;
		} else if (cmd < -255.0f) {
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	4f e7       	ldi	r20, 0x7F	; 127
    15c2:	53 ec       	ldi	r21, 0xC3	; 195
    15c4:	c5 01       	movw	r24, r10
    15c6:	b4 01       	movw	r22, r8
    15c8:	89 d4       	rcall	.+2322   	; 0x1edc <__cmpsf2>
    15ca:	87 ff       	sbrs	r24, 7
			cmd = -255.0f;
    15cc:	0d c0       	rjmp	.+26     	; 0x15e8 <__vector_7+0x2e8>
    15ce:	81 2c       	mov	r8, r1
    15d0:	91 2c       	mov	r9, r1
    15d2:	9f e7       	ldi	r25, 0x7F	; 127
    15d4:	a9 2e       	mov	r10, r25
    15d6:	93 ec       	ldi	r25, 0xC3	; 195
    15d8:	b9 2e       	mov	r11, r25
	} else {
		// enable PWM
		DDRB |= (1 << PORTB0) | (1 << PORTB1);
		// cap between -255 and 255
		if (cmd > 255.0f) {
			cmd = 255.0f;
    15da:	06 c0       	rjmp	.+12     	; 0x15e8 <__vector_7+0x2e8>
    15dc:	81 2c       	mov	r8, r1
    15de:	91 2c       	mov	r9, r1
    15e0:	8f e7       	ldi	r24, 0x7F	; 127
    15e2:	a8 2e       	mov	r10, r24
    15e4:	83 e4       	ldi	r24, 0x43	; 67
			cmd = -255.0f;
		}
	}
		
	// send motor commands
	MOTOR_A_speed((int16_t)cmd);
    15e6:	b8 2e       	mov	r11, r24
    15e8:	c5 01       	movw	r24, r10
    15ea:	b4 01       	movw	r22, r8
    15ec:	e3 d4       	rcall	.+2502   	; 0x1fb4 <__fixsfsi>
    15ee:	6b 01       	movw	r12, r22
    15f0:	7c 01       	movw	r14, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	c4 d2       	rcall	.+1416   	; 0x1b7e <MOTOR_A_speed>
    15f6:	c6 01       	movw	r24, r12
	MOTOR_B_speed((int16_t)cmd);
    15f8:	cc d2       	rcall	.+1432   	; 0x1b92 <MOTOR_B_speed>
    15fa:	68 96       	adiw	r28, 0x18	; 24
    15fc:	0f b6       	in	r0, 0x3f	; 63
}
    15fe:	f8 94       	cli
    1600:	de bf       	out	0x3e, r29	; 62
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	cd bf       	out	0x3d, r28	; 61
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	ff 91       	pop	r31
    160c:	ef 91       	pop	r30
    160e:	bf 91       	pop	r27
    1610:	af 91       	pop	r26
    1612:	9f 91       	pop	r25
    1614:	8f 91       	pop	r24
    1616:	7f 91       	pop	r23
    1618:	6f 91       	pop	r22
    161a:	5f 91       	pop	r21
    161c:	4f 91       	pop	r20
    161e:	3f 91       	pop	r19
    1620:	2f 91       	pop	r18
    1622:	1f 91       	pop	r17
    1624:	0f 91       	pop	r16
    1626:	ff 90       	pop	r15
    1628:	ef 90       	pop	r14
    162a:	df 90       	pop	r13
    162c:	cf 90       	pop	r12
    162e:	bf 90       	pop	r11
    1630:	af 90       	pop	r10
    1632:	9f 90       	pop	r9
    1634:	8f 90       	pop	r8
    1636:	7f 90       	pop	r7
    1638:	6f 90       	pop	r6
    163a:	5f 90       	pop	r5
    163c:	4f 90       	pop	r4
    163e:	0f 90       	pop	r0
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	0f 90       	pop	r0
    1644:	1f 90       	pop	r1
    1646:	18 95       	reti

00001648 <EEPROM_read>:
#include <util/atomic.h>



uint8_t EEPROM_read(uint16_t addr)
{
    1648:	9c 01       	movw	r18, r24
	uint8_t data;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    164a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    164c:	f8 94       	cli
	{
		// wait for EEPROM Write completion
		while (EECR & (1u << EEPE))
    164e:	f9 99       	sbic	0x1f, 1	; 31
    1650:	fe cf       	rjmp	.-4      	; 0x164e <EEPROM_read+0x6>
			;
		// set address
		EEAR = addr;
    1652:	32 bd       	out	0x22, r19	; 34
    1654:	21 bd       	out	0x21, r18	; 33
		// do read
		EECR = (1u << EERE);
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	8f bb       	out	0x1f, r24	; 31
		data = EEDR;
    165a:	80 b5       	in	r24, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    165c:	9f bf       	out	0x3f, r25	; 63
	}
	
	return data;
}
    165e:	08 95       	ret

00001660 <EEPROM_write>:

void EEPROM_write(uint16_t addr, uint8_t data)
{
    1660:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1662:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1664:	f8 94       	cli
	{
		// wait for EEPROM Write completion
		while (EECR & (1u << EEPE))
    1666:	f9 99       	sbic	0x1f, 1	; 31
    1668:	fe cf       	rjmp	.-4      	; 0x1666 <EEPROM_write+0x6>
			;
		// set address, data
		EEAR = addr;
    166a:	32 bd       	out	0x22, r19	; 34
    166c:	21 bd       	out	0x21, r18	; 33
		EEDR = data;
    166e:	60 bd       	out	0x20, r22	; 32
		// enable write
		EECR = (1u << EEMPE);
    1670:	84 e0       	ldi	r24, 0x04	; 4
    1672:	8f bb       	out	0x1f, r24	; 31
		EECR = (1u << EEPE);
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	8f bb       	out	0x1f, r24	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1678:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    167a:	08 95       	ret

0000167c <EEPROM_write_array>:
	}
}

void EEPROM_write_array(uint16_t addr, uint8_t *data_ptr, uint16_t size)
{
    167c:	ef 92       	push	r14
    167e:	ff 92       	push	r15
    1680:	0f 93       	push	r16
    1682:	1f 93       	push	r17
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	eb 01       	movw	r28, r22
    168a:	8b 01       	movw	r16, r22
    168c:	04 0f       	add	r16, r20
    168e:	15 1f       	adc	r17, r21
	for (uint16_t i = 0; i < size; i++) {
    1690:	7c 01       	movw	r14, r24
    1692:	c0 17       	cp	r28, r16
    1694:	d1 07       	cpc	r29, r17
    1696:	39 f0       	breq	.+14     	; 0x16a6 <EEPROM_write_array+0x2a>
		EEPROM_write(addr + i, data_ptr[i]);
    1698:	69 91       	ld	r22, Y+
    169a:	c7 01       	movw	r24, r14
    169c:	e1 df       	rcall	.-62     	; 0x1660 <EEPROM_write>
    169e:	8f ef       	ldi	r24, 0xFF	; 255
    16a0:	e8 1a       	sub	r14, r24
    16a2:	f8 0a       	sbc	r15, r24
    16a4:	f6 cf       	rjmp	.-20     	; 0x1692 <EEPROM_write_array+0x16>
	}
}
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	ff 90       	pop	r15
    16b0:	ef 90       	pop	r14
    16b2:	08 95       	ret

000016b4 <EEPROM_read_array>:

void EEPROM_read_array(uint16_t addr, uint8_t *data_ptr, uint16_t size)
{
    16b4:	ef 92       	push	r14
    16b6:	ff 92       	push	r15
    16b8:	0f 93       	push	r16
    16ba:	1f 93       	push	r17
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	8b 01       	movw	r16, r22
    16c2:	04 0f       	add	r16, r20
    16c4:	15 1f       	adc	r17, r21
	for (uint16_t i = 0; i < size; i++) {
    16c6:	eb 01       	movw	r28, r22
		data_ptr[i] = EEPROM_read(addr + i);
    16c8:	7c 01       	movw	r14, r24
    16ca:	e6 1a       	sub	r14, r22
    16cc:	f7 0a       	sbc	r15, r23
	}
}

void EEPROM_read_array(uint16_t addr, uint8_t *data_ptr, uint16_t size)
{
	for (uint16_t i = 0; i < size; i++) {
    16ce:	c0 17       	cp	r28, r16
    16d0:	d1 07       	cpc	r29, r17
    16d2:	31 f0       	breq	.+12     	; 0x16e0 <EEPROM_read_array+0x2c>
		data_ptr[i] = EEPROM_read(addr + i);
    16d4:	c7 01       	movw	r24, r14
    16d6:	8c 0f       	add	r24, r28
    16d8:	9d 1f       	adc	r25, r29
    16da:	b6 df       	rcall	.-148    	; 0x1648 <EEPROM_read>
    16dc:	89 93       	st	Y+, r24
    16de:	f7 cf       	rjmp	.-18     	; 0x16ce <EEPROM_read_array+0x1a>
	}
}
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	1f 91       	pop	r17
    16e6:	0f 91       	pop	r16
    16e8:	ff 90       	pop	r15
    16ea:	ef 90       	pop	r14
    16ec:	08 95       	ret

000016ee <_task_ended>:
 * and start next one if available */
static void _task_ended(void)
{
	//UART_write_str("STO\n\r");
	// send stop condition
	TWCR = _EN_TRANSFER | (1 << TWSTO);
    16ee:	85 e9       	ldi	r24, 0x95	; 149
    16f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	// remove task from queue
	_local.task_head = (_local.task_head + 1) & (CONF_I2C_TASK_BUFF_SIZE - 1);
    16f4:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <_local+0x39>
    16f8:	8f 5f       	subi	r24, 0xFF	; 255
    16fa:	87 70       	andi	r24, 0x07	; 7
    16fc:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <_local+0x39>
	_local.tasks_num --;
    1700:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <_local+0x3b>
    1704:	81 50       	subi	r24, 0x01	; 1
    1706:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <_local+0x3b>
	// if other tasks available, start next one
	if (_local.tasks_num) {
    170a:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <_local+0x3b>
    170e:	88 23       	and	r24, r24
    1710:	19 f0       	breq	.+6      	; 0x1718 <_task_ended+0x2a>
		//UART_write_str("STA\n\r");
		//_delay_ms(500);
		TWCR = _EN_TRANSFER | (1 << TWSTA);
    1712:	85 ea       	ldi	r24, 0xA5	; 165
    1714:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1718:	08 95       	ret

0000171a <__vector_24>:
	}
}

// handle I2C events
ISR(TWI_vect)
{
    171a:	1f 92       	push	r1
    171c:	0f 92       	push	r0
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	0f 92       	push	r0
    1722:	11 24       	eor	r1, r1
    1724:	2f 93       	push	r18
    1726:	3f 93       	push	r19
    1728:	4f 93       	push	r20
    172a:	5f 93       	push	r21
    172c:	6f 93       	push	r22
    172e:	7f 93       	push	r23
    1730:	8f 93       	push	r24
    1732:	9f 93       	push	r25
    1734:	af 93       	push	r26
    1736:	bf 93       	push	r27
    1738:	ef 93       	push	r30
    173a:	ff 93       	push	r31
	volatile _task_t *crt_task_ptr;
	// if there is at least one task active
	if (_local.tasks_num > 0) {
    173c:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <_local+0x3b>
    1740:	18 16       	cp	r1, r24
    1742:	0c f0       	brlt	.+2      	; 0x1746 <__vector_24+0x2c>
    1744:	af c0       	rjmp	.+350    	; 0x18a4 <__vector_24+0x18a>
		// pointer to crt task
		crt_task_ptr = &(_local.tasks[_local.task_head]);
    1746:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <_local+0x39>
		// Read task
		if (crt_task_ptr->read) {
    174a:	2e 2f       	mov	r18, r30
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	87 e0       	ldi	r24, 0x07	; 7
    1750:	e8 9f       	mul	r30, r24
    1752:	f0 01       	movw	r30, r0
    1754:	11 24       	eor	r1, r1
    1756:	e7 5f       	subi	r30, 0xF7	; 247
    1758:	fb 4f       	sbci	r31, 0xFB	; 251
    175a:	86 81       	ldd	r24, Z+6	; 0x06
    175c:	88 23       	and	r24, r24
    175e:	09 f4       	brne	.+2      	; 0x1762 <__vector_24+0x48>
    1760:	53 c0       	rjmp	.+166    	; 0x1808 <__vector_24+0xee>
			// react on transmission status
			switch (TWSR & 0xF8u) {
    1762:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1766:	88 7f       	andi	r24, 0xF8	; 248
    1768:	80 34       	cpi	r24, 0x40	; 64
    176a:	91 f1       	breq	.+100    	; 0x17d0 <__vector_24+0xb6>
    176c:	28 f4       	brcc	.+10     	; 0x1778 <__vector_24+0x5e>
    176e:	88 30       	cpi	r24, 0x08	; 8
    1770:	59 f0       	breq	.+22     	; 0x1788 <__vector_24+0x6e>
    1772:	80 31       	cpi	r24, 0x10	; 16
    1774:	49 f0       	breq	.+18     	; 0x1788 <__vector_24+0x6e>
    1776:	99 c0       	rjmp	.+306    	; 0x18aa <__vector_24+0x190>
    1778:	80 35       	cpi	r24, 0x50	; 80
    177a:	a1 f0       	breq	.+40     	; 0x17a4 <__vector_24+0x8a>
    177c:	88 35       	cpi	r24, 0x58	; 88
    177e:	91 f0       	breq	.+36     	; 0x17a4 <__vector_24+0x8a>
    1780:	88 34       	cpi	r24, 0x48	; 72
    1782:	09 f4       	brne	.+2      	; 0x1786 <__vector_24+0x6c>
    1784:	61 c0       	rjmp	.+194    	; 0x1848 <__vector_24+0x12e>
    1786:	91 c0       	rjmp	.+290    	; 0x18aa <__vector_24+0x190>
				
				// START/REPEATED START transmitted
				case 0x08:
				case 0x10:
					// add slave address and R bit
					_local.task_data_index = 0;
    1788:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_local+0x38>
					TWDR = ((crt_task_ptr->addr) << 1) | 1u;
    178c:	87 e0       	ldi	r24, 0x07	; 7
    178e:	82 9f       	mul	r24, r18
    1790:	f0 01       	movw	r30, r0
    1792:	83 9f       	mul	r24, r19
    1794:	f0 0d       	add	r31, r0
    1796:	11 24       	eor	r1, r1
    1798:	e7 5f       	subi	r30, 0xF7	; 247
    179a:	fb 4f       	sbci	r31, 0xFB	; 251
    179c:	82 81       	ldd	r24, Z+2	; 0x02
    179e:	88 0f       	add	r24, r24
    17a0:	81 60       	ori	r24, 0x01	; 1
    17a2:	70 c0       	rjmp	.+224    	; 0x1884 <__vector_24+0x16a>
				// Data byte received by master
				// ACK sent
				case 0x50:
				// NACK sent
				case 0x58:
					crt_task_ptr->data[_local.task_data_index++] = TWDR;
    17a4:	87 e0       	ldi	r24, 0x07	; 7
    17a6:	82 9f       	mul	r24, r18
    17a8:	f0 01       	movw	r30, r0
    17aa:	83 9f       	mul	r24, r19
    17ac:	f0 0d       	add	r31, r0
    17ae:	11 24       	eor	r1, r1
    17b0:	e7 5f       	subi	r30, 0xF7	; 247
    17b2:	fb 4f       	sbci	r31, 0xFB	; 251
    17b4:	01 90       	ld	r0, Z+
    17b6:	f0 81       	ld	r31, Z
    17b8:	e0 2d       	mov	r30, r0
    17ba:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <_local+0x38>
    17be:	91 e0       	ldi	r25, 0x01	; 1
    17c0:	98 0f       	add	r25, r24
    17c2:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <_local+0x38>
    17c6:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    17ca:	e8 0f       	add	r30, r24
    17cc:	f1 1d       	adc	r31, r1
    17ce:	90 83       	st	Z, r25
					//UART_write_str("RXD\r\n");
					// ! Fall through !
				// SLA+R+ACK transmitted
				case 0x40:
					// more data expected
					if (_local.task_data_index < crt_task_ptr->len) {
    17d0:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <_local+0x38>
    17d4:	87 e0       	ldi	r24, 0x07	; 7
    17d6:	82 9f       	mul	r24, r18
    17d8:	f0 01       	movw	r30, r0
    17da:	83 9f       	mul	r24, r19
    17dc:	f0 0d       	add	r31, r0
    17de:	11 24       	eor	r1, r1
    17e0:	e7 5f       	subi	r30, 0xF7	; 247
    17e2:	fb 4f       	sbci	r31, 0xFB	; 251
    17e4:	83 81       	ldd	r24, Z+3	; 0x03
    17e6:	98 17       	cp	r25, r24
    17e8:	08 f0       	brcs	.+2      	; 0x17ec <__vector_24+0xd2>
    17ea:	50 c0       	rjmp	.+160    	; 0x188c <__vector_24+0x172>
						// request more data
						//UART_write_str("RQD\r\n");
						// 'many' (>1) more bytes
						if (_local.task_data_index + 1 < crt_task_ptr->len) {
    17ec:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <_local+0x38>
    17f0:	23 81       	ldd	r18, Z+3	; 0x03
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	82 17       	cp	r24, r18
    17fa:	93 07       	cpc	r25, r19
    17fc:	0c f0       	brlt	.+2      	; 0x1800 <__vector_24+0xe6>
    17fe:	44 c0       	rjmp	.+136    	; 0x1888 <__vector_24+0x16e>
							TWCR = _EN_TRANSFER | (1 << TWEA);	
    1800:	85 ec       	ldi	r24, 0xC5	; 197
    1802:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1806:	51 c0       	rjmp	.+162    	; 0x18aa <__vector_24+0x190>
				*/
					
			}
		// Write task
		} else {
			switch (TWSR & 0xF8u) {
    1808:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    180c:	88 7f       	andi	r24, 0xF8	; 248
    180e:	88 31       	cpi	r24, 0x18	; 24
    1810:	01 f1       	breq	.+64     	; 0x1852 <__vector_24+0x138>
    1812:	28 f4       	brcc	.+10     	; 0x181e <__vector_24+0x104>
    1814:	88 30       	cpi	r24, 0x08	; 8
    1816:	59 f0       	breq	.+22     	; 0x182e <__vector_24+0x114>
    1818:	80 31       	cpi	r24, 0x10	; 16
    181a:	49 f0       	breq	.+18     	; 0x182e <__vector_24+0x114>
    181c:	46 c0       	rjmp	.+140    	; 0x18aa <__vector_24+0x190>
    181e:	88 32       	cpi	r24, 0x28	; 40
    1820:	c1 f0       	breq	.+48     	; 0x1852 <__vector_24+0x138>
    1822:	80 33       	cpi	r24, 0x30	; 48
    1824:	c1 f1       	breq	.+112    	; 0x1896 <__vector_24+0x17c>
    1826:	80 32       	cpi	r24, 0x20	; 32
    1828:	09 f0       	breq	.+2      	; 0x182c <__vector_24+0x112>
    182a:	3f c0       	rjmp	.+126    	; 0x18aa <__vector_24+0x190>
    182c:	0d c0       	rjmp	.+26     	; 0x1848 <__vector_24+0x12e>
				
				// (REPEATED) START sent
				case 0x08:
				case 0x10:
					// add slave address and W bit
					_local.task_data_index = 0;
    182e:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_local+0x38>
					TWDR = (crt_task_ptr->addr << 1);
    1832:	87 e0       	ldi	r24, 0x07	; 7
    1834:	82 9f       	mul	r24, r18
    1836:	f0 01       	movw	r30, r0
    1838:	83 9f       	mul	r24, r19
    183a:	f0 0d       	add	r31, r0
    183c:	11 24       	eor	r1, r1
    183e:	e7 5f       	subi	r30, 0xF7	; 247
    1840:	fb 4f       	sbci	r31, 0xFB	; 251
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	88 0f       	add	r24, r24
    1846:	1e c0       	rjmp	.+60     	; 0x1884 <__vector_24+0x16a>
					//UART_write_str("_STA_W\n\r");
					break;
					
				// slave send NACK on SLA+W
				case 0x20:
					*(crt_task_ptr->status_ptr) = I2C_ADDRESS_NACK;
    1848:	04 80       	ldd	r0, Z+4	; 0x04
    184a:	f5 81       	ldd	r31, Z+5	; 0x05
    184c:	e0 2d       	mov	r30, r0
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	26 c0       	rjmp	.+76     	; 0x189e <__vector_24+0x184>
				// slave sent ACK 
				// on (SLA+W or Data write)
				case 0x18:
				case 0x28:
					// if more data to send
					if (crt_task_ptr->len > _local.task_data_index) {
    1852:	87 e0       	ldi	r24, 0x07	; 7
    1854:	82 9f       	mul	r24, r18
    1856:	f0 01       	movw	r30, r0
    1858:	83 9f       	mul	r24, r19
    185a:	f0 0d       	add	r31, r0
    185c:	11 24       	eor	r1, r1
    185e:	e7 5f       	subi	r30, 0xF7	; 247
    1860:	fb 4f       	sbci	r31, 0xFB	; 251
    1862:	93 81       	ldd	r25, Z+3	; 0x03
    1864:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <_local+0x38>
    1868:	89 17       	cp	r24, r25
    186a:	80 f4       	brcc	.+32     	; 0x188c <__vector_24+0x172>
						TWDR = crt_task_ptr->data[_local.task_data_index++];
    186c:	01 90       	ld	r0, Z+
    186e:	f0 81       	ld	r31, Z
    1870:	e0 2d       	mov	r30, r0
    1872:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <_local+0x38>
    1876:	91 e0       	ldi	r25, 0x01	; 1
    1878:	98 0f       	add	r25, r24
    187a:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <_local+0x38>
    187e:	e8 0f       	add	r30, r24
    1880:	f1 1d       	adc	r31, r1
    1882:	80 81       	ld	r24, Z
    1884:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
						TWCR = _EN_TRANSFER;
    1888:	85 e8       	ldi	r24, 0x85	; 133
    188a:	bb cf       	rjmp	.-138    	; 0x1802 <__vector_24+0xe8>
						//UART_write_str("TXD\n\r");
					} else {
						*(crt_task_ptr->status_ptr) = I2C_SUCCESS;
    188c:	04 80       	ldd	r0, Z+4	; 0x04
    188e:	f5 81       	ldd	r31, Z+5	; 0x05
    1890:	e0 2d       	mov	r30, r0
    1892:	10 82       	st	Z, r1
    1894:	05 c0       	rjmp	.+10     	; 0x18a0 <__vector_24+0x186>
						_task_ended();
					}
					break;
				// slave sent NACK on data send
				case 0x30:
					*(crt_task_ptr->status_ptr) = I2C_WRITE_NACK;
    1896:	04 80       	ldd	r0, Z+4	; 0x04
    1898:	f5 81       	ldd	r31, Z+5	; 0x05
    189a:	e0 2d       	mov	r30, r0
    189c:	82 e0       	ldi	r24, 0x02	; 2
    189e:	80 83       	st	Z, r24
					_task_ended();
    18a0:	26 df       	rcall	.-436    	; 0x16ee <_task_ended>
					//UART_write_str("_ND_W\n\r");
					break;
    18a2:	03 c0       	rjmp	.+6      	; 0x18aa <__vector_24+0x190>
			}
		}
	} else {
		UART_write_str("I2C_ERR:no task!\n");
    18a4:	84 ea       	ldi	r24, 0xA4	; 164
    18a6:	93 e0       	ldi	r25, 0x03	; 3
    18a8:	04 d2       	rcall	.+1032   	; 0x1cb2 <UART_write_str>
	}
}
    18aa:	ff 91       	pop	r31
    18ac:	ef 91       	pop	r30
    18ae:	bf 91       	pop	r27
    18b0:	af 91       	pop	r26
    18b2:	9f 91       	pop	r25
    18b4:	8f 91       	pop	r24
    18b6:	7f 91       	pop	r23
    18b8:	6f 91       	pop	r22
    18ba:	5f 91       	pop	r21
    18bc:	4f 91       	pop	r20
    18be:	3f 91       	pop	r19
    18c0:	2f 91       	pop	r18
    18c2:	0f 90       	pop	r0
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	0f 90       	pop	r0
    18c8:	1f 90       	pop	r1
    18ca:	18 95       	reti

000018cc <I2C_init>:

void I2C_init(void)
{
	// init task circular buffer
	_local.task_head = 0;
    18cc:	e9 e0       	ldi	r30, 0x09	; 9
    18ce:	f4 e0       	ldi	r31, 0x04	; 4
    18d0:	11 ae       	std	Z+57, r1	; 0x39
	_local.task_tail = 0;
    18d2:	12 ae       	std	Z+58, r1	; 0x3a
	_local.tasks_num = 0;
    18d4:	13 ae       	std	Z+59, r1	; 0x3b
	_local.task_data_index = 0;
    18d6:	10 ae       	std	Z+56, r1	; 0x38
	
	// init I2C peripheral
	// configure frequency
	TWBR = CONF_I2C_BIT_RATE_REG;
    18d8:	83 e0       	ldi	r24, 0x03	; 3
    18da:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWSR = CONF_I2C_PRESCALER & 0x3;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    18e4:	08 95       	ret

000018e6 <I2C_available_tasks>:
}


uint8_t I2C_available_tasks(void)
{
	return CONF_I2C_TASK_BUFF_SIZE - _local.tasks_num;
    18e6:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <_local+0x3b>
}
    18ea:	88 e0       	ldi	r24, 0x08	; 8
    18ec:	89 1b       	sub	r24, r25
    18ee:	08 95       	ret

000018f0 <_I2C_enqueue_task>:


bool _I2C_enqueue_task(bool read, uint8_t addr, uint8_t *buff_ptr, uint16_t max_len, volatile I2C_stat_t *status_ptr)
{
    18f0:	0f 93       	push	r16
    18f2:	1f 93       	push	r17
	uint8_t flags;
	
	// save interrupt flag state
	flags = SREG;
    18f4:	3f b7       	in	r19, 0x3f	; 63
	cli();
    18f6:	f8 94       	cli
	
	if (_local.tasks_num >= CONF_I2C_TASK_BUFF_SIZE) {
    18f8:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <_local+0x3b>
    18fc:	98 30       	cpi	r25, 0x08	; 8
    18fe:	18 f0       	brcs	.+6      	; 0x1906 <_I2C_enqueue_task+0x16>
		SREG = flags;
    1900:	3f bf       	out	0x3f, r19	; 63
		return false;
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	44 c0       	rjmp	.+136    	; 0x198e <_I2C_enqueue_task+0x9e>
	}
	
	// enqueue task
	_local.tasks[_local.task_tail].data = buff_ptr;
    1906:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <_local+0x3a>
    190a:	97 e0       	ldi	r25, 0x07	; 7
    190c:	9e 9f       	mul	r25, r30
    190e:	f0 01       	movw	r30, r0
    1910:	11 24       	eor	r1, r1
    1912:	e7 5f       	subi	r30, 0xF7	; 247
    1914:	fb 4f       	sbci	r31, 0xFB	; 251
    1916:	51 83       	std	Z+1, r21	; 0x01
    1918:	40 83       	st	Z, r20
	_local.tasks[_local.task_tail].addr = addr;
    191a:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <_local+0x3a>
    191e:	9e 9f       	mul	r25, r30
    1920:	f0 01       	movw	r30, r0
    1922:	11 24       	eor	r1, r1
    1924:	e7 5f       	subi	r30, 0xF7	; 247
    1926:	fb 4f       	sbci	r31, 0xFB	; 251
    1928:	62 83       	std	Z+2, r22	; 0x02
	_local.tasks[_local.task_tail].len = max_len;
    192a:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <_local+0x3a>
    192e:	9e 9f       	mul	r25, r30
    1930:	f0 01       	movw	r30, r0
    1932:	11 24       	eor	r1, r1
    1934:	e7 5f       	subi	r30, 0xF7	; 247
    1936:	fb 4f       	sbci	r31, 0xFB	; 251
    1938:	23 83       	std	Z+3, r18	; 0x03
	_local.tasks[_local.task_tail].read = read;
    193a:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <_local+0x3a>
    193e:	9e 9f       	mul	r25, r30
    1940:	f0 01       	movw	r30, r0
    1942:	11 24       	eor	r1, r1
    1944:	e7 5f       	subi	r30, 0xF7	; 247
    1946:	fb 4f       	sbci	r31, 0xFB	; 251
    1948:	86 83       	std	Z+6, r24	; 0x06
	_local.tasks[_local.task_tail].status_ptr = status_ptr;
    194a:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <_local+0x3a>
    194e:	9e 9f       	mul	r25, r30
    1950:	f0 01       	movw	r30, r0
    1952:	11 24       	eor	r1, r1
    1954:	e7 5f       	subi	r30, 0xF7	; 247
    1956:	fb 4f       	sbci	r31, 0xFB	; 251
    1958:	15 83       	std	Z+5, r17	; 0x05
    195a:	04 83       	std	Z+4, r16	; 0x04
	*status_ptr = I2C_IN_PROGRESS;
    195c:	83 e0       	ldi	r24, 0x03	; 3
    195e:	f8 01       	movw	r30, r16
    1960:	80 83       	st	Z, r24
	_local.task_tail = (_local.task_tail + 1) 
    1962:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <_local+0x3a>
    1966:	8f 5f       	subi	r24, 0xFF	; 255
    1968:	87 70       	andi	r24, 0x07	; 7
    196a:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_local+0x3a>
						& (CONF_I2C_TASK_BUFF_SIZE - 1);
	_local.tasks_num ++;
    196e:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <_local+0x3b>
    1972:	8f 5f       	subi	r24, 0xFF	; 255
    1974:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <_local+0x3b>
	
	// if this is the first task added to the queue
	// (queue is empty)
	if (1 == _local.tasks_num) {
    1978:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <_local+0x3b>
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	29 f4       	brne	.+10     	; 0x198a <_I2C_enqueue_task+0x9a>
		// send start condition
		_local.task_data_index = 0;
    1980:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_local+0x38>
		TWCR = _EN_TRANSFER | (1 << TWSTA);
    1984:	85 ea       	ldi	r24, 0xA5	; 165
    1986:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	}
	
	// restore interrupt flag		
	SREG = flags;
    198a:	3f bf       	out	0x3f, r19	; 63
	
	return true;
    198c:	81 e0       	ldi	r24, 0x01	; 1
}
    198e:	1f 91       	pop	r17
    1990:	0f 91       	pop	r16
    1992:	08 95       	ret

00001994 <IND_set_mode>:
	uint32_t last_change;
	bool led_on;
} _local;

void IND_set_mode(indicator_mode_t mode)
{
    1994:	0f 93       	push	r16
    1996:	1f 93       	push	r17
	// enable led output
	DDRB |= (1 << PORTB5);
    1998:	25 9a       	sbi	0x04, 5	; 4
	_local.led_on = true;
    199a:	91 e0       	ldi	r25, 0x01	; 1
    199c:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <_local+0xc>
	
	switch (mode) {
    19a0:	81 30       	cpi	r24, 0x01	; 1
    19a2:	61 f0       	breq	.+24     	; 0x19bc <IND_set_mode+0x28>
    19a4:	48 f0       	brcs	.+18     	; 0x19b8 <IND_set_mode+0x24>
    19a6:	82 30       	cpi	r24, 0x02	; 2
    19a8:	71 f0       	breq	.+28     	; 0x19c6 <IND_set_mode+0x32>
    19aa:	83 30       	cpi	r24, 0x03	; 3
    19ac:	69 f5       	brne	.+90     	; 0x1a08 <IND_set_mode+0x74>
		case IND_ERROR:
			_local.delay_on_ms = 50;
			_local.delay_off_ms = 500;
			break;
		case IND_SIGNAL:
			_local.delay_on_ms = 50;
    19ae:	82 e3       	ldi	r24, 0x32	; 50
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	a0 e0       	ldi	r26, 0x00	; 0
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	18 c0       	rjmp	.+48     	; 0x19e8 <IND_set_mode+0x54>
	DDRB |= (1 << PORTB5);
	_local.led_on = true;
	
	switch (mode) {
		case IND_BOOTING:
			PORTB |= (1 << PORTB5);
    19b8:	2d 9a       	sbi	0x05, 5	; 5
			break;
    19ba:	26 c0       	rjmp	.+76     	; 0x1a08 <IND_set_mode+0x74>
		case IND_RUNNING:
			_local.delay_on_ms = 500;
    19bc:	84 ef       	ldi	r24, 0xF4	; 244
    19be:	91 e0       	ldi	r25, 0x01	; 1
    19c0:	a0 e0       	ldi	r26, 0x00	; 0
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	11 c0       	rjmp	.+34     	; 0x19e8 <IND_set_mode+0x54>
			_local.delay_off_ms = 500;
			break;
		case IND_ERROR:
			_local.delay_on_ms = 50;
    19c6:	82 e3       	ldi	r24, 0x32	; 50
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	a0 e0       	ldi	r26, 0x00	; 0
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_local>
    19d2:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <_local+0x1>
    19d6:	a0 93 47 04 	sts	0x0447, r26	; 0x800447 <_local+0x2>
    19da:	b0 93 48 04 	sts	0x0448, r27	; 0x800448 <_local+0x3>
			_local.delay_off_ms = 500;
    19de:	84 ef       	ldi	r24, 0xF4	; 244
    19e0:	91 e0       	ldi	r25, 0x01	; 1
    19e2:	a0 e0       	ldi	r26, 0x00	; 0
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	08 c0       	rjmp	.+16     	; 0x19f8 <IND_set_mode+0x64>
			break;
		case IND_SIGNAL:
			_local.delay_on_ms = 50;
    19e8:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_local>
    19ec:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <_local+0x1>
    19f0:	a0 93 47 04 	sts	0x0447, r26	; 0x800447 <_local+0x2>
    19f4:	b0 93 48 04 	sts	0x0448, r27	; 0x800448 <_local+0x3>
			_local.delay_off_ms = 50;
    19f8:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <_local+0x4>
    19fc:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <_local+0x5>
    1a00:	a0 93 4b 04 	sts	0x044B, r26	; 0x80044b <_local+0x6>
    1a04:	b0 93 4c 04 	sts	0x044C, r27	; 0x80044c <_local+0x7>
			break;
	}
	
	// force reset
	if (_local.led_on) {
    1a08:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <_local+0xc>
    1a0c:	88 23       	and	r24, r24
    1a0e:	51 f0       	breq	.+20     	; 0x1a24 <IND_set_mode+0x90>
		_local.last_change = CTRL_get_time() - _local.delay_on_ms;
    1a10:	6b db       	rcall	.-2346   	; 0x10e8 <CTRL_get_time>
    1a12:	00 91 45 04 	lds	r16, 0x0445	; 0x800445 <_local>
    1a16:	10 91 46 04 	lds	r17, 0x0446	; 0x800446 <_local+0x1>
    1a1a:	20 91 47 04 	lds	r18, 0x0447	; 0x800447 <_local+0x2>
    1a1e:	30 91 48 04 	lds	r19, 0x0448	; 0x800448 <_local+0x3>
    1a22:	09 c0       	rjmp	.+18     	; 0x1a36 <IND_set_mode+0xa2>
	} else {
		_local.last_change = CTRL_get_time() - _local.delay_off_ms;
    1a24:	61 db       	rcall	.-2366   	; 0x10e8 <CTRL_get_time>
    1a26:	00 91 49 04 	lds	r16, 0x0449	; 0x800449 <_local+0x4>
    1a2a:	10 91 4a 04 	lds	r17, 0x044A	; 0x80044a <_local+0x5>
    1a2e:	20 91 4b 04 	lds	r18, 0x044B	; 0x80044b <_local+0x6>
    1a32:	30 91 4c 04 	lds	r19, 0x044C	; 0x80044c <_local+0x7>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	80 1b       	sub	r24, r16
    1a3c:	91 0b       	sbc	r25, r17
    1a3e:	a2 0b       	sbc	r26, r18
    1a40:	b3 0b       	sbc	r27, r19
    1a42:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <_local+0x8>
    1a46:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <_local+0x9>
    1a4a:	a0 93 4f 04 	sts	0x044F, r26	; 0x80044f <_local+0xa>
    1a4e:	b0 93 50 04 	sts	0x0450, r27	; 0x800450 <_local+0xb>
    1a52:	1f 91       	pop	r17
	}
}
    1a54:	0f 91       	pop	r16
    1a56:	08 95       	ret

00001a58 <IND_iterate>:
    1a58:	0f 93       	push	r16

void IND_iterate(void)
{
    1a5a:	1f 93       	push	r17
    1a5c:	20 91 51 04 	lds	r18, 0x0451	; 0x800451 <_local+0xc>
	if (_local.led_on) {
    1a60:	60 91 4d 04 	lds	r22, 0x044D	; 0x80044d <_local+0x8>
    1a64:	70 91 4e 04 	lds	r23, 0x044E	; 0x80044e <_local+0x9>
    1a68:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <_local+0xa>
    1a6c:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <_local+0xb>
    1a70:	22 23       	and	r18, r18
    1a72:	91 f0       	breq	.+36     	; 0x1a98 <IND_iterate+0x40>
		if (CTRL_get_time_elapsed(_local.last_change) > _local.delay_on_ms) {
    1a74:	42 db       	rcall	.-2428   	; 0x10fa <CTRL_get_time_elapsed>
    1a76:	00 91 45 04 	lds	r16, 0x0445	; 0x800445 <_local>
    1a7a:	10 91 46 04 	lds	r17, 0x0446	; 0x800446 <_local+0x1>
    1a7e:	20 91 47 04 	lds	r18, 0x0447	; 0x800447 <_local+0x2>
    1a82:	30 91 48 04 	lds	r19, 0x0448	; 0x800448 <_local+0x3>
    1a86:	06 17       	cp	r16, r22
    1a88:	17 07       	cpc	r17, r23
    1a8a:	28 07       	cpc	r18, r24
    1a8c:	39 07       	cpc	r19, r25
    1a8e:	f8 f4       	brcc	.+62     	; 0x1ace <IND_iterate+0x76>
    1a90:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <_local+0xc>
			_local.led_on = false;
			DDRB &= ~(1 << PORTB5);
    1a94:	25 98       	cbi	0x04, 5	; 4
    1a96:	12 c0       	rjmp	.+36     	; 0x1abc <IND_iterate+0x64>
			_local.last_change = CTRL_get_time();
		}
	} else {
		if (CTRL_get_time_elapsed(_local.last_change) > _local.delay_off_ms) {
    1a98:	30 db       	rcall	.-2464   	; 0x10fa <CTRL_get_time_elapsed>
    1a9a:	00 91 49 04 	lds	r16, 0x0449	; 0x800449 <_local+0x4>
    1a9e:	10 91 4a 04 	lds	r17, 0x044A	; 0x80044a <_local+0x5>
    1aa2:	20 91 4b 04 	lds	r18, 0x044B	; 0x80044b <_local+0x6>
    1aa6:	30 91 4c 04 	lds	r19, 0x044C	; 0x80044c <_local+0x7>
    1aaa:	06 17       	cp	r16, r22
    1aac:	17 07       	cpc	r17, r23
    1aae:	28 07       	cpc	r18, r24
    1ab0:	39 07       	cpc	r19, r25
    1ab2:	68 f4       	brcc	.+26     	; 0x1ace <IND_iterate+0x76>
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
			_local.led_on = true;
    1ab6:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <_local+0xc>
			DDRB |= (1 << PORTB5);
    1aba:	25 9a       	sbi	0x04, 5	; 4
			_local.last_change = CTRL_get_time();
    1abc:	15 db       	rcall	.-2518   	; 0x10e8 <CTRL_get_time>
    1abe:	60 93 4d 04 	sts	0x044D, r22	; 0x80044d <_local+0x8>
    1ac2:	70 93 4e 04 	sts	0x044E, r23	; 0x80044e <_local+0x9>
    1ac6:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <_local+0xa>
    1aca:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <_local+0xb>
    1ace:	1f 91       	pop	r17
		}
	}
    1ad0:	0f 91       	pop	r16
    1ad2:	08 95       	ret

00001ad4 <circ_buff_init>:
#include "misc/circular_buff.h"

void circ_buff_init(struct circ_buff_t *buff)
{
	// sanity check
	if (NULL == buff) {
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	41 f0       	breq	.+16     	; 0x1ae8 <circ_buff_init+0x14>
		return;
	}
	
	buff->head = 0;
    1ad8:	fc 01       	movw	r30, r24
    1ada:	ef 57       	subi	r30, 0x7F	; 127
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	10 82       	st	Z, r1
	buff->tail = 0;
    1ae0:	31 96       	adiw	r30, 0x01	; 1
    1ae2:	10 82       	st	Z, r1
	buff->size = 0;
    1ae4:	32 97       	sbiw	r30, 0x02	; 2
    1ae6:	10 82       	st	Z, r1
    1ae8:	08 95       	ret

00001aea <circ_buff_put>:
}

void circ_buff_put(struct circ_buff_t *buff, uint8_t data)
{
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	9c 01       	movw	r18, r24
	// sanity check
	if (NULL == buff) {
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	99 f0       	breq	.+38     	; 0x1b1a <circ_buff_put+0x30>
		return;
	}
	
	// discard excess bytes
	if (buff->size >= CIRC_BUFF_CAPACITY) {
    1af4:	fc 01       	movw	r30, r24
    1af6:	e0 58       	subi	r30, 0x80	; 128
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	80 81       	ld	r24, Z
    1afc:	87 fd       	sbrc	r24, 7
    1afe:	0d c0       	rjmp	.+26     	; 0x1b1a <circ_buff_put+0x30>
		return;
	}
	
	buff->data[buff->tail] = data;
    1b00:	d9 01       	movw	r26, r18
    1b02:	ae 57       	subi	r26, 0x7E	; 126
    1b04:	bf 4f       	sbci	r27, 0xFF	; 255
    1b06:	9c 91       	ld	r25, X
    1b08:	e9 01       	movw	r28, r18
    1b0a:	c9 0f       	add	r28, r25
    1b0c:	d1 1d       	adc	r29, r1
    1b0e:	68 83       	st	Y, r22
	buff->tail = (buff->tail + 1) & (CIRC_BUFF_CAPACITY - 1);
    1b10:	9f 5f       	subi	r25, 0xFF	; 255
    1b12:	9f 77       	andi	r25, 0x7F	; 127
    1b14:	9c 93       	st	X, r25
	buff->size ++;
    1b16:	8f 5f       	subi	r24, 0xFF	; 255
    1b18:	80 83       	st	Z, r24
}
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	08 95       	ret

00001b20 <circ_buff_get>:

uint8_t circ_buff_get(struct circ_buff_t *buff)
{
    1b20:	cf 93       	push	r28
    1b22:	df 93       	push	r29
    1b24:	ac 01       	movw	r20, r24
	uint8_t tmp;
	
	// sanity check
	if (NULL == buff) {
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	a9 f0       	breq	.+42     	; 0x1b54 <circ_buff_get+0x34>
		return 0xff;
	}
	
	if (buff->size == 0) {
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	e0 58       	subi	r30, 0x80	; 128
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	90 81       	ld	r25, Z
    1b32:	99 23       	and	r25, r25
    1b34:	81 f0       	breq	.+32     	; 0x1b56 <circ_buff_get+0x36>
		return 0;
	}
	
	tmp = buff->data[buff->head];
    1b36:	da 01       	movw	r26, r20
    1b38:	af 57       	subi	r26, 0x7F	; 127
    1b3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b3c:	2c 91       	ld	r18, X
    1b3e:	ea 01       	movw	r28, r20
    1b40:	c2 0f       	add	r28, r18
    1b42:	d1 1d       	adc	r29, r1
    1b44:	88 81       	ld	r24, Y
	buff->head = (buff->head + 1) & (CIRC_BUFF_CAPACITY - 1);
    1b46:	2f 5f       	subi	r18, 0xFF	; 255
    1b48:	2f 77       	andi	r18, 0x7F	; 127
    1b4a:	2c 93       	st	X, r18
	buff->size --;
    1b4c:	91 50       	subi	r25, 0x01	; 1
    1b4e:	90 83       	st	Z, r25
	
	return tmp;
    1b50:	98 2f       	mov	r25, r24
    1b52:	01 c0       	rjmp	.+2      	; 0x1b56 <circ_buff_get+0x36>
{
	uint8_t tmp;
	
	// sanity check
	if (NULL == buff) {
		return 0xff;
    1b54:	9f ef       	ldi	r25, 0xFF	; 255
	tmp = buff->data[buff->head];
	buff->head = (buff->head + 1) & (CIRC_BUFF_CAPACITY - 1);
	buff->size --;
	
	return tmp;
}
    1b56:	89 2f       	mov	r24, r25
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	08 95       	ret

00001b5e <MOTOR_init>:


/* Stop both motors */ 
static inline void MOTORS_off(void)
{
	TCCR0B = TC0_CLK_OFF;
    1b5e:	15 bc       	out	0x25, r1	; 37
	DDRD &= ~(1 << PORTD6) & ~(1 << PORTD5);
    1b60:	8a b1       	in	r24, 0x0a	; 10
    1b62:	8f 79       	andi	r24, 0x9F	; 159
    1b64:	8a b9       	out	0x0a, r24	; 10
	
	// Fast PWM Mode (TOP = 0xFF)
	// Set OC0A, OC0B @BOTTOM
	// Clear OC0A, OC0B @compare
	// (non-inverting mode)
	TCCR0A = (2u << COM0A0) | (2u << COM0B0) | (3u << WGM00);
    1b66:	83 ea       	ldi	r24, 0xA3	; 163
    1b68:	84 bd       	out	0x24, r24	; 36
	
	// reset counter value 
	TCNT0 = 0;
    1b6a:	16 bc       	out	0x26, r1	; 38
	
	// default compare values
	OCR0A = 50;
    1b6c:	82 e3       	ldi	r24, 0x32	; 50
    1b6e:	87 bd       	out	0x27, r24	; 39
	OCR0B = 50;
    1b70:	88 bd       	out	0x28, r24	; 40
	
	// desable all interrupts
	TIMSK0 = 0;
    1b72:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	// enable output pins
	// in PD5, PD6
	DDRB |= (1 << PORTB0) | (1 << PORTB1);
    1b76:	84 b1       	in	r24, 0x04	; 4
    1b78:	83 60       	ori	r24, 0x03	; 3
    1b7a:	84 b9       	out	0x04, r24	; 4
    1b7c:	08 95       	ret

00001b7e <MOTOR_A_speed>:
}


void MOTOR_A_speed(int16_t speed)
{
	if (speed > 0) {
    1b7e:	18 16       	cp	r1, r24
    1b80:	19 06       	cpc	r1, r25
    1b82:	1c f4       	brge	.+6      	; 0x1b8a <MOTOR_A_speed+0xc>
		OCR0A = speed;
    1b84:	87 bd       	out	0x27, r24	; 39
		CONF_MOTOR_A_DIR_FW();
    1b86:	28 9a       	sbi	0x05, 0	; 5
    1b88:	08 95       	ret
	} else if (speed <= 0) {
		OCR0A = -speed;
    1b8a:	81 95       	neg	r24
    1b8c:	87 bd       	out	0x27, r24	; 39
		CONF_MOTOR_A_DIR_BW();
    1b8e:	28 98       	cbi	0x05, 0	; 5
    1b90:	08 95       	ret

00001b92 <MOTOR_B_speed>:
}


void MOTOR_B_speed(int16_t speed)
{
	if (speed > 0) {
    1b92:	18 16       	cp	r1, r24
    1b94:	19 06       	cpc	r1, r25
    1b96:	1c f4       	brge	.+6      	; 0x1b9e <MOTOR_B_speed+0xc>
		OCR0B = speed;
    1b98:	88 bd       	out	0x28, r24	; 40
		CONF_MOTOR_B_DIR_FW();
    1b9a:	29 98       	cbi	0x05, 1	; 5
    1b9c:	08 95       	ret
	} else if (speed <= 0) {
		OCR0B = -speed;
    1b9e:	81 95       	neg	r24
    1ba0:	88 bd       	out	0x28, r24	; 40
		CONF_MOTOR_B_DIR_BW();
    1ba2:	29 9a       	sbi	0x05, 1	; 5
    1ba4:	08 95       	ret

00001ba6 <__vector_18>:



// Called @data RX
ISR(USART_RX_vect) 
{
    1ba6:	1f 92       	push	r1
    1ba8:	0f 92       	push	r0
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	0f 92       	push	r0
    1bae:	11 24       	eor	r1, r1
    1bb0:	2f 93       	push	r18
    1bb2:	3f 93       	push	r19
    1bb4:	4f 93       	push	r20
    1bb6:	5f 93       	push	r21
    1bb8:	6f 93       	push	r22
    1bba:	7f 93       	push	r23
    1bbc:	8f 93       	push	r24
    1bbe:	9f 93       	push	r25
    1bc0:	af 93       	push	r26
    1bc2:	bf 93       	push	r27
    1bc4:	ef 93       	push	r30
    1bc6:	ff 93       	push	r31
	circ_buff_put((struct circ_buff_t*)&(_local.buff_in), UDR0);
    1bc8:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1bcc:	82 e5       	ldi	r24, 0x52	; 82
    1bce:	94 e0       	ldi	r25, 0x04	; 4
    1bd0:	8c df       	rcall	.-232    	; 0x1aea <circ_buff_put>
}
    1bd2:	ff 91       	pop	r31
    1bd4:	ef 91       	pop	r30
    1bd6:	bf 91       	pop	r27
    1bd8:	af 91       	pop	r26
    1bda:	9f 91       	pop	r25
    1bdc:	8f 91       	pop	r24
    1bde:	7f 91       	pop	r23
    1be0:	6f 91       	pop	r22
    1be2:	5f 91       	pop	r21
    1be4:	4f 91       	pop	r20
    1be6:	3f 91       	pop	r19
    1be8:	2f 91       	pop	r18
    1bea:	0f 90       	pop	r0
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	0f 90       	pop	r0
    1bf0:	1f 90       	pop	r1
    1bf2:	18 95       	reti

00001bf4 <__vector_19>:

// Called when data can be written to
// UART data reg
// (TX) 
ISR(USART_UDRE_vect)
{
    1bf4:	1f 92       	push	r1
    1bf6:	0f 92       	push	r0
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	0f 92       	push	r0
    1bfc:	11 24       	eor	r1, r1
    1bfe:	2f 93       	push	r18
    1c00:	3f 93       	push	r19
    1c02:	4f 93       	push	r20
    1c04:	5f 93       	push	r21
    1c06:	6f 93       	push	r22
    1c08:	7f 93       	push	r23
    1c0a:	8f 93       	push	r24
    1c0c:	9f 93       	push	r25
    1c0e:	af 93       	push	r26
    1c10:	bf 93       	push	r27
    1c12:	ef 93       	push	r30
    1c14:	ff 93       	push	r31
	// if there are data to be sent
	if (_local.buff_out.size > 0) {
    1c16:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <_local+0x103>
    1c1a:	88 23       	and	r24, r24
    1c1c:	31 f0       	breq	.+12     	; 0x1c2a <__vector_19+0x36>
		UDR0 = circ_buff_get((struct circ_buff_t*)&(_local.buff_out));
    1c1e:	85 ed       	ldi	r24, 0xD5	; 213
    1c20:	94 e0       	ldi	r25, 0x04	; 4
    1c22:	7e df       	rcall	.-260    	; 0x1b20 <circ_buff_get>
    1c24:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1c28:	05 c0       	rjmp	.+10     	; 0x1c34 <__vector_19+0x40>
	} else {
		// no data to be sent
		// disable TX interrupt	
		UCSR0B &= ~(1 << UDRIE0);
    1c2a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1c2e:	8f 7d       	andi	r24, 0xDF	; 223
    1c30:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	}
}
    1c34:	ff 91       	pop	r31
    1c36:	ef 91       	pop	r30
    1c38:	bf 91       	pop	r27
    1c3a:	af 91       	pop	r26
    1c3c:	9f 91       	pop	r25
    1c3e:	8f 91       	pop	r24
    1c40:	7f 91       	pop	r23
    1c42:	6f 91       	pop	r22
    1c44:	5f 91       	pop	r21
    1c46:	4f 91       	pop	r20
    1c48:	3f 91       	pop	r19
    1c4a:	2f 91       	pop	r18
    1c4c:	0f 90       	pop	r0
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	0f 90       	pop	r0
    1c52:	1f 90       	pop	r1
    1c54:	18 95       	reti

00001c56 <UART_init>:

void UART_init(void)
{
	// 0b00000110
	// Async, 8N1
	UCSR0C = 0x06;
    1c56:	86 e0       	ldi	r24, 0x06	; 6
    1c58:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	// set baudrate 38400
	UBRR0H = 0;
    1c5c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
#if defined (BOARD_CLOCK_8M)
	UBRR0L = 12;
#else
	UBRR0L = 25;
    1c60:	89 e1       	ldi	r24, 0x19	; 25
    1c62:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif
	// enable RX interrupt
	UCSR0B |= 1 << RXCIE0;
    1c66:	e1 ec       	ldi	r30, 0xC1	; 193
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	80 68       	ori	r24, 0x80	; 128
    1c6e:	80 83       	st	Z, r24
	// enable RX, TX
	UCSR0B |= (3 << 3);
    1c70:	80 81       	ld	r24, Z
    1c72:	88 61       	ori	r24, 0x18	; 24
    1c74:	80 83       	st	Z, r24
	
	circ_buff_init((struct circ_buff_t*)&(_local.buff_in));
    1c76:	82 e5       	ldi	r24, 0x52	; 82
    1c78:	94 e0       	ldi	r25, 0x04	; 4
    1c7a:	2c df       	rcall	.-424    	; 0x1ad4 <circ_buff_init>
	circ_buff_init((struct circ_buff_t*)&(_local.buff_out));
    1c7c:	85 ed       	ldi	r24, 0xD5	; 213
    1c7e:	94 e0       	ldi	r25, 0x04	; 4
    1c80:	29 cf       	rjmp	.-430    	; 0x1ad4 <circ_buff_init>

00001c82 <UART_write>:
    1c82:	cf 93       	push	r28
}



void UART_write(uint8_t byte)
{	
    1c84:	cf b7       	in	r28, 0x3f	; 63
	uint8_t flags;
	
	flags = SREG;
    1c86:	f8 94       	cli
		// buffer full
		// re-enable interrupts
		sei();
		// wait a bit (enough to TX 1 byte)
		_delay_us(27);
		cli();
    1c88:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <_local+0x103>
	uint8_t flags;
	
	flags = SREG;
	// check if buff out is full
	cli();
	while (_local.buff_out.size >= CIRC_BUFF_CAPACITY) {
    1c8c:	97 ff       	sbrs	r25, 7
    1c8e:	05 c0       	rjmp	.+10     	; 0x1c9a <UART_write+0x18>
    1c90:	78 94       	sei
		// buffer full
		// re-enable interrupts
		sei();
    1c92:	90 e9       	ldi	r25, 0x90	; 144
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c94:	9a 95       	dec	r25
    1c96:	f1 f7       	brne	.-4      	; 0x1c94 <UART_write+0x12>
    1c98:	f6 cf       	rjmp	.-20     	; 0x1c86 <UART_write+0x4>
		cli();
	}


	// add data to TX buffer
	circ_buff_put((struct circ_buff_t*)&(_local.buff_out), byte);
    1c9a:	68 2f       	mov	r22, r24
    1c9c:	85 ed       	ldi	r24, 0xD5	; 213
    1c9e:	94 e0       	ldi	r25, 0x04	; 4
    1ca0:	24 df       	rcall	.-440    	; 0x1aea <circ_buff_put>
    1ca2:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	// enable TX Data Reg Empty Interrupt
	UCSR0B |= 1 << UDRIE0;
    1ca6:	80 62       	ori	r24, 0x20	; 32
    1ca8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1cac:	cf bf       	out	0x3f, r28	; 63
	
	SREG = flags;
    1cae:	cf 91       	pop	r28
}
    1cb0:	08 95       	ret

00001cb2 <UART_write_str>:
    1cb2:	cf 93       	push	r28

void UART_write_str(const char *str)
{
    1cb4:	df 93       	push	r29
    1cb6:	ec 01       	movw	r28, r24
	uint16_t i;
	
	i = 0;
	while(str[i] != '\0') {
    1cb8:	89 91       	ld	r24, Y+
    1cba:	88 23       	and	r24, r24
    1cbc:	11 f0       	breq	.+4      	; 0x1cc2 <UART_write_str+0x10>
		UART_write(str[i++]);
    1cbe:	e1 df       	rcall	.-62     	; 0x1c82 <UART_write>
    1cc0:	fb cf       	rjmp	.-10     	; 0x1cb8 <UART_write_str+0x6>
    1cc2:	df 91       	pop	r29
	}
}
    1cc4:	cf 91       	pop	r28
    1cc6:	08 95       	ret

00001cc8 <UART_read>:

uint8_t UART_read(void)
{
	uint8_t tmp;
	
	cli();
    1cc8:	f8 94       	cli
	tmp = circ_buff_get((struct circ_buff_t*)&(_local.buff_in));
    1cca:	82 e5       	ldi	r24, 0x52	; 82
    1ccc:	94 e0       	ldi	r25, 0x04	; 4
    1cce:	28 df       	rcall	.-432    	; 0x1b20 <circ_buff_get>
    1cd0:	78 94       	sei
	sei();
    1cd2:	08 95       	ret

00001cd4 <UART_available>:
	
	return tmp;
}
    1cd4:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <_local+0x80>


int	 UART_available(void)
{
	return (int)_local.buff_in.size;
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
}
    1cda:	08 95       	ret

00001cdc <main>:
    1cdc:	f7 dd       	rcall	.-1042   	; 0x18cc <I2C_init>

int main(void)
{	
	// init system peripherals
	I2C_init();
	UART_init();
    1cde:	bb df       	rcall	.-138    	; 0x1c56 <UART_init>
	
	// init sub-systems
	MOTOR_init();
    1ce0:	3e df       	rcall	.-388    	; 0x1b5e <MOTOR_init>
	CONS_init();
    1ce2:	0e 94 3a 05 	call	0xa74	; 0xa74 <CONS_init>
	CTRL_init();
    1ce6:	0f d9       	rcall	.-3554   	; 0xf06 <CTRL_init>
    1ce8:	e1 2c       	mov	r14, r1
	
	// init default ctrl system parameters
	CTRL_set_PID_terms(55.0f, 3, 9.0f);
    1cea:	f1 2c       	mov	r15, r1
    1cec:	00 e1       	ldi	r16, 0x10	; 16
    1cee:	11 e4       	ldi	r17, 0x41	; 65
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e4       	ldi	r20, 0x40	; 64
    1cf6:	50 e4       	ldi	r21, 0x40	; 64
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	70 e0       	ldi	r23, 0x00	; 0
    1cfc:	8c e5       	ldi	r24, 0x5C	; 92
    1cfe:	92 e4       	ldi	r25, 0x42	; 66
    1d00:	83 d9       	rcall	.-3322   	; 0x1008 <CTRL_set_PID_terms>
    1d02:	66 e6       	ldi	r22, 0x66	; 102
	CTRL_set_angle_off(-3.6f);
    1d04:	76 e6       	ldi	r23, 0x66	; 102
    1d06:	86 e6       	ldi	r24, 0x66	; 102
    1d08:	90 ec       	ldi	r25, 0xC0	; 192
    1d0a:	bc d9       	rcall	.-3208   	; 0x1084 <CTRL_set_angle_off>
    1d0c:	78 94       	sei
	
	// enable global interrupts
	sei();
    1d0e:	75 da       	rcall	.-2838   	; 0x11fa <CTRL_load_calib>
	
	// load calibration from EEPROM
	CTRL_load_calib();
    1d10:	81 e0       	ldi	r24, 0x01	; 1
	
	BNO_init(true);
    1d12:	0e 94 d7 01 	call	0x3ae	; 0x3ae <BNO_init>
	CTRL_PID_start();
    1d16:	c2 d9       	rcall	.-3196   	; 0x109c <CTRL_PID_start>
    1d18:	27 98       	cbi	0x04, 7	; 4
	// enable button
	DDRB &= ~(1 << PORTB7);
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
	
	// announce STARTED
	IND_set_mode(IND_RUNNING);
    1d1c:	3b de       	rcall	.-906    	; 0x1994 <IND_set_mode>
    1d1e:	e4 d9       	rcall	.-3128   	; 0x10e8 <CTRL_get_time>
    1d20:	4b 01       	movw	r8, r22
	
	// main loop
	uint32_t _time = CTRL_get_time();
    1d22:	5c 01       	movw	r10, r24
    1d24:	98 e3       	ldi	r25, 0x38	; 56
    1d26:	c9 2e       	mov	r12, r25
    1d28:	91 e0       	ldi	r25, 0x01	; 1
			CTRL_PID_start();
		}
		
		if (CONF_streaming_on && (CTRL_get_time_elapsed(_time) > 500)) {
			_time = CTRL_get_time();
			print("============\n\r");
    1d2a:	d9 2e       	mov	r13, r25
    1d2c:	27 e4       	ldi	r18, 0x47	; 71
    1d2e:	e2 2e       	mov	r14, r18
    1d30:	21 e0       	ldi	r18, 0x01	; 1
			print("x=%f\n\r", _dev_bno_x);
    1d32:	f2 2e       	mov	r15, r18
    1d34:	0e e4       	ldi	r16, 0x4E	; 78
    1d36:	11 e0       	ldi	r17, 0x01	; 1
    1d38:	c5 e5       	ldi	r28, 0x55	; 85
			print("y=%f\n\r", _dev_bno_y);
    1d3a:	d1 e0       	ldi	r29, 0x01	; 1
    1d3c:	35 e6       	ldi	r19, 0x65	; 101
			print("z=%f\n\r", _dev_bno_z);
    1d3e:	63 2e       	mov	r6, r19
    1d40:	31 e0       	ldi	r19, 0x01	; 1
			print("c_g=%d\n\r", _dev_bno_cal_gyro);
    1d42:	73 2e       	mov	r7, r19
    1d44:	4e e6       	ldi	r20, 0x6E	; 110
    1d46:	44 2e       	mov	r4, r20
			print("c_a=%d\n\r", _dev_bno_cal_acc);
    1d48:	41 e0       	ldi	r20, 0x01	; 1
    1d4a:	54 2e       	mov	r5, r20
    1d4c:	0e 94 3b 06 	call	0xc76	; 0xc76 <CONS_handle>
	IND_set_mode(IND_RUNNING);
	
	// main loop
	uint32_t _time = CTRL_get_time();
	while (1) {
		CONS_handle();
    1d50:	1f 99       	sbic	0x03, 7	; 3
		// on button press, re-enable system
		if (0 == (PINB & (1 << PORTB7))) {
    1d52:	03 c0       	rjmp	.+6      	; 0x1d5a <main+0x7e>
			IND_set_mode(IND_RUNNING);
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	1e de       	rcall	.-964    	; 0x1994 <IND_set_mode>
    1d58:	a1 d9       	rcall	.-3262   	; 0x109c <CTRL_PID_start>
			CTRL_PID_start();
    1d5a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <CONF_streaming_on>
		}
		
		if (CONF_streaming_on && (CTRL_get_time_elapsed(_time) > 500)) {
    1d5e:	88 23       	and	r24, r24
    1d60:	a9 f3       	breq	.-22     	; 0x1d4c <main+0x70>
    1d62:	c5 01       	movw	r24, r10
    1d64:	b4 01       	movw	r22, r8
    1d66:	c9 d9       	rcall	.-3182   	; 0x10fa <CTRL_get_time_elapsed>
    1d68:	65 3f       	cpi	r22, 0xF5	; 245
    1d6a:	71 40       	sbci	r23, 0x01	; 1
    1d6c:	81 05       	cpc	r24, r1
    1d6e:	91 05       	cpc	r25, r1
    1d70:	68 f3       	brcs	.-38     	; 0x1d4c <main+0x70>
    1d72:	ba d9       	rcall	.-3212   	; 0x10e8 <CTRL_get_time>
    1d74:	4b 01       	movw	r8, r22
			_time = CTRL_get_time();
    1d76:	5c 01       	movw	r10, r24
    1d78:	df 92       	push	r13
    1d7a:	cf 92       	push	r12
    1d7c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <print>
			print("============\n\r");
    1d80:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <_dev_bno_x+0x3>
    1d84:	8f 93       	push	r24
			print("x=%f\n\r", _dev_bno_x);
    1d86:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <_dev_bno_x+0x2>
    1d8a:	8f 93       	push	r24
    1d8c:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <_dev_bno_x+0x1>
    1d90:	8f 93       	push	r24
    1d92:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <_dev_bno_x>
    1d96:	8f 93       	push	r24
    1d98:	ff 92       	push	r15
    1d9a:	ef 92       	push	r14
    1d9c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <print>
    1da0:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <_dev_bno_y+0x3>
    1da4:	8f 93       	push	r24
			print("y=%f\n\r", _dev_bno_y);
    1da6:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <_dev_bno_y+0x2>
    1daa:	8f 93       	push	r24
    1dac:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <_dev_bno_y+0x1>
    1db0:	8f 93       	push	r24
    1db2:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <_dev_bno_y>
    1db6:	8f 93       	push	r24
    1db8:	1f 93       	push	r17
    1dba:	0f 93       	push	r16
    1dbc:	0e 94 64 06 	call	0xcc8	; 0xcc8 <print>
    1dc0:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <_dev_bno_z+0x3>
    1dc4:	8f 93       	push	r24
			print("z=%f\n\r", _dev_bno_z);
    1dc6:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <_dev_bno_z+0x2>
    1dca:	8f 93       	push	r24
    1dcc:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <_dev_bno_z+0x1>
    1dd0:	8f 93       	push	r24
    1dd2:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <_dev_bno_z>
    1dd6:	8f 93       	push	r24
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	0e 94 64 06 	call	0xcc8	; 0xcc8 <print>
    1de0:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <_dev_bno_cal_gyro>
    1de4:	1f 92       	push	r1
			print("c_g=%d\n\r", _dev_bno_cal_gyro);
    1de6:	8f 93       	push	r24
    1de8:	7f 92       	push	r7
    1dea:	6f 92       	push	r6
    1dec:	0e 94 64 06 	call	0xcc8	; 0xcc8 <print>
    1df0:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <_dev_bno_cal_acc>
    1df4:	1f 92       	push	r1
			print("c_a=%d\n\r", _dev_bno_cal_acc);
    1df6:	8f 93       	push	r24
    1df8:	5f 92       	push	r5
    1dfa:	4f 92       	push	r4
    1dfc:	0e 94 64 06 	call	0xcc8	; 0xcc8 <print>
    1e00:	8d b7       	in	r24, 0x3d	; 61
    1e02:	9e b7       	in	r25, 0x3e	; 62
    1e04:	4c 96       	adiw	r24, 0x1c	; 28
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	9e bf       	out	0x3e, r25	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	8d bf       	out	0x3d, r24	; 61
    1e10:	9d cf       	rjmp	.-198    	; 0x1d4c <main+0x70>

00001e12 <__subsf3>:
    1e12:	50 58       	subi	r21, 0x80	; 128

00001e14 <__addsf3>:
    1e14:	bb 27       	eor	r27, r27
    1e16:	aa 27       	eor	r26, r26
    1e18:	0e d0       	rcall	.+28     	; 0x1e36 <__addsf3x>
    1e1a:	b1 c1       	rjmp	.+866    	; 0x217e <__fp_round>
    1e1c:	a2 d1       	rcall	.+836    	; 0x2162 <__fp_pscA>
    1e1e:	30 f0       	brcs	.+12     	; 0x1e2c <__addsf3+0x18>
    1e20:	a7 d1       	rcall	.+846    	; 0x2170 <__fp_pscB>
    1e22:	20 f0       	brcs	.+8      	; 0x1e2c <__addsf3+0x18>
    1e24:	31 f4       	brne	.+12     	; 0x1e32 <__addsf3+0x1e>
    1e26:	9f 3f       	cpi	r25, 0xFF	; 255
    1e28:	11 f4       	brne	.+4      	; 0x1e2e <__addsf3+0x1a>
    1e2a:	1e f4       	brtc	.+6      	; 0x1e32 <__addsf3+0x1e>
    1e2c:	97 c1       	rjmp	.+814    	; 0x215c <__fp_nan>
    1e2e:	0e f4       	brtc	.+2      	; 0x1e32 <__addsf3+0x1e>
    1e30:	e0 95       	com	r30
    1e32:	e7 fb       	bst	r30, 7
    1e34:	64 c1       	rjmp	.+712    	; 0x20fe <__fp_inf>

00001e36 <__addsf3x>:
    1e36:	e9 2f       	mov	r30, r25
    1e38:	b3 d1       	rcall	.+870    	; 0x21a0 <__fp_split3>
    1e3a:	80 f3       	brcs	.-32     	; 0x1e1c <__addsf3+0x8>
    1e3c:	ba 17       	cp	r27, r26
    1e3e:	62 07       	cpc	r22, r18
    1e40:	73 07       	cpc	r23, r19
    1e42:	84 07       	cpc	r24, r20
    1e44:	95 07       	cpc	r25, r21
    1e46:	18 f0       	brcs	.+6      	; 0x1e4e <__addsf3x+0x18>
    1e48:	71 f4       	brne	.+28     	; 0x1e66 <__addsf3x+0x30>
    1e4a:	9e f5       	brtc	.+102    	; 0x1eb2 <__addsf3x+0x7c>
    1e4c:	e2 c1       	rjmp	.+964    	; 0x2212 <__fp_zero>
    1e4e:	0e f4       	brtc	.+2      	; 0x1e52 <__addsf3x+0x1c>
    1e50:	e0 95       	com	r30
    1e52:	0b 2e       	mov	r0, r27
    1e54:	ba 2f       	mov	r27, r26
    1e56:	a0 2d       	mov	r26, r0
    1e58:	0b 01       	movw	r0, r22
    1e5a:	b9 01       	movw	r22, r18
    1e5c:	90 01       	movw	r18, r0
    1e5e:	0c 01       	movw	r0, r24
    1e60:	ca 01       	movw	r24, r20
    1e62:	a0 01       	movw	r20, r0
    1e64:	11 24       	eor	r1, r1
    1e66:	ff 27       	eor	r31, r31
    1e68:	59 1b       	sub	r21, r25
    1e6a:	99 f0       	breq	.+38     	; 0x1e92 <__addsf3x+0x5c>
    1e6c:	59 3f       	cpi	r21, 0xF9	; 249
    1e6e:	50 f4       	brcc	.+20     	; 0x1e84 <__addsf3x+0x4e>
    1e70:	50 3e       	cpi	r21, 0xE0	; 224
    1e72:	68 f1       	brcs	.+90     	; 0x1ece <__addsf3x+0x98>
    1e74:	1a 16       	cp	r1, r26
    1e76:	f0 40       	sbci	r31, 0x00	; 0
    1e78:	a2 2f       	mov	r26, r18
    1e7a:	23 2f       	mov	r18, r19
    1e7c:	34 2f       	mov	r19, r20
    1e7e:	44 27       	eor	r20, r20
    1e80:	58 5f       	subi	r21, 0xF8	; 248
    1e82:	f3 cf       	rjmp	.-26     	; 0x1e6a <__addsf3x+0x34>
    1e84:	46 95       	lsr	r20
    1e86:	37 95       	ror	r19
    1e88:	27 95       	ror	r18
    1e8a:	a7 95       	ror	r26
    1e8c:	f0 40       	sbci	r31, 0x00	; 0
    1e8e:	53 95       	inc	r21
    1e90:	c9 f7       	brne	.-14     	; 0x1e84 <__addsf3x+0x4e>
    1e92:	7e f4       	brtc	.+30     	; 0x1eb2 <__addsf3x+0x7c>
    1e94:	1f 16       	cp	r1, r31
    1e96:	ba 0b       	sbc	r27, r26
    1e98:	62 0b       	sbc	r22, r18
    1e9a:	73 0b       	sbc	r23, r19
    1e9c:	84 0b       	sbc	r24, r20
    1e9e:	ba f0       	brmi	.+46     	; 0x1ece <__addsf3x+0x98>
    1ea0:	91 50       	subi	r25, 0x01	; 1
    1ea2:	a1 f0       	breq	.+40     	; 0x1ecc <__addsf3x+0x96>
    1ea4:	ff 0f       	add	r31, r31
    1ea6:	bb 1f       	adc	r27, r27
    1ea8:	66 1f       	adc	r22, r22
    1eaa:	77 1f       	adc	r23, r23
    1eac:	88 1f       	adc	r24, r24
    1eae:	c2 f7       	brpl	.-16     	; 0x1ea0 <__addsf3x+0x6a>
    1eb0:	0e c0       	rjmp	.+28     	; 0x1ece <__addsf3x+0x98>
    1eb2:	ba 0f       	add	r27, r26
    1eb4:	62 1f       	adc	r22, r18
    1eb6:	73 1f       	adc	r23, r19
    1eb8:	84 1f       	adc	r24, r20
    1eba:	48 f4       	brcc	.+18     	; 0x1ece <__addsf3x+0x98>
    1ebc:	87 95       	ror	r24
    1ebe:	77 95       	ror	r23
    1ec0:	67 95       	ror	r22
    1ec2:	b7 95       	ror	r27
    1ec4:	f7 95       	ror	r31
    1ec6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ec8:	08 f0       	brcs	.+2      	; 0x1ecc <__addsf3x+0x96>
    1eca:	b3 cf       	rjmp	.-154    	; 0x1e32 <__addsf3+0x1e>
    1ecc:	93 95       	inc	r25
    1ece:	88 0f       	add	r24, r24
    1ed0:	08 f0       	brcs	.+2      	; 0x1ed4 <__addsf3x+0x9e>
    1ed2:	99 27       	eor	r25, r25
    1ed4:	ee 0f       	add	r30, r30
    1ed6:	97 95       	ror	r25
    1ed8:	87 95       	ror	r24
    1eda:	08 95       	ret

00001edc <__cmpsf2>:
    1edc:	ec d0       	rcall	.+472    	; 0x20b6 <__fp_cmp>
    1ede:	08 f4       	brcc	.+2      	; 0x1ee2 <__cmpsf2+0x6>
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	08 95       	ret

00001ee4 <__divsf3>:
    1ee4:	0c d0       	rcall	.+24     	; 0x1efe <__divsf3x>
    1ee6:	4b c1       	rjmp	.+662    	; 0x217e <__fp_round>
    1ee8:	43 d1       	rcall	.+646    	; 0x2170 <__fp_pscB>
    1eea:	40 f0       	brcs	.+16     	; 0x1efc <__divsf3+0x18>
    1eec:	3a d1       	rcall	.+628    	; 0x2162 <__fp_pscA>
    1eee:	30 f0       	brcs	.+12     	; 0x1efc <__divsf3+0x18>
    1ef0:	21 f4       	brne	.+8      	; 0x1efa <__divsf3+0x16>
    1ef2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ef4:	19 f0       	breq	.+6      	; 0x1efc <__divsf3+0x18>
    1ef6:	03 c1       	rjmp	.+518    	; 0x20fe <__fp_inf>
    1ef8:	51 11       	cpse	r21, r1
    1efa:	8c c1       	rjmp	.+792    	; 0x2214 <__fp_szero>
    1efc:	2f c1       	rjmp	.+606    	; 0x215c <__fp_nan>

00001efe <__divsf3x>:
    1efe:	50 d1       	rcall	.+672    	; 0x21a0 <__fp_split3>
    1f00:	98 f3       	brcs	.-26     	; 0x1ee8 <__divsf3+0x4>

00001f02 <__divsf3_pse>:
    1f02:	99 23       	and	r25, r25
    1f04:	c9 f3       	breq	.-14     	; 0x1ef8 <__divsf3+0x14>
    1f06:	55 23       	and	r21, r21
    1f08:	b1 f3       	breq	.-20     	; 0x1ef6 <__divsf3+0x12>
    1f0a:	95 1b       	sub	r25, r21
    1f0c:	55 0b       	sbc	r21, r21
    1f0e:	bb 27       	eor	r27, r27
    1f10:	aa 27       	eor	r26, r26
    1f12:	62 17       	cp	r22, r18
    1f14:	73 07       	cpc	r23, r19
    1f16:	84 07       	cpc	r24, r20
    1f18:	38 f0       	brcs	.+14     	; 0x1f28 <__divsf3_pse+0x26>
    1f1a:	9f 5f       	subi	r25, 0xFF	; 255
    1f1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f1e:	22 0f       	add	r18, r18
    1f20:	33 1f       	adc	r19, r19
    1f22:	44 1f       	adc	r20, r20
    1f24:	aa 1f       	adc	r26, r26
    1f26:	a9 f3       	breq	.-22     	; 0x1f12 <__divsf3_pse+0x10>
    1f28:	33 d0       	rcall	.+102    	; 0x1f90 <__divsf3_pse+0x8e>
    1f2a:	0e 2e       	mov	r0, r30
    1f2c:	3a f0       	brmi	.+14     	; 0x1f3c <__divsf3_pse+0x3a>
    1f2e:	e0 e8       	ldi	r30, 0x80	; 128
    1f30:	30 d0       	rcall	.+96     	; 0x1f92 <__divsf3_pse+0x90>
    1f32:	91 50       	subi	r25, 0x01	; 1
    1f34:	50 40       	sbci	r21, 0x00	; 0
    1f36:	e6 95       	lsr	r30
    1f38:	00 1c       	adc	r0, r0
    1f3a:	ca f7       	brpl	.-14     	; 0x1f2e <__divsf3_pse+0x2c>
    1f3c:	29 d0       	rcall	.+82     	; 0x1f90 <__divsf3_pse+0x8e>
    1f3e:	fe 2f       	mov	r31, r30
    1f40:	27 d0       	rcall	.+78     	; 0x1f90 <__divsf3_pse+0x8e>
    1f42:	66 0f       	add	r22, r22
    1f44:	77 1f       	adc	r23, r23
    1f46:	88 1f       	adc	r24, r24
    1f48:	bb 1f       	adc	r27, r27
    1f4a:	26 17       	cp	r18, r22
    1f4c:	37 07       	cpc	r19, r23
    1f4e:	48 07       	cpc	r20, r24
    1f50:	ab 07       	cpc	r26, r27
    1f52:	b0 e8       	ldi	r27, 0x80	; 128
    1f54:	09 f0       	breq	.+2      	; 0x1f58 <__divsf3_pse+0x56>
    1f56:	bb 0b       	sbc	r27, r27
    1f58:	80 2d       	mov	r24, r0
    1f5a:	bf 01       	movw	r22, r30
    1f5c:	ff 27       	eor	r31, r31
    1f5e:	93 58       	subi	r25, 0x83	; 131
    1f60:	5f 4f       	sbci	r21, 0xFF	; 255
    1f62:	2a f0       	brmi	.+10     	; 0x1f6e <__divsf3_pse+0x6c>
    1f64:	9e 3f       	cpi	r25, 0xFE	; 254
    1f66:	51 05       	cpc	r21, r1
    1f68:	68 f0       	brcs	.+26     	; 0x1f84 <__divsf3_pse+0x82>
    1f6a:	c9 c0       	rjmp	.+402    	; 0x20fe <__fp_inf>
    1f6c:	53 c1       	rjmp	.+678    	; 0x2214 <__fp_szero>
    1f6e:	5f 3f       	cpi	r21, 0xFF	; 255
    1f70:	ec f3       	brlt	.-6      	; 0x1f6c <__divsf3_pse+0x6a>
    1f72:	98 3e       	cpi	r25, 0xE8	; 232
    1f74:	dc f3       	brlt	.-10     	; 0x1f6c <__divsf3_pse+0x6a>
    1f76:	86 95       	lsr	r24
    1f78:	77 95       	ror	r23
    1f7a:	67 95       	ror	r22
    1f7c:	b7 95       	ror	r27
    1f7e:	f7 95       	ror	r31
    1f80:	9f 5f       	subi	r25, 0xFF	; 255
    1f82:	c9 f7       	brne	.-14     	; 0x1f76 <__divsf3_pse+0x74>
    1f84:	88 0f       	add	r24, r24
    1f86:	91 1d       	adc	r25, r1
    1f88:	96 95       	lsr	r25
    1f8a:	87 95       	ror	r24
    1f8c:	97 f9       	bld	r25, 7
    1f8e:	08 95       	ret
    1f90:	e1 e0       	ldi	r30, 0x01	; 1
    1f92:	66 0f       	add	r22, r22
    1f94:	77 1f       	adc	r23, r23
    1f96:	88 1f       	adc	r24, r24
    1f98:	bb 1f       	adc	r27, r27
    1f9a:	62 17       	cp	r22, r18
    1f9c:	73 07       	cpc	r23, r19
    1f9e:	84 07       	cpc	r24, r20
    1fa0:	ba 07       	cpc	r27, r26
    1fa2:	20 f0       	brcs	.+8      	; 0x1fac <__divsf3_pse+0xaa>
    1fa4:	62 1b       	sub	r22, r18
    1fa6:	73 0b       	sbc	r23, r19
    1fa8:	84 0b       	sbc	r24, r20
    1faa:	ba 0b       	sbc	r27, r26
    1fac:	ee 1f       	adc	r30, r30
    1fae:	88 f7       	brcc	.-30     	; 0x1f92 <__divsf3_pse+0x90>
    1fb0:	e0 95       	com	r30
    1fb2:	08 95       	ret

00001fb4 <__fixsfsi>:
    1fb4:	04 d0       	rcall	.+8      	; 0x1fbe <__fixunssfsi>
    1fb6:	68 94       	set
    1fb8:	b1 11       	cpse	r27, r1
    1fba:	2c c1       	rjmp	.+600    	; 0x2214 <__fp_szero>
    1fbc:	08 95       	ret

00001fbe <__fixunssfsi>:
    1fbe:	f8 d0       	rcall	.+496    	; 0x21b0 <__fp_splitA>
    1fc0:	88 f0       	brcs	.+34     	; 0x1fe4 <__fixunssfsi+0x26>
    1fc2:	9f 57       	subi	r25, 0x7F	; 127
    1fc4:	90 f0       	brcs	.+36     	; 0x1fea <__fixunssfsi+0x2c>
    1fc6:	b9 2f       	mov	r27, r25
    1fc8:	99 27       	eor	r25, r25
    1fca:	b7 51       	subi	r27, 0x17	; 23
    1fcc:	a0 f0       	brcs	.+40     	; 0x1ff6 <__fixunssfsi+0x38>
    1fce:	d1 f0       	breq	.+52     	; 0x2004 <__fixunssfsi+0x46>
    1fd0:	66 0f       	add	r22, r22
    1fd2:	77 1f       	adc	r23, r23
    1fd4:	88 1f       	adc	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	1a f0       	brmi	.+6      	; 0x1fe0 <__fixunssfsi+0x22>
    1fda:	ba 95       	dec	r27
    1fdc:	c9 f7       	brne	.-14     	; 0x1fd0 <__fixunssfsi+0x12>
    1fde:	12 c0       	rjmp	.+36     	; 0x2004 <__fixunssfsi+0x46>
    1fe0:	b1 30       	cpi	r27, 0x01	; 1
    1fe2:	81 f0       	breq	.+32     	; 0x2004 <__fixunssfsi+0x46>
    1fe4:	16 d1       	rcall	.+556    	; 0x2212 <__fp_zero>
    1fe6:	b1 e0       	ldi	r27, 0x01	; 1
    1fe8:	08 95       	ret
    1fea:	13 c1       	rjmp	.+550    	; 0x2212 <__fp_zero>
    1fec:	67 2f       	mov	r22, r23
    1fee:	78 2f       	mov	r23, r24
    1ff0:	88 27       	eor	r24, r24
    1ff2:	b8 5f       	subi	r27, 0xF8	; 248
    1ff4:	39 f0       	breq	.+14     	; 0x2004 <__fixunssfsi+0x46>
    1ff6:	b9 3f       	cpi	r27, 0xF9	; 249
    1ff8:	cc f3       	brlt	.-14     	; 0x1fec <__fixunssfsi+0x2e>
    1ffa:	86 95       	lsr	r24
    1ffc:	77 95       	ror	r23
    1ffe:	67 95       	ror	r22
    2000:	b3 95       	inc	r27
    2002:	d9 f7       	brne	.-10     	; 0x1ffa <__fixunssfsi+0x3c>
    2004:	3e f4       	brtc	.+14     	; 0x2014 <__fixunssfsi+0x56>
    2006:	90 95       	com	r25
    2008:	80 95       	com	r24
    200a:	70 95       	com	r23
    200c:	61 95       	neg	r22
    200e:	7f 4f       	sbci	r23, 0xFF	; 255
    2010:	8f 4f       	sbci	r24, 0xFF	; 255
    2012:	9f 4f       	sbci	r25, 0xFF	; 255
    2014:	08 95       	ret

00002016 <__floatunsisf>:
    2016:	e8 94       	clt
    2018:	09 c0       	rjmp	.+18     	; 0x202c <__floatsisf+0x12>

0000201a <__floatsisf>:
    201a:	97 fb       	bst	r25, 7
    201c:	3e f4       	brtc	.+14     	; 0x202c <__floatsisf+0x12>
    201e:	90 95       	com	r25
    2020:	80 95       	com	r24
    2022:	70 95       	com	r23
    2024:	61 95       	neg	r22
    2026:	7f 4f       	sbci	r23, 0xFF	; 255
    2028:	8f 4f       	sbci	r24, 0xFF	; 255
    202a:	9f 4f       	sbci	r25, 0xFF	; 255
    202c:	99 23       	and	r25, r25
    202e:	a9 f0       	breq	.+42     	; 0x205a <__floatsisf+0x40>
    2030:	f9 2f       	mov	r31, r25
    2032:	96 e9       	ldi	r25, 0x96	; 150
    2034:	bb 27       	eor	r27, r27
    2036:	93 95       	inc	r25
    2038:	f6 95       	lsr	r31
    203a:	87 95       	ror	r24
    203c:	77 95       	ror	r23
    203e:	67 95       	ror	r22
    2040:	b7 95       	ror	r27
    2042:	f1 11       	cpse	r31, r1
    2044:	f8 cf       	rjmp	.-16     	; 0x2036 <__floatsisf+0x1c>
    2046:	fa f4       	brpl	.+62     	; 0x2086 <__floatsisf+0x6c>
    2048:	bb 0f       	add	r27, r27
    204a:	11 f4       	brne	.+4      	; 0x2050 <__floatsisf+0x36>
    204c:	60 ff       	sbrs	r22, 0
    204e:	1b c0       	rjmp	.+54     	; 0x2086 <__floatsisf+0x6c>
    2050:	6f 5f       	subi	r22, 0xFF	; 255
    2052:	7f 4f       	sbci	r23, 0xFF	; 255
    2054:	8f 4f       	sbci	r24, 0xFF	; 255
    2056:	9f 4f       	sbci	r25, 0xFF	; 255
    2058:	16 c0       	rjmp	.+44     	; 0x2086 <__floatsisf+0x6c>
    205a:	88 23       	and	r24, r24
    205c:	11 f0       	breq	.+4      	; 0x2062 <__floatsisf+0x48>
    205e:	96 e9       	ldi	r25, 0x96	; 150
    2060:	11 c0       	rjmp	.+34     	; 0x2084 <__floatsisf+0x6a>
    2062:	77 23       	and	r23, r23
    2064:	21 f0       	breq	.+8      	; 0x206e <__floatsisf+0x54>
    2066:	9e e8       	ldi	r25, 0x8E	; 142
    2068:	87 2f       	mov	r24, r23
    206a:	76 2f       	mov	r23, r22
    206c:	05 c0       	rjmp	.+10     	; 0x2078 <__floatsisf+0x5e>
    206e:	66 23       	and	r22, r22
    2070:	71 f0       	breq	.+28     	; 0x208e <__floatsisf+0x74>
    2072:	96 e8       	ldi	r25, 0x86	; 134
    2074:	86 2f       	mov	r24, r22
    2076:	70 e0       	ldi	r23, 0x00	; 0
    2078:	60 e0       	ldi	r22, 0x00	; 0
    207a:	2a f0       	brmi	.+10     	; 0x2086 <__floatsisf+0x6c>
    207c:	9a 95       	dec	r25
    207e:	66 0f       	add	r22, r22
    2080:	77 1f       	adc	r23, r23
    2082:	88 1f       	adc	r24, r24
    2084:	da f7       	brpl	.-10     	; 0x207c <__floatsisf+0x62>
    2086:	88 0f       	add	r24, r24
    2088:	96 95       	lsr	r25
    208a:	87 95       	ror	r24
    208c:	97 f9       	bld	r25, 7
    208e:	08 95       	ret

00002090 <floor>:
    2090:	a9 d0       	rcall	.+338    	; 0x21e4 <__fp_trunc>
    2092:	80 f0       	brcs	.+32     	; 0x20b4 <floor+0x24>
    2094:	9f 37       	cpi	r25, 0x7F	; 127
    2096:	40 f4       	brcc	.+16     	; 0x20a8 <floor+0x18>
    2098:	91 11       	cpse	r25, r1
    209a:	0e f0       	brts	.+2      	; 0x209e <floor+0xe>
    209c:	bb c0       	rjmp	.+374    	; 0x2214 <__fp_szero>
    209e:	60 e0       	ldi	r22, 0x00	; 0
    20a0:	70 e0       	ldi	r23, 0x00	; 0
    20a2:	80 e8       	ldi	r24, 0x80	; 128
    20a4:	9f eb       	ldi	r25, 0xBF	; 191
    20a6:	08 95       	ret
    20a8:	26 f4       	brtc	.+8      	; 0x20b2 <floor+0x22>
    20aa:	1b 16       	cp	r1, r27
    20ac:	61 1d       	adc	r22, r1
    20ae:	71 1d       	adc	r23, r1
    20b0:	81 1d       	adc	r24, r1
    20b2:	2b c0       	rjmp	.+86     	; 0x210a <__fp_mintl>
    20b4:	45 c0       	rjmp	.+138    	; 0x2140 <__fp_mpack>

000020b6 <__fp_cmp>:
    20b6:	99 0f       	add	r25, r25
    20b8:	00 08       	sbc	r0, r0
    20ba:	55 0f       	add	r21, r21
    20bc:	aa 0b       	sbc	r26, r26
    20be:	e0 e8       	ldi	r30, 0x80	; 128
    20c0:	fe ef       	ldi	r31, 0xFE	; 254
    20c2:	16 16       	cp	r1, r22
    20c4:	17 06       	cpc	r1, r23
    20c6:	e8 07       	cpc	r30, r24
    20c8:	f9 07       	cpc	r31, r25
    20ca:	c0 f0       	brcs	.+48     	; 0x20fc <__fp_cmp+0x46>
    20cc:	12 16       	cp	r1, r18
    20ce:	13 06       	cpc	r1, r19
    20d0:	e4 07       	cpc	r30, r20
    20d2:	f5 07       	cpc	r31, r21
    20d4:	98 f0       	brcs	.+38     	; 0x20fc <__fp_cmp+0x46>
    20d6:	62 1b       	sub	r22, r18
    20d8:	73 0b       	sbc	r23, r19
    20da:	84 0b       	sbc	r24, r20
    20dc:	95 0b       	sbc	r25, r21
    20de:	39 f4       	brne	.+14     	; 0x20ee <__fp_cmp+0x38>
    20e0:	0a 26       	eor	r0, r26
    20e2:	61 f0       	breq	.+24     	; 0x20fc <__fp_cmp+0x46>
    20e4:	23 2b       	or	r18, r19
    20e6:	24 2b       	or	r18, r20
    20e8:	25 2b       	or	r18, r21
    20ea:	21 f4       	brne	.+8      	; 0x20f4 <__fp_cmp+0x3e>
    20ec:	08 95       	ret
    20ee:	0a 26       	eor	r0, r26
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <__fp_cmp+0x3e>
    20f2:	a1 40       	sbci	r26, 0x01	; 1
    20f4:	a6 95       	lsr	r26
    20f6:	8f ef       	ldi	r24, 0xFF	; 255
    20f8:	81 1d       	adc	r24, r1
    20fa:	81 1d       	adc	r24, r1
    20fc:	08 95       	ret

000020fe <__fp_inf>:
    20fe:	97 f9       	bld	r25, 7
    2100:	9f 67       	ori	r25, 0x7F	; 127
    2102:	80 e8       	ldi	r24, 0x80	; 128
    2104:	70 e0       	ldi	r23, 0x00	; 0
    2106:	60 e0       	ldi	r22, 0x00	; 0
    2108:	08 95       	ret

0000210a <__fp_mintl>:
    210a:	88 23       	and	r24, r24
    210c:	71 f4       	brne	.+28     	; 0x212a <__fp_mintl+0x20>
    210e:	77 23       	and	r23, r23
    2110:	21 f0       	breq	.+8      	; 0x211a <__fp_mintl+0x10>
    2112:	98 50       	subi	r25, 0x08	; 8
    2114:	87 2b       	or	r24, r23
    2116:	76 2f       	mov	r23, r22
    2118:	07 c0       	rjmp	.+14     	; 0x2128 <__fp_mintl+0x1e>
    211a:	66 23       	and	r22, r22
    211c:	11 f4       	brne	.+4      	; 0x2122 <__fp_mintl+0x18>
    211e:	99 27       	eor	r25, r25
    2120:	0d c0       	rjmp	.+26     	; 0x213c <__fp_mintl+0x32>
    2122:	90 51       	subi	r25, 0x10	; 16
    2124:	86 2b       	or	r24, r22
    2126:	70 e0       	ldi	r23, 0x00	; 0
    2128:	60 e0       	ldi	r22, 0x00	; 0
    212a:	2a f0       	brmi	.+10     	; 0x2136 <__fp_mintl+0x2c>
    212c:	9a 95       	dec	r25
    212e:	66 0f       	add	r22, r22
    2130:	77 1f       	adc	r23, r23
    2132:	88 1f       	adc	r24, r24
    2134:	da f7       	brpl	.-10     	; 0x212c <__fp_mintl+0x22>
    2136:	88 0f       	add	r24, r24
    2138:	96 95       	lsr	r25
    213a:	87 95       	ror	r24
    213c:	97 f9       	bld	r25, 7
    213e:	08 95       	ret

00002140 <__fp_mpack>:
    2140:	9f 3f       	cpi	r25, 0xFF	; 255
    2142:	31 f0       	breq	.+12     	; 0x2150 <__fp_mpack_finite+0xc>

00002144 <__fp_mpack_finite>:
    2144:	91 50       	subi	r25, 0x01	; 1
    2146:	20 f4       	brcc	.+8      	; 0x2150 <__fp_mpack_finite+0xc>
    2148:	87 95       	ror	r24
    214a:	77 95       	ror	r23
    214c:	67 95       	ror	r22
    214e:	b7 95       	ror	r27
    2150:	88 0f       	add	r24, r24
    2152:	91 1d       	adc	r25, r1
    2154:	96 95       	lsr	r25
    2156:	87 95       	ror	r24
    2158:	97 f9       	bld	r25, 7
    215a:	08 95       	ret

0000215c <__fp_nan>:
    215c:	9f ef       	ldi	r25, 0xFF	; 255
    215e:	80 ec       	ldi	r24, 0xC0	; 192
    2160:	08 95       	ret

00002162 <__fp_pscA>:
    2162:	00 24       	eor	r0, r0
    2164:	0a 94       	dec	r0
    2166:	16 16       	cp	r1, r22
    2168:	17 06       	cpc	r1, r23
    216a:	18 06       	cpc	r1, r24
    216c:	09 06       	cpc	r0, r25
    216e:	08 95       	ret

00002170 <__fp_pscB>:
    2170:	00 24       	eor	r0, r0
    2172:	0a 94       	dec	r0
    2174:	12 16       	cp	r1, r18
    2176:	13 06       	cpc	r1, r19
    2178:	14 06       	cpc	r1, r20
    217a:	05 06       	cpc	r0, r21
    217c:	08 95       	ret

0000217e <__fp_round>:
    217e:	09 2e       	mov	r0, r25
    2180:	03 94       	inc	r0
    2182:	00 0c       	add	r0, r0
    2184:	11 f4       	brne	.+4      	; 0x218a <__fp_round+0xc>
    2186:	88 23       	and	r24, r24
    2188:	52 f0       	brmi	.+20     	; 0x219e <__fp_round+0x20>
    218a:	bb 0f       	add	r27, r27
    218c:	40 f4       	brcc	.+16     	; 0x219e <__fp_round+0x20>
    218e:	bf 2b       	or	r27, r31
    2190:	11 f4       	brne	.+4      	; 0x2196 <__fp_round+0x18>
    2192:	60 ff       	sbrs	r22, 0
    2194:	04 c0       	rjmp	.+8      	; 0x219e <__fp_round+0x20>
    2196:	6f 5f       	subi	r22, 0xFF	; 255
    2198:	7f 4f       	sbci	r23, 0xFF	; 255
    219a:	8f 4f       	sbci	r24, 0xFF	; 255
    219c:	9f 4f       	sbci	r25, 0xFF	; 255
    219e:	08 95       	ret

000021a0 <__fp_split3>:
    21a0:	57 fd       	sbrc	r21, 7
    21a2:	90 58       	subi	r25, 0x80	; 128
    21a4:	44 0f       	add	r20, r20
    21a6:	55 1f       	adc	r21, r21
    21a8:	59 f0       	breq	.+22     	; 0x21c0 <__fp_splitA+0x10>
    21aa:	5f 3f       	cpi	r21, 0xFF	; 255
    21ac:	71 f0       	breq	.+28     	; 0x21ca <__fp_splitA+0x1a>
    21ae:	47 95       	ror	r20

000021b0 <__fp_splitA>:
    21b0:	88 0f       	add	r24, r24
    21b2:	97 fb       	bst	r25, 7
    21b4:	99 1f       	adc	r25, r25
    21b6:	61 f0       	breq	.+24     	; 0x21d0 <__fp_splitA+0x20>
    21b8:	9f 3f       	cpi	r25, 0xFF	; 255
    21ba:	79 f0       	breq	.+30     	; 0x21da <__fp_splitA+0x2a>
    21bc:	87 95       	ror	r24
    21be:	08 95       	ret
    21c0:	12 16       	cp	r1, r18
    21c2:	13 06       	cpc	r1, r19
    21c4:	14 06       	cpc	r1, r20
    21c6:	55 1f       	adc	r21, r21
    21c8:	f2 cf       	rjmp	.-28     	; 0x21ae <__fp_split3+0xe>
    21ca:	46 95       	lsr	r20
    21cc:	f1 df       	rcall	.-30     	; 0x21b0 <__fp_splitA>
    21ce:	08 c0       	rjmp	.+16     	; 0x21e0 <__fp_splitA+0x30>
    21d0:	16 16       	cp	r1, r22
    21d2:	17 06       	cpc	r1, r23
    21d4:	18 06       	cpc	r1, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	f1 cf       	rjmp	.-30     	; 0x21bc <__fp_splitA+0xc>
    21da:	86 95       	lsr	r24
    21dc:	71 05       	cpc	r23, r1
    21de:	61 05       	cpc	r22, r1
    21e0:	08 94       	sec
    21e2:	08 95       	ret

000021e4 <__fp_trunc>:
    21e4:	e5 df       	rcall	.-54     	; 0x21b0 <__fp_splitA>
    21e6:	a0 f0       	brcs	.+40     	; 0x2210 <__fp_trunc+0x2c>
    21e8:	be e7       	ldi	r27, 0x7E	; 126
    21ea:	b9 17       	cp	r27, r25
    21ec:	88 f4       	brcc	.+34     	; 0x2210 <__fp_trunc+0x2c>
    21ee:	bb 27       	eor	r27, r27
    21f0:	9f 38       	cpi	r25, 0x8F	; 143
    21f2:	60 f4       	brcc	.+24     	; 0x220c <__fp_trunc+0x28>
    21f4:	16 16       	cp	r1, r22
    21f6:	b1 1d       	adc	r27, r1
    21f8:	67 2f       	mov	r22, r23
    21fa:	78 2f       	mov	r23, r24
    21fc:	88 27       	eor	r24, r24
    21fe:	98 5f       	subi	r25, 0xF8	; 248
    2200:	f7 cf       	rjmp	.-18     	; 0x21f0 <__fp_trunc+0xc>
    2202:	86 95       	lsr	r24
    2204:	77 95       	ror	r23
    2206:	67 95       	ror	r22
    2208:	b1 1d       	adc	r27, r1
    220a:	93 95       	inc	r25
    220c:	96 39       	cpi	r25, 0x96	; 150
    220e:	c8 f3       	brcs	.-14     	; 0x2202 <__fp_trunc+0x1e>
    2210:	08 95       	ret

00002212 <__fp_zero>:
    2212:	e8 94       	clt

00002214 <__fp_szero>:
    2214:	bb 27       	eor	r27, r27
    2216:	66 27       	eor	r22, r22
    2218:	77 27       	eor	r23, r23
    221a:	cb 01       	movw	r24, r22
    221c:	97 f9       	bld	r25, 7
    221e:	08 95       	ret

00002220 <__gesf2>:
    2220:	4a df       	rcall	.-364    	; 0x20b6 <__fp_cmp>
    2222:	08 f4       	brcc	.+2      	; 0x2226 <__gesf2+0x6>
    2224:	8f ef       	ldi	r24, 0xFF	; 255
    2226:	08 95       	ret

00002228 <__mulsf3>:
    2228:	0b d0       	rcall	.+22     	; 0x2240 <__mulsf3x>
    222a:	a9 cf       	rjmp	.-174    	; 0x217e <__fp_round>
    222c:	9a df       	rcall	.-204    	; 0x2162 <__fp_pscA>
    222e:	28 f0       	brcs	.+10     	; 0x223a <__mulsf3+0x12>
    2230:	9f df       	rcall	.-194    	; 0x2170 <__fp_pscB>
    2232:	18 f0       	brcs	.+6      	; 0x223a <__mulsf3+0x12>
    2234:	95 23       	and	r25, r21
    2236:	09 f0       	breq	.+2      	; 0x223a <__mulsf3+0x12>
    2238:	62 cf       	rjmp	.-316    	; 0x20fe <__fp_inf>
    223a:	90 cf       	rjmp	.-224    	; 0x215c <__fp_nan>
    223c:	11 24       	eor	r1, r1
    223e:	ea cf       	rjmp	.-44     	; 0x2214 <__fp_szero>

00002240 <__mulsf3x>:
    2240:	af df       	rcall	.-162    	; 0x21a0 <__fp_split3>
    2242:	a0 f3       	brcs	.-24     	; 0x222c <__mulsf3+0x4>

00002244 <__mulsf3_pse>:
    2244:	95 9f       	mul	r25, r21
    2246:	d1 f3       	breq	.-12     	; 0x223c <__mulsf3+0x14>
    2248:	95 0f       	add	r25, r21
    224a:	50 e0       	ldi	r21, 0x00	; 0
    224c:	55 1f       	adc	r21, r21
    224e:	62 9f       	mul	r22, r18
    2250:	f0 01       	movw	r30, r0
    2252:	72 9f       	mul	r23, r18
    2254:	bb 27       	eor	r27, r27
    2256:	f0 0d       	add	r31, r0
    2258:	b1 1d       	adc	r27, r1
    225a:	63 9f       	mul	r22, r19
    225c:	aa 27       	eor	r26, r26
    225e:	f0 0d       	add	r31, r0
    2260:	b1 1d       	adc	r27, r1
    2262:	aa 1f       	adc	r26, r26
    2264:	64 9f       	mul	r22, r20
    2266:	66 27       	eor	r22, r22
    2268:	b0 0d       	add	r27, r0
    226a:	a1 1d       	adc	r26, r1
    226c:	66 1f       	adc	r22, r22
    226e:	82 9f       	mul	r24, r18
    2270:	22 27       	eor	r18, r18
    2272:	b0 0d       	add	r27, r0
    2274:	a1 1d       	adc	r26, r1
    2276:	62 1f       	adc	r22, r18
    2278:	73 9f       	mul	r23, r19
    227a:	b0 0d       	add	r27, r0
    227c:	a1 1d       	adc	r26, r1
    227e:	62 1f       	adc	r22, r18
    2280:	83 9f       	mul	r24, r19
    2282:	a0 0d       	add	r26, r0
    2284:	61 1d       	adc	r22, r1
    2286:	22 1f       	adc	r18, r18
    2288:	74 9f       	mul	r23, r20
    228a:	33 27       	eor	r19, r19
    228c:	a0 0d       	add	r26, r0
    228e:	61 1d       	adc	r22, r1
    2290:	23 1f       	adc	r18, r19
    2292:	84 9f       	mul	r24, r20
    2294:	60 0d       	add	r22, r0
    2296:	21 1d       	adc	r18, r1
    2298:	82 2f       	mov	r24, r18
    229a:	76 2f       	mov	r23, r22
    229c:	6a 2f       	mov	r22, r26
    229e:	11 24       	eor	r1, r1
    22a0:	9f 57       	subi	r25, 0x7F	; 127
    22a2:	50 40       	sbci	r21, 0x00	; 0
    22a4:	8a f0       	brmi	.+34     	; 0x22c8 <__mulsf3_pse+0x84>
    22a6:	e1 f0       	breq	.+56     	; 0x22e0 <__mulsf3_pse+0x9c>
    22a8:	88 23       	and	r24, r24
    22aa:	4a f0       	brmi	.+18     	; 0x22be <__mulsf3_pse+0x7a>
    22ac:	ee 0f       	add	r30, r30
    22ae:	ff 1f       	adc	r31, r31
    22b0:	bb 1f       	adc	r27, r27
    22b2:	66 1f       	adc	r22, r22
    22b4:	77 1f       	adc	r23, r23
    22b6:	88 1f       	adc	r24, r24
    22b8:	91 50       	subi	r25, 0x01	; 1
    22ba:	50 40       	sbci	r21, 0x00	; 0
    22bc:	a9 f7       	brne	.-22     	; 0x22a8 <__mulsf3_pse+0x64>
    22be:	9e 3f       	cpi	r25, 0xFE	; 254
    22c0:	51 05       	cpc	r21, r1
    22c2:	70 f0       	brcs	.+28     	; 0x22e0 <__mulsf3_pse+0x9c>
    22c4:	1c cf       	rjmp	.-456    	; 0x20fe <__fp_inf>
    22c6:	a6 cf       	rjmp	.-180    	; 0x2214 <__fp_szero>
    22c8:	5f 3f       	cpi	r21, 0xFF	; 255
    22ca:	ec f3       	brlt	.-6      	; 0x22c6 <__mulsf3_pse+0x82>
    22cc:	98 3e       	cpi	r25, 0xE8	; 232
    22ce:	dc f3       	brlt	.-10     	; 0x22c6 <__mulsf3_pse+0x82>
    22d0:	86 95       	lsr	r24
    22d2:	77 95       	ror	r23
    22d4:	67 95       	ror	r22
    22d6:	b7 95       	ror	r27
    22d8:	f7 95       	ror	r31
    22da:	e7 95       	ror	r30
    22dc:	9f 5f       	subi	r25, 0xFF	; 255
    22de:	c1 f7       	brne	.-16     	; 0x22d0 <__mulsf3_pse+0x8c>
    22e0:	fe 2b       	or	r31, r30
    22e2:	88 0f       	add	r24, r24
    22e4:	91 1d       	adc	r25, r1
    22e6:	96 95       	lsr	r25
    22e8:	87 95       	ror	r24
    22ea:	97 f9       	bld	r25, 7
    22ec:	08 95       	ret

000022ee <__divmodhi4>:
    22ee:	97 fb       	bst	r25, 7
    22f0:	07 2e       	mov	r0, r23
    22f2:	16 f4       	brtc	.+4      	; 0x22f8 <__divmodhi4+0xa>
    22f4:	00 94       	com	r0
    22f6:	06 d0       	rcall	.+12     	; 0x2304 <__divmodhi4_neg1>
    22f8:	77 fd       	sbrc	r23, 7
    22fa:	08 d0       	rcall	.+16     	; 0x230c <__divmodhi4_neg2>
    22fc:	0b d0       	rcall	.+22     	; 0x2314 <__udivmodhi4>
    22fe:	07 fc       	sbrc	r0, 7
    2300:	05 d0       	rcall	.+10     	; 0x230c <__divmodhi4_neg2>
    2302:	3e f4       	brtc	.+14     	; 0x2312 <__divmodhi4_exit>

00002304 <__divmodhi4_neg1>:
    2304:	90 95       	com	r25
    2306:	81 95       	neg	r24
    2308:	9f 4f       	sbci	r25, 0xFF	; 255
    230a:	08 95       	ret

0000230c <__divmodhi4_neg2>:
    230c:	70 95       	com	r23
    230e:	61 95       	neg	r22
    2310:	7f 4f       	sbci	r23, 0xFF	; 255

00002312 <__divmodhi4_exit>:
    2312:	08 95       	ret

00002314 <__udivmodhi4>:
    2314:	aa 1b       	sub	r26, r26
    2316:	bb 1b       	sub	r27, r27
    2318:	51 e1       	ldi	r21, 0x11	; 17
    231a:	07 c0       	rjmp	.+14     	; 0x232a <__udivmodhi4_ep>

0000231c <__udivmodhi4_loop>:
    231c:	aa 1f       	adc	r26, r26
    231e:	bb 1f       	adc	r27, r27
    2320:	a6 17       	cp	r26, r22
    2322:	b7 07       	cpc	r27, r23
    2324:	10 f0       	brcs	.+4      	; 0x232a <__udivmodhi4_ep>
    2326:	a6 1b       	sub	r26, r22
    2328:	b7 0b       	sbc	r27, r23

0000232a <__udivmodhi4_ep>:
    232a:	88 1f       	adc	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	5a 95       	dec	r21
    2330:	a9 f7       	brne	.-22     	; 0x231c <__udivmodhi4_loop>
    2332:	80 95       	com	r24
    2334:	90 95       	com	r25
    2336:	bc 01       	movw	r22, r24
    2338:	cd 01       	movw	r24, r26
    233a:	08 95       	ret

0000233c <_exit>:
    233c:	f8 94       	cli

0000233e <__stop_program>:
    233e:	ff cf       	rjmp	.-2      	; 0x233e <__stop_program>
