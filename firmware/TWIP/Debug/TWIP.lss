
TWIP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b6  00800100  000021a4  00002238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a8  008003b6  008003b6  000024ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00002560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000467c  00000000  00000000  000026a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001701  00000000  00000000  00006d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002eef  00000000  00000000  0000841d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a10  00000000  00000000  0000b30c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008dbc  00000000  00000000  0000bd1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025d1  00000000  00000000  00014ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000170a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000369d  00000000  00000000  000170e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	4e c0       	rjmp	.+156    	; 0xa2 <__bad_interrupt>
       6:	00 00       	nop
       8:	4c c0       	rjmp	.+152    	; 0xa2 <__bad_interrupt>
       a:	00 00       	nop
       c:	4a c0       	rjmp	.+148    	; 0xa2 <__bad_interrupt>
       e:	00 00       	nop
      10:	48 c0       	rjmp	.+144    	; 0xa2 <__bad_interrupt>
      12:	00 00       	nop
      14:	46 c0       	rjmp	.+140    	; 0xa2 <__bad_interrupt>
      16:	00 00       	nop
      18:	44 c0       	rjmp	.+136    	; 0xa2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6e c7       	rjmp	.+3804   	; 0xefa <__vector_7>
      1e:	00 00       	nop
      20:	40 c0       	rjmp	.+128    	; 0xa2 <__bad_interrupt>
      22:	00 00       	nop
      24:	3e c0       	rjmp	.+124    	; 0xa2 <__bad_interrupt>
      26:	00 00       	nop
      28:	3c c0       	rjmp	.+120    	; 0xa2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3a c0       	rjmp	.+116    	; 0xa2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	38 c0       	rjmp	.+112    	; 0xa2 <__bad_interrupt>
      32:	00 00       	nop
      34:	36 c0       	rjmp	.+108    	; 0xa2 <__bad_interrupt>
      36:	00 00       	nop
      38:	34 c0       	rjmp	.+104    	; 0xa2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	32 c0       	rjmp	.+100    	; 0xa2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	30 c0       	rjmp	.+96     	; 0xa2 <__bad_interrupt>
      42:	00 00       	nop
      44:	2e c0       	rjmp	.+92     	; 0xa2 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__vector_18>
      4c:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__vector_19>
      50:	28 c0       	rjmp	.+80     	; 0xa2 <__bad_interrupt>
      52:	00 00       	nop
      54:	26 c0       	rjmp	.+76     	; 0xa2 <__bad_interrupt>
      56:	00 00       	nop
      58:	24 c0       	rjmp	.+72     	; 0xa2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	22 c0       	rjmp	.+68     	; 0xa2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__vector_24>
      64:	1e c0       	rjmp	.+60     	; 0xa2 <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ea       	ldi	r30, 0xA4	; 164
      7c:	f1 e2       	ldi	r31, 0x21	; 33
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3b       	cpi	r26, 0xB6	; 182
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a6 eb       	ldi	r26, 0xB6	; 182
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 35       	cpi	r26, 0x5E	; 94
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <main>
      9e:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	ae cf       	rjmp	.-164    	; 0x0 <__vectors>

000000a4 <BNO_request_angle>:
	I2C_stat_t _stat_r, _stat_w;
} _local;


void BNO_request_angle(I2C_stat_t *handle_read_ptr)
{
      a4:	0f 93       	push	r16
      a6:	1f 93       	push	r17
      a8:	cf 93       	push	r28
      aa:	df 93       	push	r29
      ac:	ec 01       	movw	r28, r24
 * Enqueue a write task.
 * Similar to the read operation.
 */
static inline bool I2C_write(uint8_t addr, uint8_t *buff, uint16_t len, volatile I2C_stat_t *status)
{
	return _I2C_enqueue_task(false, addr, buff, len, status);
      ae:	07 ec       	ldi	r16, 0xC7	; 199
      b0:	13 e0       	ldi	r17, 0x03	; 3
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	45 e0       	ldi	r20, 0x05	; 5
      b8:	51 e0       	ldi	r21, 0x01	; 1
      ba:	68 e2       	ldi	r22, 0x28	; 40
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 1f 0c 	call	0x183e	; 0x183e <_I2C_enqueue_task>
	// request heading, pitch, roll
	while (!I2C_write(CONF_BNO055_ADDRESS, &_addr_angle, 1, &_local._stat_w))
      c2:	88 23       	and	r24, r24
      c4:	a1 f3       	breq	.-24     	; 0xae <BNO_request_angle+0xa>
 * Will write operation status in 'status' argument
 * as the transmission unfolds
 */
static inline bool I2C_read(uint8_t addr, uint8_t *buff, uint16_t max_len, volatile I2C_stat_t *status)
{
	return _I2C_enqueue_task(true, addr, buff, max_len, status);
      c6:	8e 01       	movw	r16, r28
      c8:	26 e0       	ldi	r18, 0x06	; 6
      ca:	30 e0       	ldi	r19, 0x00	; 0
      cc:	4f eb       	ldi	r20, 0xBF	; 191
      ce:	53 e0       	ldi	r21, 0x03	; 3
      d0:	68 e2       	ldi	r22, 0x28	; 40
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	0e 94 1f 0c 	call	0x183e	; 0x183e <_I2C_enqueue_task>
		; // retry until successful
	while (!I2C_read(CONF_BNO055_ADDRESS, _local.angle_buff, 6, handle_read_ptr))
      d8:	88 23       	and	r24, r24
      da:	a9 f3       	breq	.-22     	; 0xc6 <BNO_request_angle+0x22>
		; // retry until successful
}
      dc:	df 91       	pop	r29
      de:	cf 91       	pop	r28
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	08 95       	ret

000000e6 <BNO_request_calib>:

void BNO_request_calib(I2C_stat_t *handle_read_ptr)
{
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
 * Enqueue a write task.
 * Similar to the read operation.
 */
static inline bool I2C_write(uint8_t addr, uint8_t *buff, uint16_t len, volatile I2C_stat_t *status)
{
	return _I2C_enqueue_task(false, addr, buff, len, status);
      ea:	07 ec       	ldi	r16, 0xC7	; 199
      ec:	13 e0       	ldi	r17, 0x03	; 3
      ee:	21 e0       	ldi	r18, 0x01	; 1
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	44 e0       	ldi	r20, 0x04	; 4
      f4:	51 e0       	ldi	r21, 0x01	; 1
      f6:	68 e2       	ldi	r22, 0x28	; 40
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	0e 94 1f 0c 	call	0x183e	; 0x183e <_I2C_enqueue_task>
	// request calibration state
	while (!I2C_write(CONF_BNO055_ADDRESS, &_addr_calib, 1, &_local._stat_w))
      fe:	88 23       	and	r24, r24
     100:	a1 f3       	breq	.-24     	; 0xea <BNO_request_calib+0x4>
 * Will write operation status in 'status' argument
 * as the transmission unfolds
 */
static inline bool I2C_read(uint8_t addr, uint8_t *buff, uint16_t max_len, volatile I2C_stat_t *status)
{
	return _I2C_enqueue_task(true, addr, buff, max_len, status);
     102:	06 ec       	ldi	r16, 0xC6	; 198
     104:	13 e0       	ldi	r17, 0x03	; 3
     106:	21 e0       	ldi	r18, 0x01	; 1
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	45 ec       	ldi	r20, 0xC5	; 197
     10c:	53 e0       	ldi	r21, 0x03	; 3
     10e:	68 e2       	ldi	r22, 0x28	; 40
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	0e 94 1f 0c 	call	0x183e	; 0x183e <_I2C_enqueue_task>
		; // retry until successful
	while (!I2C_read(CONF_BNO055_ADDRESS, &(_local.calib_state), 1, &_local._stat_r))
     116:	88 23       	and	r24, r24
     118:	a1 f3       	breq	.-24     	; 0x102 <BNO_request_calib+0x1c>
		; // retry until successful	
}
     11a:	1f 91       	pop	r17
     11c:	0f 91       	pop	r16
     11e:	08 95       	ret

00000120 <BNO_angle>:
		UART_write(buff[i]);
	}
}

BNO_angle_t BNO_angle(void)
{
     120:	7f 92       	push	r7
     122:	8f 92       	push	r8
     124:	9f 92       	push	r9
     126:	af 92       	push	r10
     128:	bf 92       	push	r11
     12a:	cf 92       	push	r12
     12c:	df 92       	push	r13
     12e:	ef 92       	push	r14
     130:	ff 92       	push	r15
     132:	0f 93       	push	r16
     134:	1f 93       	push	r17
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	ec 01       	movw	r28, r24
	BNO_angle_t angle;
	float fx, fy, fz;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     13c:	7f b6       	in	r7, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     13e:	f8 94       	cli
     140:	0e eb       	ldi	r16, 0xBE	; 190
     142:	13 e0       	ldi	r17, 0x03	; 3
		// but the angle.x (and .y and .z) will store the angle * 1024
		// so: raw_angle / 16 * 1024 = raw_angle * 64
		
		
		// real angle (float)
		angle.x = (fx / 16.0f);
     144:	f8 01       	movw	r30, r16
     146:	61 81       	ldd	r22, Z+1	; 0x01
     148:	72 81       	ldd	r23, Z+2	; 0x02
     14a:	07 2e       	mov	r0, r23
     14c:	00 0c       	add	r0, r0
     14e:	88 0b       	sbc	r24, r24
     150:	99 0b       	sbc	r25, r25
     152:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__floatsisf>
     156:	20 e0       	ldi	r18, 0x00	; 0
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	40 e8       	ldi	r20, 0x80	; 128
     15c:	5d e3       	ldi	r21, 0x3D	; 61
     15e:	0e 94 46 10 	call	0x208c	; 0x208c <__mulsf3>
     162:	4b 01       	movw	r8, r22
     164:	5c 01       	movw	r10, r24
		angle.y = (fy / 16.0f);
     166:	f8 01       	movw	r30, r16
     168:	63 81       	ldd	r22, Z+3	; 0x03
     16a:	74 81       	ldd	r23, Z+4	; 0x04
     16c:	07 2e       	mov	r0, r23
     16e:	00 0c       	add	r0, r0
     170:	88 0b       	sbc	r24, r24
     172:	99 0b       	sbc	r25, r25
     174:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__floatsisf>
     178:	20 e0       	ldi	r18, 0x00	; 0
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	40 e8       	ldi	r20, 0x80	; 128
     17e:	5d e3       	ldi	r21, 0x3D	; 61
     180:	0e 94 46 10 	call	0x208c	; 0x208c <__mulsf3>
     184:	6b 01       	movw	r12, r22
     186:	7c 01       	movw	r14, r24
		angle.z = (fz / 16.0f);
     188:	f8 01       	movw	r30, r16
     18a:	65 81       	ldd	r22, Z+5	; 0x05
     18c:	76 81       	ldd	r23, Z+6	; 0x06
     18e:	07 2e       	mov	r0, r23
     190:	00 0c       	add	r0, r0
     192:	88 0b       	sbc	r24, r24
     194:	99 0b       	sbc	r25, r25
     196:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__floatsisf>
     19a:	20 e0       	ldi	r18, 0x00	; 0
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	40 e8       	ldi	r20, 0x80	; 128
     1a0:	5d e3       	ldi	r21, 0x3D	; 61
     1a2:	0e 94 46 10 	call	0x208c	; 0x208c <__mulsf3>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1a6:	7f be       	out	0x3f, r7	; 63
	}
	
	return angle;
     1a8:	88 82       	st	Y, r8
     1aa:	99 82       	std	Y+1, r9	; 0x01
     1ac:	aa 82       	std	Y+2, r10	; 0x02
     1ae:	bb 82       	std	Y+3, r11	; 0x03
     1b0:	cc 82       	std	Y+4, r12	; 0x04
     1b2:	dd 82       	std	Y+5, r13	; 0x05
     1b4:	ee 82       	std	Y+6, r14	; 0x06
     1b6:	ff 82       	std	Y+7, r15	; 0x07
     1b8:	68 87       	std	Y+8, r22	; 0x08
     1ba:	79 87       	std	Y+9, r23	; 0x09
     1bc:	8a 87       	std	Y+10, r24	; 0x0a
     1be:	9b 87       	std	Y+11, r25	; 0x0b
}
     1c0:	ce 01       	movw	r24, r28
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	bf 90       	pop	r11
     1d4:	af 90       	pop	r10
     1d6:	9f 90       	pop	r9
     1d8:	8f 90       	pop	r8
     1da:	7f 90       	pop	r7
     1dc:	08 95       	ret

000001de <BNO_calib>:

BNO_calib_t BNO_calib(void)
{
	BNO_calib_t calib;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     1de:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1e0:	f8 94       	cli
	{
		// calibration data
		calib.cal_sys = (_local.calib_state >> 6u) & 3u;
     1e2:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <_local+0x7>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1e6:	8f bf       	out	0x3f, r24	; 63
		calib.cal_gyro = (_local.calib_state >> 4u) & 3u;
		calib.cal_acc = (_local.calib_state >> 2u) & 3u;
		calib.cal_mag = (_local.calib_state) & 3u;	
	}
	
	return calib;
     1e8:	69 2f       	mov	r22, r25
     1ea:	62 95       	swap	r22
     1ec:	63 70       	andi	r22, 0x03	; 3
     1ee:	79 2f       	mov	r23, r25
     1f0:	76 95       	lsr	r23
     1f2:	76 95       	lsr	r23
     1f4:	73 70       	andi	r23, 0x03	; 3
}
     1f6:	89 2f       	mov	r24, r25
     1f8:	83 70       	andi	r24, 0x03	; 3
     1fa:	92 95       	swap	r25
     1fc:	96 95       	lsr	r25
     1fe:	96 95       	lsr	r25
     200:	93 70       	andi	r25, 0x03	; 3
     202:	08 95       	ret

00000204 <BNO_read_reg>:


int32_t BNO_read_reg(bno055_reg_t reg, uint8_t *data, uint8_t size)
{
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ff 92       	push	r15
     20a:	0f 93       	push	r16
     20c:	1f 93       	push	r17
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	00 d0       	rcall	.+0      	; 0x214 <BNO_read_reg+0x10>
     214:	1f 92       	push	r1
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
     21a:	8b 83       	std	Y+3, r24	; 0x03
     21c:	6b 01       	movw	r12, r22
     21e:	f4 2e       	mov	r15, r20
 * Enqueue a write task.
 * Similar to the read operation.
 */
static inline bool I2C_write(uint8_t addr, uint8_t *buff, uint16_t len, volatile I2C_stat_t *status)
{
	return _I2C_enqueue_task(false, addr, buff, len, status);
     220:	8e 01       	movw	r16, r28
     222:	0e 5f       	subi	r16, 0xFE	; 254
     224:	1f 4f       	sbci	r17, 0xFF	; 255
     226:	21 e0       	ldi	r18, 0x01	; 1
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	ae 01       	movw	r20, r28
     22c:	4d 5f       	subi	r20, 0xFD	; 253
     22e:	5f 4f       	sbci	r21, 0xFF	; 255
     230:	68 e2       	ldi	r22, 0x28	; 40
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	0e 94 1f 0c 	call	0x183e	; 0x183e <_I2C_enqueue_task>
	volatile I2C_stat_t status_w, status_r;
	bool enq;
	
	// write reg address
	enq = I2C_write(CONF_BNO055_ADDRESS, (uint8_t*)&reg, 1, &status_w);
	if (!enq) {
     238:	88 23       	and	r24, r24
     23a:	e9 f0       	breq	.+58     	; 0x276 <BNO_read_reg+0x72>
		return -1;
	}
	
	while (I2C_IN_PROGRESS == status_w) 
     23c:	8a 81       	ldd	r24, Y+2	; 0x02
     23e:	83 30       	cpi	r24, 0x03	; 3
     240:	e9 f3       	breq	.-6      	; 0x23c <BNO_read_reg+0x38>
		;
		
	if (I2C_SUCCESS != status_w) {
     242:	8a 81       	ldd	r24, Y+2	; 0x02
     244:	88 23       	and	r24, r24
     246:	11 f0       	breq	.+4      	; 0x24c <BNO_read_reg+0x48>
		return status_w;
     248:	6a 81       	ldd	r22, Y+2	; 0x02
     24a:	11 c0       	rjmp	.+34     	; 0x26e <BNO_read_reg+0x6a>
 * Will write operation status in 'status' argument
 * as the transmission unfolds
 */
static inline bool I2C_read(uint8_t addr, uint8_t *buff, uint16_t max_len, volatile I2C_stat_t *status)
{
	return _I2C_enqueue_task(true, addr, buff, max_len, status);
     24c:	2f 2d       	mov	r18, r15
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	8e 01       	movw	r16, r28
     252:	0f 5f       	subi	r16, 0xFF	; 255
     254:	1f 4f       	sbci	r17, 0xFF	; 255
     256:	a6 01       	movw	r20, r12
     258:	68 e2       	ldi	r22, 0x28	; 40
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	0e 94 1f 0c 	call	0x183e	; 0x183e <_I2C_enqueue_task>
	}
	
	// read reg
	I2C_read(CONF_BNO055_ADDRESS, data, size, &status_r);
	// wait for write and read to complete
	while (I2C_IN_PROGRESS == status_r)
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	83 30       	cpi	r24, 0x03	; 3
     264:	e9 f3       	breq	.-6      	; 0x260 <BNO_read_reg+0x5c>
		;
	// check Read status
	if (I2C_SUCCESS != status_r) {
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	88 23       	and	r24, r24
     26a:	49 f0       	breq	.+18     	; 0x27e <BNO_read_reg+0x7a>
		return status_r;
     26c:	69 81       	ldd	r22, Y+1	; 0x01
     26e:	70 e0       	ldi	r23, 0x00	; 0
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	07 c0       	rjmp	.+14     	; 0x284 <BNO_read_reg+0x80>
	bool enq;
	
	// write reg address
	enq = I2C_write(CONF_BNO055_ADDRESS, (uint8_t*)&reg, 1, &status_w);
	if (!enq) {
		return -1;
     276:	6f ef       	ldi	r22, 0xFF	; 255
     278:	7f ef       	ldi	r23, 0xFF	; 255
     27a:	cb 01       	movw	r24, r22
     27c:	03 c0       	rjmp	.+6      	; 0x284 <BNO_read_reg+0x80>
	if (I2C_SUCCESS != status_r) {
		return status_r;
	}
	
	// (value already written to destination)
	return I2C_SUCCESS;
     27e:	60 e0       	ldi	r22, 0x00	; 0
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	cb 01       	movw	r24, r22
}
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	ff 90       	pop	r15
     294:	df 90       	pop	r13
     296:	cf 90       	pop	r12
     298:	08 95       	ret

0000029a <BNO_read_calib_levels>:
		; // retry until successful	
}


void BNO_read_calib_levels(uint8_t *lvl_sys, uint8_t *lvl_gyro, uint8_t *lvl_acc, uint8_t *lvl_mag)
{
     29a:	af 92       	push	r10
     29c:	bf 92       	push	r11
     29e:	cf 92       	push	r12
     2a0:	df 92       	push	r13
     2a2:	ef 92       	push	r14
     2a4:	ff 92       	push	r15
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	1f 92       	push	r1
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	5c 01       	movw	r10, r24
     2b6:	6b 01       	movw	r12, r22
     2b8:	7a 01       	movw	r14, r20
     2ba:	89 01       	movw	r16, r18
	uint8_t data;
	
	// read calibration register
	BNO_read_reg(BNO055_CALIB_STAT_ADDR, &data, 1);
     2bc:	41 e0       	ldi	r20, 0x01	; 1
     2be:	be 01       	movw	r22, r28
     2c0:	6f 5f       	subi	r22, 0xFF	; 255
     2c2:	7f 4f       	sbci	r23, 0xFF	; 255
     2c4:	85 e3       	ldi	r24, 0x35	; 53
     2c6:	9e df       	rcall	.-196    	; 0x204 <BNO_read_reg>
	
	*lvl_sys = (data >> 6u) & 3u;
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	98 2f       	mov	r25, r24
     2cc:	92 95       	swap	r25
     2ce:	96 95       	lsr	r25
     2d0:	96 95       	lsr	r25
     2d2:	93 70       	andi	r25, 0x03	; 3
     2d4:	f5 01       	movw	r30, r10
     2d6:	90 83       	st	Z, r25
	*lvl_gyro = (data >> 4u) & 3u;
     2d8:	98 2f       	mov	r25, r24
     2da:	92 95       	swap	r25
     2dc:	93 70       	andi	r25, 0x03	; 3
     2de:	f6 01       	movw	r30, r12
     2e0:	90 83       	st	Z, r25
	*lvl_acc = (data >> 2u) & 3u;
     2e2:	98 2f       	mov	r25, r24
     2e4:	96 95       	lsr	r25
     2e6:	96 95       	lsr	r25
     2e8:	93 70       	andi	r25, 0x03	; 3
     2ea:	f7 01       	movw	r30, r14
     2ec:	90 83       	st	Z, r25
	*lvl_mag = (data) & 3u;
     2ee:	83 70       	andi	r24, 0x03	; 3
     2f0:	f8 01       	movw	r30, r16
     2f2:	80 83       	st	Z, r24
}
     2f4:	0f 90       	pop	r0
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	ff 90       	pop	r15
     300:	ef 90       	pop	r14
     302:	df 90       	pop	r13
     304:	cf 90       	pop	r12
     306:	bf 90       	pop	r11
     308:	af 90       	pop	r10
     30a:	08 95       	ret

0000030c <BNO_read_print_cal>:

void BNO_read_print_cal(void)
{
     30c:	cf 92       	push	r12
     30e:	df 92       	push	r13
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	66 97       	sbiw	r28, 0x16	; 22
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	de bf       	out	0x3e, r29	; 62
     326:	0f be       	out	0x3f, r0	; 63
     328:	cd bf       	out	0x3d, r28	; 61
     32a:	ce 01       	movw	r24, r28
     32c:	01 96       	adiw	r24, 0x01	; 1
     32e:	7c 01       	movw	r14, r24
	uint8_t buff[22];
	int i;
	bno055_reg_t reg;
	
	for (reg = ACCEL_OFFSET_X_LSB_ADDR, i = 0;
     330:	15 e5       	ldi	r17, 0x55	; 85
	reg <= MAG_RADIUS_MSB_ADDR;
	reg ++, i ++) {
		// read reg from BNO055
		BNO_read_reg(reg, buff + i, 1);
     332:	41 e0       	ldi	r20, 0x01	; 1
     334:	b7 01       	movw	r22, r14
     336:	81 2f       	mov	r24, r17
     338:	65 df       	rcall	.-310    	; 0x204 <BNO_read_reg>
		// write raw data to UART 
		UART_write(buff[i]);
     33a:	f7 01       	movw	r30, r14
     33c:	80 81       	ld	r24, Z
     33e:	9f ef       	ldi	r25, 0xFF	; 255
     340:	e9 1a       	sub	r14, r25
     342:	f9 0a       	sbc	r15, r25
     344:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <UART_write>
	int i;
	bno055_reg_t reg;
	
	for (reg = ACCEL_OFFSET_X_LSB_ADDR, i = 0;
	reg <= MAG_RADIUS_MSB_ADDR;
	reg ++, i ++) {
     348:	1f 5f       	subi	r17, 0xFF	; 255
{
	uint8_t buff[22];
	int i;
	bno055_reg_t reg;
	
	for (reg = ACCEL_OFFSET_X_LSB_ADDR, i = 0;
     34a:	1b 36       	cpi	r17, 0x6B	; 107
     34c:	91 f7       	brne	.-28     	; 0x332 <BNO_read_print_cal+0x26>
		// read reg from BNO055
		BNO_read_reg(reg, buff + i, 1);
		// write raw data to UART 
		UART_write(buff[i]);
	}
}
     34e:	66 96       	adiw	r28, 0x16	; 22
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	f8 94       	cli
     354:	de bf       	out	0x3e, r29	; 62
     356:	0f be       	out	0x3f, r0	; 63
     358:	cd bf       	out	0x3d, r28	; 61
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	ff 90       	pop	r15
     362:	ef 90       	pop	r14
     364:	df 90       	pop	r13
     366:	cf 90       	pop	r12
     368:	08 95       	ret

0000036a <BNO_write_reg>:
	// (value already written to destination)
	return I2C_SUCCESS;
}

int32_t BNO_write_reg(bno055_reg_t reg, uint8_t data)
{
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	00 d0       	rcall	.+0      	; 0x374 <BNO_write_reg+0xa>
     374:	1f 92       	push	r1
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
	volatile I2C_stat_t status_w;
	uint8_t buff[2];
	
	buff[0] = reg;
     37a:	89 83       	std	Y+1, r24	; 0x01
	buff[1] = data;
     37c:	6a 83       	std	Y+2, r22	; 0x02
 * Enqueue a write task.
 * Similar to the read operation.
 */
static inline bool I2C_write(uint8_t addr, uint8_t *buff, uint16_t len, volatile I2C_stat_t *status)
{
	return _I2C_enqueue_task(false, addr, buff, len, status);
     37e:	8e 01       	movw	r16, r28
     380:	0d 5f       	subi	r16, 0xFD	; 253
     382:	1f 4f       	sbci	r17, 0xFF	; 255
     384:	22 e0       	ldi	r18, 0x02	; 2
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	ae 01       	movw	r20, r28
     38a:	4f 5f       	subi	r20, 0xFF	; 255
     38c:	5f 4f       	sbci	r21, 0xFF	; 255
     38e:	68 e2       	ldi	r22, 0x28	; 40
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	0e 94 1f 0c 	call	0x183e	; 0x183e <_I2C_enqueue_task>
	
	// write reg address
	I2C_write(CONF_BNO055_ADDRESS, buff, 2, &status_w);
	// wait for write to complete
	while (I2C_IN_PROGRESS == status_w)
     396:	8b 81       	ldd	r24, Y+3	; 0x03
     398:	83 30       	cpi	r24, 0x03	; 3
     39a:	e9 f3       	breq	.-6      	; 0x396 <BNO_write_reg+0x2c>
		;
	
	return status_w;
     39c:	6b 81       	ldd	r22, Y+3	; 0x03
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
}
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	08 95       	ret

000003b4 <BNO_init>:




int32_t BNO_init(bool block_on_failure)
{
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	1f 92       	push	r1
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	18 2f       	mov	r17, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c2:	2f ef       	ldi	r18, 0xFF	; 255
     3c4:	83 ed       	ldi	r24, 0xD3	; 211
     3c6:	90 e3       	ldi	r25, 0x30	; 48
     3c8:	21 50       	subi	r18, 0x01	; 1
     3ca:	80 40       	sbci	r24, 0x00	; 0
     3cc:	90 40       	sbci	r25, 0x00	; 0
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <BNO_init+0x14>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <BNO_init+0x1e>
     3d2:	00 00       	nop
  
	// wait for boot
	_delay_ms(1000);
	
	// make sure the ADDRESS is correct and the sensor is present
	BNO_read_reg(BNO055_CHIP_ID_ADDR, &id, 1);	
     3d4:	41 e0       	ldi	r20, 0x01	; 1
     3d6:	be 01       	movw	r22, r28
     3d8:	6f 5f       	subi	r22, 0xFF	; 255
     3da:	7f 4f       	sbci	r23, 0xFF	; 255
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	12 df       	rcall	.-476    	; 0x204 <BNO_read_reg>
	if(id != BNO055_ID) {
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	80 3a       	cpi	r24, 0xA0	; 160
     3e4:	31 f0       	breq	.+12     	; 0x3f2 <BNO_init+0x3e>
	_delay_ms(25);

	return I2C_SUCCESS;

_gyro_init_err:
	if (block_on_failure) {
     3e6:	11 11       	cpse	r17, r1
     3e8:	2f c0       	rjmp	.+94     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		IND_set_mode(IND_ERROR);
		while (1)
			;
	} 
	
	return error;
     3ea:	6f ef       	ldi	r22, 0xFF	; 255
     3ec:	7f ef       	ldi	r23, 0xFF	; 255
     3ee:	cb 01       	movw	r24, r22
		goto _gyro_init_err;
	}

	// Switch to config mode
	// and wait for switch
	BNO_write_reg(BNO055_OPR_MODE_ADDR, OPERATION_MODE_CONFIG);
     3f0:	2f c0       	rjmp	.+94     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	8d e3       	ldi	r24, 0x3D	; 61
     3f6:	b9 df       	rcall	.-142    	; 0x36a <BNO_write_reg>
     3f8:	2f e7       	ldi	r18, 0x7F	; 127
     3fa:	88 e3       	ldi	r24, 0x38	; 56
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	21 50       	subi	r18, 0x01	; 1
     400:	80 40       	sbci	r24, 0x00	; 0
     402:	90 40       	sbci	r25, 0x00	; 0
     404:	e1 f7       	brne	.-8      	; 0x3fe <BNO_init+0x4a>
     406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	_delay_ms(25);

	/* Set Power Mode: Normal */
	BNO_write_reg(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
     408:	00 00       	nop
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	8e e3       	ldi	r24, 0x3E	; 62
     40e:	ad df       	rcall	.-166    	; 0x36a <BNO_write_reg>
     410:	2f e7       	ldi	r18, 0x7F	; 127
     412:	88 e3       	ldi	r24, 0x38	; 56
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	21 50       	subi	r18, 0x01	; 1
     418:	80 40       	sbci	r24, 0x00	; 0
     41a:	90 40       	sbci	r25, 0x00	; 0
     41c:	e1 f7       	brne	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     41e:	00 c0       	rjmp	.+0      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	_delay_ms(25);

	// select register page 0
	// (in order to access sensor data)
	BNO_write_reg(BNO055_PAGE_ID_ADDR, 0);
     420:	00 00       	nop
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	87 e0       	ldi	r24, 0x07	; 7

	// TODO: re-add after adding calib save to EEPROM
	//BNO_write_cal();

	// Set Sensor Mode
	BNO_write_reg(BNO055_OPR_MODE_ADDR, CONF_BNO055_MODE);
     426:	a1 df       	rcall	.-190    	; 0x36a <BNO_write_reg>
     428:	68 e0       	ldi	r22, 0x08	; 8
     42a:	8d e3       	ldi	r24, 0x3D	; 61
     42c:	9e df       	rcall	.-196    	; 0x36a <BNO_write_reg>
     42e:	2f e7       	ldi	r18, 0x7F	; 127
     430:	88 e3       	ldi	r24, 0x38	; 56
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	21 50       	subi	r18, 0x01	; 1
     436:	80 40       	sbci	r24, 0x00	; 0
     438:	90 40       	sbci	r25, 0x00	; 0
     43a:	e1 f7       	brne	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     43c:	00 c0       	rjmp	.+0      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43e:	00 00       	nop
	_delay_ms(25);

	return I2C_SUCCESS;
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	cb 01       	movw	r24, r22
     446:	04 c0       	rjmp	.+8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>

_gyro_init_err:
	if (block_on_failure) {
		IND_set_mode(IND_ERROR);
     448:	82 e0       	ldi	r24, 0x02	; 2
     44a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <IND_set_mode>
     44e:	ff cf       	rjmp	.-2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
	//_set_mode(mode);
	//_write_reg(BNO055_OPR_MODE_ADDR, CONF_BNO055_MODE);
	//_delay_ms(25);
	
	//return I2C_SUCCESS;
}
     450:	0f 90       	pop	r0
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	1f 91       	pop	r17
     458:	08 95       	ret

0000045a <BNO_print_calib_on_change>:


void BNO_print_calib_on_change(void)
{
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	00 d0       	rcall	.+0      	; 0x460 <BNO_print_calib_on_change+0x6>
     460:	00 d0       	rcall	.+0      	; 0x462 <BNO_print_calib_on_change+0x8>
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
	static uint8_t  lvl_sys_old = 100, lvl_gyro_old = 100,
	lvl_acc_old = 100, lvl_mag_old = 100;
	static uint32_t calib_time = 0;
	
	// read calibration status
	if (CTRL_get_elapsed_ms(calib_time) > 100) {
     466:	60 91 ba 03 	lds	r22, 0x03BA	; 0x8003ba <calib_time.2125>
     46a:	70 91 bb 03 	lds	r23, 0x03BB	; 0x8003bb <calib_time.2125+0x1>
     46e:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <calib_time.2125+0x2>
     472:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <calib_time.2125+0x3>
     476:	1a d6       	rcall	.+3124   	; 0x10ac <CTRL_get_elapsed_ms>
     478:	65 36       	cpi	r22, 0x65	; 101
     47a:	71 05       	cpc	r23, r1
     47c:	81 05       	cpc	r24, r1
     47e:	91 05       	cpc	r25, r1
     480:	08 f4       	brcc	.+2      	; 0x484 <BNO_print_calib_on_change+0x2a>
		uint8_t lvl_sys, lvl_gyro, lvl_acc, lvl_mag;
		
		calib_time = CTRL_get_time_ms();
     482:	61 c0       	rjmp	.+194    	; 0x546 <BNO_print_calib_on_change+0xec>
     484:	0a d6       	rcall	.+3092   	; 0x109a <CTRL_get_time_ms>
     486:	60 93 ba 03 	sts	0x03BA, r22	; 0x8003ba <calib_time.2125>
     48a:	70 93 bb 03 	sts	0x03BB, r23	; 0x8003bb <calib_time.2125+0x1>
     48e:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <calib_time.2125+0x2>
     492:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <calib_time.2125+0x3>
		BNO_read_calib_levels(&lvl_sys, &lvl_gyro, &lvl_acc, &lvl_mag);
     496:	9e 01       	movw	r18, r28
     498:	2f 5f       	subi	r18, 0xFF	; 255
     49a:	3f 4f       	sbci	r19, 0xFF	; 255
     49c:	ae 01       	movw	r20, r28
     49e:	4e 5f       	subi	r20, 0xFE	; 254
     4a0:	5f 4f       	sbci	r21, 0xFF	; 255
     4a2:	be 01       	movw	r22, r28
     4a4:	6d 5f       	subi	r22, 0xFD	; 253
     4a6:	7f 4f       	sbci	r23, 0xFF	; 255
     4a8:	ce 01       	movw	r24, r28
     4aa:	04 96       	adiw	r24, 0x04	; 4
     4ac:	f6 de       	rcall	.-532    	; 0x29a <BNO_read_calib_levels>
		
		if (lvl_sys != lvl_sys_old) {
     4ae:	8c 81       	ldd	r24, Y+4	; 0x04
     4b0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <lvl_sys_old.2121>
     4b4:	89 17       	cp	r24, r25
			print("cal sys=%d\n", lvl_sys);
     4b6:	71 f0       	breq	.+28     	; 0x4d4 <BNO_print_calib_on_change+0x7a>
     4b8:	1f 92       	push	r1
     4ba:	8f 93       	push	r24
     4bc:	86 e0       	ldi	r24, 0x06	; 6
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	9f 93       	push	r25
     4c2:	8f 93       	push	r24
     4c4:	fd d3       	rcall	.+2042   	; 0xcc0 <print>
			lvl_sys_old = lvl_sys;
     4c6:	8c 81       	ldd	r24, Y+4	; 0x04
     4c8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <lvl_sys_old.2121>
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
		}
		if (lvl_gyro != lvl_gyro_old) {
     4d4:	8b 81       	ldd	r24, Y+3	; 0x03
     4d6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <lvl_gyro_old.2122>
     4da:	89 17       	cp	r24, r25
			print("cal gyro=%d\n", lvl_gyro);
     4dc:	71 f0       	breq	.+28     	; 0x4fa <BNO_print_calib_on_change+0xa0>
     4de:	1f 92       	push	r1
     4e0:	8f 93       	push	r24
     4e2:	82 e1       	ldi	r24, 0x12	; 18
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	9f 93       	push	r25
     4e8:	8f 93       	push	r24
     4ea:	ea d3       	rcall	.+2004   	; 0xcc0 <print>
			lvl_gyro_old = lvl_gyro;
     4ec:	8b 81       	ldd	r24, Y+3	; 0x03
     4ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <lvl_gyro_old.2122>
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
		}
		if (lvl_acc != lvl_acc_old) {
     4f8:	0f 90       	pop	r0
     4fa:	8a 81       	ldd	r24, Y+2	; 0x02
     4fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <lvl_acc_old.2123>
     500:	89 17       	cp	r24, r25
			print("cal acc=%d\n", lvl_acc);
     502:	71 f0       	breq	.+28     	; 0x520 <BNO_print_calib_on_change+0xc6>
     504:	1f 92       	push	r1
     506:	8f 93       	push	r24
     508:	8f e1       	ldi	r24, 0x1F	; 31
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	9f 93       	push	r25
     50e:	8f 93       	push	r24
     510:	d7 d3       	rcall	.+1966   	; 0xcc0 <print>
			lvl_acc_old = lvl_acc;
     512:	8a 81       	ldd	r24, Y+2	; 0x02
     514:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <lvl_acc_old.2123>
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
		}
		if (lvl_mag != lvl_mag_old) {
     51e:	0f 90       	pop	r0
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     526:	89 17       	cp	r24, r25
			print("cal mag=%d\n", lvl_mag);
     528:	71 f0       	breq	.+28     	; 0x546 <BNO_print_calib_on_change+0xec>
     52a:	1f 92       	push	r1
     52c:	8f 93       	push	r24
     52e:	8b e2       	ldi	r24, 0x2B	; 43
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	9f 93       	push	r25
     534:	8f 93       	push	r24
     536:	c4 d3       	rcall	.+1928   	; 0xcc0 <print>
			lvl_mag_old = lvl_mag;
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
		}
	}
}
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <BNO_print_data>:

void BNO_print_data(void)
{
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
     55c:	60 97       	sbiw	r28, 0x10	; 16
     55e:	0f b6       	in	r0, 0x3f	; 63
     560:	f8 94       	cli
     562:	de bf       	out	0x3e, r29	; 62
     564:	0f be       	out	0x3f, r0	; 63
	static uint32_t _time = 0;
	BNO_angle_t angle;
	uint8_t lvl_sys, lvl_gyro, lvl_acc, lvl_mag;
	
	
	if (CTRL_get_elapsed_ms(_time) > 300) {
     566:	cd bf       	out	0x3d, r28	; 61
     568:	60 91 b6 03 	lds	r22, 0x03B6	; 0x8003b6 <__data_end>
     56c:	70 91 b7 03 	lds	r23, 0x03B7	; 0x8003b7 <__data_end+0x1>
     570:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <__data_end+0x2>
     574:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <__data_end+0x3>
     578:	99 d5       	rcall	.+2866   	; 0x10ac <CTRL_get_elapsed_ms>
     57a:	6d 32       	cpi	r22, 0x2D	; 45
     57c:	71 40       	sbci	r23, 0x01	; 1
     57e:	81 05       	cpc	r24, r1
     580:	91 05       	cpc	r25, r1
		_time = CTRL_get_time_ms();
     582:	08 f4       	brcc	.+2      	; 0x586 <BNO_print_data+0x32>
     584:	7d c0       	rjmp	.+250    	; 0x680 <BNO_print_data+0x12c>
     586:	89 d5       	rcall	.+2834   	; 0x109a <CTRL_get_time_ms>
     588:	60 93 b6 03 	sts	0x03B6, r22	; 0x8003b6 <__data_end>
     58c:	70 93 b7 03 	sts	0x03B7, r23	; 0x8003b7 <__data_end+0x1>
     590:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <__data_end+0x2>
		
		// request data
		BNO_request_angle(&(_local._stat_r));
     594:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <__data_end+0x3>
     598:	86 ec       	ldi	r24, 0xC6	; 198
		// wait for data
		while (I2C_IN_PROGRESS == _local._stat_r)
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	83 dd       	rcall	.-1274   	; 0xa4 <BNO_request_angle>
     59e:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <_local+0x8>
		;
		// print angle
		if (I2C_SUCCESS == _local._stat_r) {
     5a2:	83 30       	cpi	r24, 0x03	; 3
     5a4:	e1 f3       	breq	.-8      	; 0x59e <BNO_print_data+0x4a>
     5a6:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <_local+0x8>
			angle = BNO_angle();
     5aa:	81 11       	cpse	r24, r1
     5ac:	65 c0       	rjmp	.+202    	; 0x678 <BNO_print_data+0x124>
     5ae:	ce 01       	movw	r24, r28
			print("============\n\r");
     5b0:	01 96       	adiw	r24, 0x01	; 1
     5b2:	b6 dd       	rcall	.-1172   	; 0x120 <BNO_angle>
     5b4:	87 e3       	ldi	r24, 0x37	; 55
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	9f 93       	push	r25
     5ba:	8f 93       	push	r24
			print("x=%f\n\r", angle.x);
     5bc:	81 d3       	rcall	.+1794   	; 0xcc0 <print>
     5be:	8c 81       	ldd	r24, Y+4	; 0x04
     5c0:	8f 93       	push	r24
     5c2:	8b 81       	ldd	r24, Y+3	; 0x03
     5c4:	8f 93       	push	r24
     5c6:	8a 81       	ldd	r24, Y+2	; 0x02
     5c8:	8f 93       	push	r24
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	8f 93       	push	r24
     5ce:	86 e4       	ldi	r24, 0x46	; 70
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
			print("y=%f\n\r", angle.y);
     5d6:	74 d3       	rcall	.+1768   	; 0xcc0 <print>
     5d8:	88 85       	ldd	r24, Y+8	; 0x08
     5da:	8f 93       	push	r24
     5dc:	8f 81       	ldd	r24, Y+7	; 0x07
     5de:	8f 93       	push	r24
     5e0:	8e 81       	ldd	r24, Y+6	; 0x06
     5e2:	8f 93       	push	r24
     5e4:	8d 81       	ldd	r24, Y+5	; 0x05
     5e6:	8f 93       	push	r24
     5e8:	8d e4       	ldi	r24, 0x4D	; 77
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	9f 93       	push	r25
     5ee:	8f 93       	push	r24
			print("z=%f\n\r", angle.z);
     5f0:	67 d3       	rcall	.+1742   	; 0xcc0 <print>
     5f2:	8c 85       	ldd	r24, Y+12	; 0x0c
     5f4:	8f 93       	push	r24
     5f6:	8b 85       	ldd	r24, Y+11	; 0x0b
     5f8:	8f 93       	push	r24
     5fa:	8a 85       	ldd	r24, Y+10	; 0x0a
     5fc:	8f 93       	push	r24
     5fe:	89 85       	ldd	r24, Y+9	; 0x09
     600:	8f 93       	push	r24
     602:	84 e5       	ldi	r24, 0x54	; 84
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	9f 93       	push	r25
			BNO_read_calib_levels(&lvl_sys, &lvl_gyro, &lvl_acc, &lvl_mag);
     608:	8f 93       	push	r24
     60a:	5a d3       	rcall	.+1716   	; 0xcc0 <print>
     60c:	9e 01       	movw	r18, r28
     60e:	23 5f       	subi	r18, 0xF3	; 243
     610:	3f 4f       	sbci	r19, 0xFF	; 255
     612:	ae 01       	movw	r20, r28
     614:	42 5f       	subi	r20, 0xF2	; 242
     616:	5f 4f       	sbci	r21, 0xFF	; 255
     618:	be 01       	movw	r22, r28
     61a:	61 5f       	subi	r22, 0xF1	; 241
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	ce 01       	movw	r24, r28
			print("c_s=%d\n\r", lvl_sys);
     620:	40 96       	adiw	r24, 0x10	; 16
     622:	3b de       	rcall	.-906    	; 0x29a <BNO_read_calib_levels>
     624:	88 89       	ldd	r24, Y+16	; 0x10
     626:	1f 92       	push	r1
     628:	8f 93       	push	r24
     62a:	8b e5       	ldi	r24, 0x5B	; 91
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	9f 93       	push	r25
			print("c_g=%d\n\r", lvl_gyro);
     630:	8f 93       	push	r24
     632:	46 d3       	rcall	.+1676   	; 0xcc0 <print>
     634:	8f 85       	ldd	r24, Y+15	; 0x0f
     636:	1f 92       	push	r1
     638:	8f 93       	push	r24
     63a:	84 e6       	ldi	r24, 0x64	; 100
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	9f 93       	push	r25
			print("c_a=%d\n\r", lvl_acc);
     640:	8f 93       	push	r24
     642:	3e d3       	rcall	.+1660   	; 0xcc0 <print>
     644:	8e 85       	ldd	r24, Y+14	; 0x0e
     646:	1f 92       	push	r1
     648:	8f 93       	push	r24
     64a:	8d e6       	ldi	r24, 0x6D	; 109
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	9f 93       	push	r25
     650:	8f 93       	push	r24
			print("c_m=%d\n\r", lvl_mag);
     652:	36 d3       	rcall	.+1644   	; 0xcc0 <print>
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	f8 94       	cli
     658:	de bf       	out	0x3e, r29	; 62
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	cd bf       	out	0x3d, r28	; 61
     65e:	8d 85       	ldd	r24, Y+13	; 0x0d
     660:	1f 92       	push	r1
     662:	8f 93       	push	r24
     664:	86 e7       	ldi	r24, 0x76	; 118
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	9f 93       	push	r25
     66a:	8f 93       	push	r24
     66c:	29 d3       	rcall	.+1618   	; 0xcc0 <print>
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
		} else {
			UART_write_str("BNO: Failed to read data\r\n");
     676:	04 c0       	rjmp	.+8      	; 0x680 <BNO_print_data+0x12c>
     678:	8f e7       	ldi	r24, 0x7F	; 127
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <UART_write_str>
		}
	}
}
     680:	60 96       	adiw	r28, 0x10	; 16
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	df 91       	pop	r29

bool _BNO_test_1(void)
{
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <_BNO_test_1>:
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	00 d0       	rcall	.+0      	; 0x69c <_BNO_test_1+0xa>
	I2C_stat_t status;
	uint8_t data;
	bool enq;
	
	print("== BNO055 Test 1: Read ==\n");
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
     6a0:	8a e9       	ldi	r24, 0x9A	; 154
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	9f 93       	push	r25
     6a6:	8f 93       	push	r24
	// wait for I2C to be ready
	while (!I2C_available_tasks())
     6a8:	0b d3       	rcall	.+1558   	; 0xcc0 <print>
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0e 94 1a 0c 	call	0x1834	; 0x1834 <I2C_available_tasks>
		;
	
	print("Writing reg address\n");
     6b2:	88 23       	and	r24, r24
     6b4:	e1 f3       	breq	.-8      	; 0x6ae <_BNO_test_1+0x1c>
     6b6:	85 eb       	ldi	r24, 0xB5	; 181
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	9f 93       	push	r25
     6bc:	8f 93       	push	r24
	data = BNO055_CHIP_ID_ADDR;
     6be:	00 d3       	rcall	.+1536   	; 0xcc0 <print>
     6c0:	19 82       	std	Y+1, r1	; 0x01
     6c2:	8e 01       	movw	r16, r28
     6c4:	0e 5f       	subi	r16, 0xFE	; 254
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	21 e0       	ldi	r18, 0x01	; 1
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	ae 01       	movw	r20, r28
     6ce:	4f 5f       	subi	r20, 0xFF	; 255
     6d0:	5f 4f       	sbci	r21, 0xFF	; 255
     6d2:	68 e2       	ldi	r22, 0x28	; 40
     6d4:	80 e0       	ldi	r24, 0x00	; 0
	enq = I2C_write(CONF_BNO055_ADDRESS, &data, 1, &status);
	if (enq) {
     6d6:	0e 94 1f 0c 	call	0x183e	; 0x183e <_I2C_enqueue_task>
     6da:	18 2f       	mov	r17, r24
     6dc:	0f 90       	pop	r0
		print("Task added to queue\n");
     6de:	0f 90       	pop	r0
     6e0:	88 23       	and	r24, r24
     6e2:	41 f0       	breq	.+16     	; 0x6f4 <_BNO_test_1+0x62>
     6e4:	8a ec       	ldi	r24, 0xCA	; 202
     6e6:	91 e0       	ldi	r25, 0x01	; 1
		} else {
		print("Failed to add to queue\n");
		return false;
	}
	
	while (I2C_IN_PROGRESS == status)
     6e8:	9f 93       	push	r25
     6ea:	8f 93       	push	r24
     6ec:	e9 d2       	rcall	.+1490   	; 0xcc0 <print>
	data = BNO055_CHIP_ID_ADDR;
	enq = I2C_write(CONF_BNO055_ADDRESS, &data, 1, &status);
	if (enq) {
		print("Task added to queue\n");
		} else {
		print("Failed to add to queue\n");
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	08 c0       	rjmp	.+16     	; 0x704 <_BNO_test_1+0x72>
     6f4:	8f ed       	ldi	r24, 0xDF	; 223
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	9f 93       	push	r25
		return false;
     6fa:	8f 93       	push	r24
     6fc:	e1 d2       	rcall	.+1474   	; 0xcc0 <print>
     6fe:	0f 90       	pop	r0
	}
	
	while (I2C_IN_PROGRESS == status)
     700:	0f 90       	pop	r0
     702:	68 c0       	rjmp	.+208    	; 0x7d4 <_BNO_test_1+0x142>
     704:	8a 81       	ldd	r24, Y+2	; 0x02
	;
	print("DONE\n");
     706:	83 30       	cpi	r24, 0x03	; 3
     708:	e9 f3       	breq	.-6      	; 0x704 <_BNO_test_1+0x72>
     70a:	87 ef       	ldi	r24, 0xF7	; 247
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
	
	if (status != I2C_SUCCESS) {
     712:	d6 d2       	rcall	.+1452   	; 0xcc0 <print>
     714:	8a 81       	ldd	r24, Y+2	; 0x02
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
			print("I2C: WRITE NACK\n");
		}
		return status;
	}
	
	print("Reading reg value .. ");
     71a:	81 11       	cpse	r24, r1
     71c:	21 c0       	rjmp	.+66     	; 0x760 <_BNO_test_1+0xce>
     71e:	89 e1       	ldi	r24, 0x19	; 25
     720:	92 e0       	ldi	r25, 0x02	; 2
     722:	9f 93       	push	r25
     724:	8f 93       	push	r24
	data = 0;
     726:	cc d2       	rcall	.+1432   	; 0xcc0 <print>
 * Will write operation status in 'status' argument
 * as the transmission unfolds
 */
static inline bool I2C_read(uint8_t addr, uint8_t *buff, uint16_t max_len, volatile I2C_stat_t *status)
{
	return _I2C_enqueue_task(true, addr, buff, max_len, status);
     728:	19 82       	std	Y+1, r1	; 0x01
     72a:	8e 01       	movw	r16, r28
     72c:	0e 5f       	subi	r16, 0xFE	; 254
     72e:	1f 4f       	sbci	r17, 0xFF	; 255
     730:	21 e0       	ldi	r18, 0x01	; 1
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	ae 01       	movw	r20, r28
     736:	4f 5f       	subi	r20, 0xFF	; 255
     738:	5f 4f       	sbci	r21, 0xFF	; 255
     73a:	68 e2       	ldi	r22, 0x28	; 40
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	0e 94 1f 0c 	call	0x183e	; 0x183e <_I2C_enqueue_task>
	I2C_read(CONF_BNO055_ADDRESS, &data, 1, &status);
	while (I2C_IN_PROGRESS == status)
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	8a 81       	ldd	r24, Y+2	; 0x02
	;
	print("DONE\n");
     748:	83 30       	cpi	r24, 0x03	; 3
     74a:	e9 f3       	breq	.-6      	; 0x746 <_BNO_test_1+0xb4>
     74c:	87 ef       	ldi	r24, 0xF7	; 247
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	9f 93       	push	r25
	
	if (I2C_SUCCESS != status) {
     752:	8f 93       	push	r24
     754:	b5 d2       	rcall	.+1386   	; 0xcc0 <print>
     756:	8a 81       	ldd	r24, Y+2	; 0x02
     758:	0f 90       	pop	r0
		// handle errors
		if (I2C_ADDRESS_NACK == status) {
     75a:	0f 90       	pop	r0
     75c:	88 23       	and	r24, r24
     75e:	a9 f0       	breq	.+42     	; 0x78a <_BNO_test_1+0xf8>
			print("I2C: NACK\n");
     760:	8a 81       	ldd	r24, Y+2	; 0x02
     762:	81 30       	cpi	r24, 0x01	; 1
     764:	19 f4       	brne	.+6      	; 0x76c <_BNO_test_1+0xda>
			} else if (I2C_WRITE_NACK == status) {
     766:	8d ef       	ldi	r24, 0xFD	; 253
     768:	91 e0       	ldi	r25, 0x01	; 1
			print("I2C: WRITE NACK\n");
     76a:	05 c0       	rjmp	.+10     	; 0x776 <_BNO_test_1+0xe4>
     76c:	8a 81       	ldd	r24, Y+2	; 0x02
     76e:	82 30       	cpi	r24, 0x02	; 2
     770:	39 f4       	brne	.+14     	; 0x780 <_BNO_test_1+0xee>
     772:	88 e0       	ldi	r24, 0x08	; 8
     774:	92 e0       	ldi	r25, 0x02	; 2
     776:	9f 93       	push	r25
     778:	8f 93       	push	r24
		}
		return status;
     77a:	a2 d2       	rcall	.+1348   	; 0xcc0 <print>
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	8a 81       	ldd	r24, Y+2	; 0x02
	}
	
	print("RW SUCCESS!\n");
     782:	11 e0       	ldi	r17, 0x01	; 1
     784:	81 11       	cpse	r24, r1
     786:	26 c0       	rjmp	.+76     	; 0x7d4 <_BNO_test_1+0x142>
     788:	24 c0       	rjmp	.+72     	; 0x7d2 <_BNO_test_1+0x140>
     78a:	8f e2       	ldi	r24, 0x2F	; 47
     78c:	92 e0       	ldi	r25, 0x02	; 2
	
	print("Check Value .. ");
     78e:	9f 93       	push	r25
     790:	8f 93       	push	r24
     792:	96 d2       	rcall	.+1324   	; 0xcc0 <print>
     794:	8c e3       	ldi	r24, 0x3C	; 60
     796:	92 e0       	ldi	r25, 0x02	; 2
     798:	9f 93       	push	r25
	
	if (BNO055_ID == data) {
     79a:	8f 93       	push	r24
     79c:	91 d2       	rcall	.+1314   	; 0xcc0 <print>
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
		print("OK\n");
     7a8:	80 3a       	cpi	r24, 0xA0	; 160
     7aa:	41 f4       	brne	.+16     	; 0x7bc <_BNO_test_1+0x12a>
     7ac:	84 e9       	ldi	r24, 0x94	; 148
     7ae:	92 e0       	ldi	r25, 0x02	; 2
     7b0:	9f 93       	push	r25
     7b2:	8f 93       	push	r24
     7b4:	85 d2       	rcall	.+1290   	; 0xcc0 <print>
		} else {
		print("FAIL=%x\n", data);
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0b c0       	rjmp	.+22     	; 0x7d2 <_BNO_test_1+0x140>
     7bc:	1f 92       	push	r1
     7be:	8f 93       	push	r24
     7c0:	8c e4       	ldi	r24, 0x4C	; 76
     7c2:	92 e0       	ldi	r25, 0x02	; 2
     7c4:	9f 93       	push	r25
     7c6:	8f 93       	push	r24
     7c8:	7b d2       	rcall	.+1270   	; 0xcc0 <print>
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
	}
	
	return I2C_SUCCESS;
     7ce:	0f 90       	pop	r0
}
     7d0:	0f 90       	pop	r0
     7d2:	10 e0       	ldi	r17, 0x00	; 0
     7d4:	81 2f       	mov	r24, r17
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28



bool _BNO_test_2(void)
{
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	08 95       	ret

000007e4 <_BNO_test_2>:
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
	uint8_t data;
	I2C_stat_t stat;
	
	
	print(" == BNO: Test 2 ==\n");
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <_BNO_test_2+0x6>
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	85 e5       	ldi	r24, 0x55	; 85
     7f0:	92 e0       	ldi	r25, 0x02	; 2
	data = 0;
     7f2:	9f 93       	push	r25
	stat = BNO_read_reg(BNO055_CHIP_ID_ADDR, &data, 1);
     7f4:	8f 93       	push	r24
     7f6:	64 d2       	rcall	.+1224   	; 0xcc0 <print>
     7f8:	1a 82       	std	Y+2, r1	; 0x02
     7fa:	41 e0       	ldi	r20, 0x01	; 1
     7fc:	be 01       	movw	r22, r28
     7fe:	6e 5f       	subi	r22, 0xFE	; 254
     800:	7f 4f       	sbci	r23, 0xFF	; 255
     802:	80 e0       	ldi	r24, 0x00	; 0
	
	if (I2C_SUCCESS != stat) {
     804:	ff dc       	rcall	.-1538   	; 0x204 <BNO_read_reg>
     806:	69 83       	std	Y+1, r22	; 0x01
     808:	89 81       	ldd	r24, Y+1	; 0x01
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
		print("I2C error=%d\n", stat);
     80e:	88 23       	and	r24, r24
     810:	31 f0       	breq	.+12     	; 0x81e <_BNO_test_2+0x3a>
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	1f 92       	push	r1
     816:	8f 93       	push	r24
		} else {
		if (BNO055_ID == data) {
     818:	89 e6       	ldi	r24, 0x69	; 105
     81a:	92 e0       	ldi	r25, 0x02	; 2
     81c:	10 c0       	rjmp	.+32     	; 0x83e <_BNO_test_2+0x5a>
			print("OK\n");
     81e:	8a 81       	ldd	r24, Y+2	; 0x02
     820:	80 3a       	cpi	r24, 0xA0	; 160
     822:	49 f4       	brne	.+18     	; 0x836 <_BNO_test_2+0x52>
     824:	84 e9       	ldi	r24, 0x94	; 148
     826:	92 e0       	ldi	r25, 0x02	; 2
     828:	9f 93       	push	r25
			return true;
     82a:	8f 93       	push	r24
     82c:	49 d2       	rcall	.+1170   	; 0xcc0 <print>
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
			} else {
			print("FAIL val=%x\n", data);
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	0c c0       	rjmp	.+24     	; 0x84e <_BNO_test_2+0x6a>
     836:	1f 92       	push	r1
     838:	8f 93       	push	r24
     83a:	87 e7       	ldi	r24, 0x77	; 119
     83c:	92 e0       	ldi	r25, 0x02	; 2
     83e:	9f 93       	push	r25
     840:	8f 93       	push	r24
     842:	3e d2       	rcall	.+1148   	; 0xcc0 <print>
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
		}
	}
	
	
	return false;
     848:	0f 90       	pop	r0
}
     84a:	0f 90       	pop	r0
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	df 91       	pop	r29


bool _BNO_test_3(void)
{
     854:	cf 91       	pop	r28
     856:	08 95       	ret

00000858 <_BNO_test_3>:
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	1f 92       	push	r1
	I2C_stat_t stat;
	
	print("BNO: init\n");
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
     862:	84 e8       	ldi	r24, 0x84	; 132
     864:	92 e0       	ldi	r25, 0x02	; 2
     866:	9f 93       	push	r25
	stat = BNO_init(false);
     868:	8f 93       	push	r24
     86a:	2a d2       	rcall	.+1108   	; 0xcc0 <print>
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	a2 dd       	rcall	.-1212   	; 0x3b4 <BNO_init>
	if (I2C_SUCCESS != stat) {
     870:	69 83       	std	Y+1, r22	; 0x01
     872:	89 81       	ldd	r24, Y+1	; 0x01
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	88 23       	and	r24, r24
		IND_set_mode(IND_ERROR);
     87a:	21 f0       	breq	.+8      	; 0x884 <_BNO_test_3+0x2c>
     87c:	82 e0       	ldi	r24, 0x02	; 2
     87e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <IND_set_mode>
		// loop forever
		while (1)
			;
	}
	print("BNO: OK\n");
     882:	ff cf       	rjmp	.-2      	; 0x882 <_BNO_test_3+0x2a>
     884:	8f e8       	ldi	r24, 0x8F	; 143
     886:	92 e0       	ldi	r25, 0x02	; 2
     888:	9f 93       	push	r25
     88a:	8f 93       	push	r24
     88c:	19 d2       	rcall	.+1074   	; 0xcc0 <print>
	
	return true;
}
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28


bool _BNO_test_4(void)
{
     89a:	08 95       	ret

0000089c <_BNO_test_4>:
     89c:	bf 92       	push	r11
     89e:	cf 92       	push	r12
     8a0:	df 92       	push	r13
     8a2:	ef 92       	push	r14
     8a4:	ff 92       	push	r15
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	1f 92       	push	r1
     8b0:	cd b7       	in	r28, 0x3d	; 61
	int i;
	uint8_t data;
	
	BNO_write_reg(BNO055_OPR_MODE_ADDR, OPERATION_MODE_CONFIG);
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	8d e3       	ldi	r24, 0x3D	; 61
     8b8:	58 dd       	rcall	.-1360   	; 0x36a <BNO_write_reg>
     8ba:	2f ef       	ldi	r18, 0xFF	; 255
     8bc:	86 e7       	ldi	r24, 0x76	; 118
     8be:	91 e0       	ldi	r25, 0x01	; 1
     8c0:	21 50       	subi	r18, 0x01	; 1
     8c2:	80 40       	sbci	r24, 0x00	; 0
     8c4:	90 40       	sbci	r25, 0x00	; 0
     8c6:	e1 f7       	brne	.-8      	; 0x8c0 <_BNO_test_4+0x24>
     8c8:	00 c0       	rjmp	.+0      	; 0x8ca <_BNO_test_4+0x2e>
	_delay_ms(30);
	
	
	// FIX ME PLS!!!
	// 160 != 0
	for (i = 0; i <= 12; i++) {
     8ca:	00 00       	nop
     8cc:	00 e0       	ldi	r16, 0x00	; 0
		data = 0xff;
     8ce:	10 e0       	ldi	r17, 0x00	; 0
     8d0:	bb 24       	eor	r11, r11
		BNO_read_reg(GYRO_OFFSET_Z_LSB_ADDR, &data, 1);
		
		if (data == i) {
			print("%d == %d\n", data, i);
			} else {
			print("%d != %d\n", data, i);
     8d2:	ba 94       	dec	r11
     8d4:	82 ea       	ldi	r24, 0xA2	; 162
     8d6:	e8 2e       	mov	r14, r24
     8d8:	82 e0       	ldi	r24, 0x02	; 2
		data = 0xff;
		BNO_write_reg(GYRO_OFFSET_Z_LSB_ADDR, i);
		BNO_read_reg(GYRO_OFFSET_Z_LSB_ADDR, &data, 1);
		
		if (data == i) {
			print("%d == %d\n", data, i);
     8da:	f8 2e       	mov	r15, r24
     8dc:	98 e9       	ldi	r25, 0x98	; 152
     8de:	c9 2e       	mov	r12, r25
     8e0:	92 e0       	ldi	r25, 0x02	; 2
	
	
	// FIX ME PLS!!!
	// 160 != 0
	for (i = 0; i <= 12; i++) {
		data = 0xff;
     8e2:	d9 2e       	mov	r13, r25
		BNO_write_reg(GYRO_OFFSET_Z_LSB_ADDR, i);
     8e4:	b9 82       	std	Y+1, r11	; 0x01
     8e6:	60 2f       	mov	r22, r16
     8e8:	85 e6       	ldi	r24, 0x65	; 101
     8ea:	3f dd       	rcall	.-1410   	; 0x36a <BNO_write_reg>
		BNO_read_reg(GYRO_OFFSET_Z_LSB_ADDR, &data, 1);
     8ec:	41 e0       	ldi	r20, 0x01	; 1
     8ee:	be 01       	movw	r22, r28
     8f0:	6f 5f       	subi	r22, 0xFF	; 255
     8f2:	7f 4f       	sbci	r23, 0xFF	; 255
     8f4:	85 e6       	ldi	r24, 0x65	; 101
     8f6:	86 dc       	rcall	.-1780   	; 0x204 <BNO_read_reg>
		
		if (data == i) {
     8f8:	89 81       	ldd	r24, Y+1	; 0x01
     8fa:	28 2f       	mov	r18, r24
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	20 17       	cp	r18, r16
     900:	31 07       	cpc	r19, r17
     902:	39 f4       	brne	.+14     	; 0x912 <__stack+0x13>
			print("%d == %d\n", data, i);
     904:	1f 93       	push	r17
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	0f 93       	push	r16
     90c:	df 92       	push	r13
     90e:	cf 92       	push	r12
     910:	06 c0       	rjmp	.+12     	; 0x91e <__stack+0x1f>
			} else {
			print("%d != %d\n", data, i);
     912:	1f 93       	push	r17
     914:	0f 93       	push	r16
     916:	1f 92       	push	r1
     918:	8f 93       	push	r24
     91a:	ff 92       	push	r15
     91c:	ef 92       	push	r14
     91e:	d0 d1       	rcall	.+928    	; 0xcc0 <print>
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	2f ef       	ldi	r18, 0xFF	; 255
     92e:	85 ea       	ldi	r24, 0xA5	; 165
     930:	9e e0       	ldi	r25, 0x0E	; 14
     932:	21 50       	subi	r18, 0x01	; 1
     934:	80 40       	sbci	r24, 0x00	; 0
     936:	90 40       	sbci	r25, 0x00	; 0
     938:	e1 f7       	brne	.-8      	; 0x932 <__stack+0x33>
     93a:	00 c0       	rjmp	.+0      	; 0x93c <__stack+0x3d>
     93c:	00 00       	nop
	_delay_ms(30);
	
	
	// FIX ME PLS!!!
	// 160 != 0
	for (i = 0; i <= 12; i++) {
     93e:	0f 5f       	subi	r16, 0xFF	; 255
     940:	1f 4f       	sbci	r17, 0xFF	; 255
     942:	0d 30       	cpi	r16, 0x0D	; 13
     944:	11 05       	cpc	r17, r1
     946:	71 f6       	brne	.-100    	; 0x8e4 <_BNO_test_4+0x48>
		}
		
		_delay_ms(300);
	}
	
	BNO_write_reg(BNO055_OPR_MODE_ADDR, OPERATION_MODE_NDOF);
     948:	6c e0       	ldi	r22, 0x0C	; 12
     94a:	8d e3       	ldi	r24, 0x3D	; 61
     94c:	0e dd       	rcall	.-1508   	; 0x36a <BNO_write_reg>
     94e:	81 e0       	ldi	r24, 0x01	; 1
	
	return true;
}
     950:	0f 90       	pop	r0
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	ff 90       	pop	r15
     95c:	ef 90       	pop	r14
     95e:	df 90       	pop	r13
     960:	cf 90       	pop	r12
     962:	bf 90       	pop	r11
     964:	08 95       	ret

00000966 <_BNO_test_5>:
     966:	cf 93       	push	r28

bool _BNO_test_5(void)
{
     968:	df 93       	push	r29
     96a:	1f 92       	push	r1
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
     970:	41 e0       	ldi	r20, 0x01	; 1
	uint8_t data;
	
	BNO_read_reg(BNO055_CHIP_ID_ADDR, &data, 1);
     972:	be 01       	movw	r22, r28
     974:	6f 5f       	subi	r22, 0xFF	; 255
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	44 dc       	rcall	.-1912   	; 0x204 <BNO_read_reg>
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	0f 90       	pop	r0
	
	return true;
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	08 95       	ret

00000986 <_strcmp>:
	_cmd.index = 0;
}


bool _strcmp(const char * str1, const char * str2, int n)
{
     986:	fb 01       	movw	r30, r22
     988:	dc 01       	movw	r26, r24
	int i;
	for (i = 0; i != (n-1) ; i++) {
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	41 50       	subi	r20, 0x01	; 1
     990:	51 09       	sbc	r21, r1
     992:	24 17       	cp	r18, r20
     994:	35 07       	cpc	r19, r21
     996:	99 f0       	breq	.+38     	; 0x9be <_strcmp+0x38>
		if ((str1[i] == '\0') || (str2[i] == '\0')) {
     998:	9d 91       	ld	r25, X+
     99a:	99 23       	and	r25, r25
     99c:	19 f0       	breq	.+6      	; 0x9a4 <_strcmp+0x1e>
     99e:	81 91       	ld	r24, Z+
     9a0:	81 11       	cpse	r24, r1
     9a2:	08 c0       	rjmp	.+16     	; 0x9b4 <_strcmp+0x2e>
			return str1[i] == str2[i];
     9a4:	fb 01       	movw	r30, r22
     9a6:	e2 0f       	add	r30, r18
     9a8:	f3 1f       	adc	r31, r19
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	20 81       	ld	r18, Z
     9ae:	29 13       	cpse	r18, r25
     9b0:	08 c0       	rjmp	.+16     	; 0x9c2 <_strcmp+0x3c>
     9b2:	08 c0       	rjmp	.+16     	; 0x9c4 <_strcmp+0x3e>
		}
		
		if (str1[i] != str2[i]) {
     9b4:	98 13       	cpse	r25, r24
     9b6:	05 c0       	rjmp	.+10     	; 0x9c2 <_strcmp+0x3c>


bool _strcmp(const char * str1, const char * str2, int n)
{
	int i;
	for (i = 0; i != (n-1) ; i++) {
     9b8:	2f 5f       	subi	r18, 0xFF	; 255
     9ba:	3f 4f       	sbci	r19, 0xFF	; 255
     9bc:	ea cf       	rjmp	.-44     	; 0x992 <_strcmp+0xc>
		if (str1[i] != str2[i]) {
			return false;
		}
	}
	
	return true;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	08 95       	ret
		if ((str1[i] == '\0') || (str2[i] == '\0')) {
			return str1[i] == str2[i];
		}
		
		if (str1[i] != str2[i]) {
			return false;
     9c2:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
     9c4:	08 95       	ret

000009c6 <_print_sint>:
	EEPROM_write_array(0, (uint8_t*)&calib, sizeof(calib));
}


static void _print_sint(int num)
{
     9c6:	cf 92       	push	r12
     9c8:	df 92       	push	r13
     9ca:	ef 92       	push	r14
     9cc:	ff 92       	push	r15
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	2a 97       	sbiw	r28, 0x0a	; 10
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	f8 94       	cli
     9e0:	de bf       	out	0x3e, r29	; 62
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	cd bf       	out	0x3d, r28	; 61
     9e6:	8c 01       	movw	r16, r24
	int len;
	char buff[10];
	
	
	if (0 == num) {
     9e8:	00 97       	sbiw	r24, 0x00	; 0
     9ea:	89 f4       	brne	.+34     	; 0xa0e <_print_sint+0x48>
		UART_write('0');
     9ec:	80 e3       	ldi	r24, 0x30	; 48
		// print number
		for (len = len -1; len >= 0; len--) {
			UART_write(buff[len]);
		}
	}
}
     9ee:	2a 96       	adiw	r28, 0x0a	; 10
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	f8 94       	cli
     9f4:	de bf       	out	0x3e, r29	; 62
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	cd bf       	out	0x3d, r28	; 61
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
     a02:	ff 90       	pop	r15
     a04:	ef 90       	pop	r14
     a06:	df 90       	pop	r13
     a08:	cf 90       	pop	r12
	int len;
	char buff[10];
	
	
	if (0 == num) {
		UART_write('0');
     a0a:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <UART_write>
	} else {
		// if negative
		if (num < 0) {
     a0e:	97 ff       	sbrs	r25, 7
     a10:	06 c0       	rjmp	.+12     	; 0xa1e <_print_sint+0x58>
			UART_write('-');
     a12:	8d e2       	ldi	r24, 0x2D	; 45
     a14:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <UART_write>
			num = -num;
     a18:	11 95       	neg	r17
     a1a:	01 95       	neg	r16
     a1c:	11 09       	sbc	r17, r1
     a1e:	ce 01       	movw	r24, r28
     a20:	01 96       	adiw	r24, 0x01	; 1
     a22:	7c 01       	movw	r14, r24
	EEPROM_write_array(0, (uint8_t*)&calib, sizeof(calib));
}


static void _print_sint(int num)
{
     a24:	fc 01       	movw	r30, r24
		}
		
		// convert int to reverse char representation
		len = 0;
		while (num) {
			buff[len++] = '0' + (num % 10);
     a26:	8a e0       	ldi	r24, 0x0A	; 10
     a28:	c8 2e       	mov	r12, r24
     a2a:	d1 2c       	mov	r13, r1
     a2c:	9f 01       	movw	r18, r30
     a2e:	2e 19       	sub	r18, r14
     a30:	3f 09       	sbc	r19, r15
     a32:	c8 01       	movw	r24, r16
     a34:	b6 01       	movw	r22, r12
     a36:	0e 94 a9 10 	call	0x2152	; 0x2152 <__divmodhi4>
     a3a:	80 5d       	subi	r24, 0xD0	; 208
     a3c:	81 93       	st	Z+, r24
			num /= 10;
     a3e:	8b 01       	movw	r16, r22
			num = -num;
		}
		
		// convert int to reverse char representation
		len = 0;
		while (num) {
     a40:	67 2b       	or	r22, r23
     a42:	a1 f7       	brne	.-24     	; 0xa2c <_print_sint+0x66>
     a44:	89 01       	movw	r16, r18
     a46:	0f 5f       	subi	r16, 0xFF	; 255
     a48:	1f 4f       	sbci	r17, 0xFF	; 255
     a4a:	0e 0d       	add	r16, r14
     a4c:	1f 1d       	adc	r17, r15
			buff[len++] = '0' + (num % 10);
			num /= 10;
		}
		
		// print number
		for (len = len -1; len >= 0; len--) {
     a4e:	e0 16       	cp	r14, r16
     a50:	f1 06       	cpc	r15, r17
     a52:	31 f0       	breq	.+12     	; 0xa60 <_print_sint+0x9a>
			UART_write(buff[len]);
     a54:	f8 01       	movw	r30, r16
     a56:	82 91       	ld	r24, -Z
     a58:	8f 01       	movw	r16, r30
     a5a:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <UART_write>
     a5e:	f7 cf       	rjmp	.-18     	; 0xa4e <_print_sint+0x88>
		}
	}
}
     a60:	2a 96       	adiw	r28, 0x0a	; 10
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	cd bf       	out	0x3d, r28	; 61
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	ff 90       	pop	r15
     a76:	ef 90       	pop	r14
     a78:	df 90       	pop	r13
     a7a:	cf 90       	pop	r12
     a7c:	08 95       	ret

00000a7e <CONS_init>:
} _cmd;


void CONS_init(void)
{
	_cmd.index = 0;
     a7e:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <_cmd+0x1e>
     a82:	08 95       	ret

00000a84 <_handle_cmd>:
	_handle_cmd();
	_cmd.index = 0;
}

void _handle_cmd(void)
{
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
     a8c:	c4 55       	subi	r28, 0x54	; 84
     a8e:	d1 09       	sbc	r29, r1
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	de bf       	out	0x3e, r29	; 62
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	cd bf       	out	0x3d, r28	; 61
	
	/* P, I, D parameters are integers representing 
	 * the parameter value times 1000 
	 */
	// PID P term change
	if (('p' == _cmd.data[0]) 
     a9a:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <_cmd>
     a9e:	80 37       	cpi	r24, 0x70	; 112
     aa0:	e1 f4       	brne	.+56     	; 0xada <_handle_cmd+0x56>
	&&  ('=' == _cmd.data[1])) {
     aa2:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_cmd+0x1>
     aa6:	8d 33       	cpi	r24, 0x3D	; 61
     aa8:	09 f0       	breq	.+2      	; 0xaac <_handle_cmd+0x28>
     aaa:	95 c0       	rjmp	.+298    	; 0xbd6 <_handle_cmd+0x152>
		if (_cmd.index >= 6) {
     aac:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <_cmd+0x1e>
     ab0:	86 30       	cpi	r24, 0x06	; 6
     ab2:	08 f4       	brcc	.+2      	; 0xab6 <_handle_cmd+0x32>
     ab4:	d4 c0       	rjmp	.+424    	; 0xc5e <_handle_cmd+0x1da>
			tmp = ((uint32_t)_cmd.data[2])
			|	((uint32_t)_cmd.data[3] << 8)
			|	((uint32_t)_cmd.data[4] << 16)
			|	((uint32_t)_cmd.data[5] << 24);
			CTRL_set_PID_bp((float)tmp / 1000.0);
     ab6:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <_cmd+0x2>
     aba:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <_cmd+0x3>
     abe:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <_cmd+0x4>
     ac2:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <_cmd+0x5>
     ac6:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__floatsisf>
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	4a e7       	ldi	r20, 0x7A	; 122
     ad0:	54 e4       	ldi	r21, 0x44	; 68
     ad2:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__divsf3>
     ad6:	7d d2       	rcall	.+1274   	; 0xfd2 <CTRL_set_PID_bp>
     ad8:	1d c0       	rjmp	.+58     	; 0xb14 <_handle_cmd+0x90>
			UART_write_str("ok");
		}
	// PID I term change
	} else if ( ('i' == _cmd.data[0]) 
     ada:	89 36       	cpi	r24, 0x69	; 105
     adc:	f1 f4       	brne	.+60     	; 0xb1a <_handle_cmd+0x96>
			&&  ('=' == _cmd.data[1])) {
     ade:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_cmd+0x1>
     ae2:	8d 33       	cpi	r24, 0x3D	; 61
     ae4:	09 f0       	breq	.+2      	; 0xae8 <_handle_cmd+0x64>
     ae6:	77 c0       	rjmp	.+238    	; 0xbd6 <_handle_cmd+0x152>
		if (_cmd.index >= 6) {
     ae8:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <_cmd+0x1e>
     aec:	86 30       	cpi	r24, 0x06	; 6
     aee:	08 f4       	brcc	.+2      	; 0xaf2 <_handle_cmd+0x6e>
     af0:	b6 c0       	rjmp	.+364    	; 0xc5e <_handle_cmd+0x1da>
			tmp = ((uint32_t)_cmd.data[2])
			|	((uint32_t)_cmd.data[3] << 8)
			|	((uint32_t)_cmd.data[4] << 16)
			|	((uint32_t)_cmd.data[5] << 24);
			CTRL_set_PID_bi((float)tmp / 1000.0);
     af2:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <_cmd+0x2>
     af6:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <_cmd+0x3>
     afa:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <_cmd+0x4>
     afe:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <_cmd+0x5>
     b02:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__floatsisf>
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	4a e7       	ldi	r20, 0x7A	; 122
     b0c:	54 e4       	ldi	r21, 0x44	; 68
     b0e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__divsf3>
     b12:	6b d2       	rcall	.+1238   	; 0xfea <CTRL_set_PID_bi>
			UART_write_str("ok");
     b14:	8c ea       	ldi	r24, 0xAC	; 172
     b16:	92 e0       	ldi	r25, 0x02	; 2
     b18:	a1 c0       	rjmp	.+322    	; 0xc5c <_handle_cmd+0x1d8>
		}
	// PID D term change
	} else if ( ('d' == _cmd.data[0]) 
     b1a:	84 36       	cpi	r24, 0x64	; 100
     b1c:	e1 f4       	brne	.+56     	; 0xb56 <_handle_cmd+0xd2>
			&&  ('=' == _cmd.data[1])) {
     b1e:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_cmd+0x1>
     b22:	8d 33       	cpi	r24, 0x3D	; 61
     b24:	09 f0       	breq	.+2      	; 0xb28 <_handle_cmd+0xa4>
     b26:	57 c0       	rjmp	.+174    	; 0xbd6 <_handle_cmd+0x152>
		if (_cmd.index >= 6) {
     b28:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <_cmd+0x1e>
     b2c:	86 30       	cpi	r24, 0x06	; 6
     b2e:	08 f4       	brcc	.+2      	; 0xb32 <_handle_cmd+0xae>
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <_handle_cmd+0x1da>
			tmp = ((uint32_t)_cmd.data[2])
			|	((uint32_t)_cmd.data[3] << 8)
			|	((uint32_t)_cmd.data[4] << 16)
			|	((uint32_t)_cmd.data[5] << 24);
			CTRL_set_PID_bd((float)tmp / 1000.0);
     b32:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <_cmd+0x2>
     b36:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <_cmd+0x3>
     b3a:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <_cmd+0x4>
     b3e:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <_cmd+0x5>
     b42:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__floatsisf>
     b46:	20 e0       	ldi	r18, 0x00	; 0
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	4a e7       	ldi	r20, 0x7A	; 122
     b4c:	54 e4       	ldi	r21, 0x44	; 68
     b4e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__divsf3>
     b52:	57 d2       	rcall	.+1198   	; 0x1002 <CTRL_set_PID_bd>
     b54:	df cf       	rjmp	.-66     	; 0xb14 <_handle_cmd+0x90>
			UART_write_str("ok");
		}
	} else if (('a' == _cmd.data[0])
     b56:	81 36       	cpi	r24, 0x61	; 97
     b58:	e1 f4       	brne	.+56     	; 0xb92 <_handle_cmd+0x10e>
		   &&  ('=' == _cmd.data[1])) {
     b5a:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_cmd+0x1>
     b5e:	8d 33       	cpi	r24, 0x3D	; 61
     b60:	09 f0       	breq	.+2      	; 0xb64 <_handle_cmd+0xe0>
     b62:	39 c0       	rjmp	.+114    	; 0xbd6 <_handle_cmd+0x152>
		if (_cmd.index >= 6) {
     b64:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <_cmd+0x1e>
     b68:	86 30       	cpi	r24, 0x06	; 6
     b6a:	08 f4       	brcc	.+2      	; 0xb6e <_handle_cmd+0xea>
     b6c:	78 c0       	rjmp	.+240    	; 0xc5e <_handle_cmd+0x1da>
			tmp = ((uint32_t)_cmd.data[2])
			|	((uint32_t)_cmd.data[3] << 8)
			|	((uint32_t)_cmd.data[4] << 16)
			|	((uint32_t)_cmd.data[5] << 24);
			CTRL_set_angle_off((float)tmp / 1000.0f);
     b6e:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <_cmd+0x2>
     b72:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <_cmd+0x3>
     b76:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <_cmd+0x4>
     b7a:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <_cmd+0x5>
     b7e:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__floatsisf>
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	4a e7       	ldi	r20, 0x7A	; 122
     b88:	54 e4       	ldi	r21, 0x44	; 68
     b8a:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__divsf3>
     b8e:	45 d2       	rcall	.+1162   	; 0x101a <CTRL_set_angle_off>
     b90:	c1 cf       	rjmp	.-126    	; 0xb14 <_handle_cmd+0x90>
			UART_write_str("ok");
		}
	} else if ( ('t' == _cmd.data[0])
     b92:	84 37       	cpi	r24, 0x74	; 116
     b94:	e1 f4       	brne	.+56     	; 0xbce <_handle_cmd+0x14a>
			&&  ('=' == _cmd.data[1])) {
     b96:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_cmd+0x1>
     b9a:	8d 33       	cpi	r24, 0x3D	; 61
     b9c:	e1 f4       	brne	.+56     	; 0xbd6 <_handle_cmd+0x152>
		if ((_cmd.index > 2) 
     b9e:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <_cmd+0x1e>
     ba2:	83 30       	cpi	r24, 0x03	; 3
     ba4:	08 f4       	brcc	.+2      	; 0xba8 <_handle_cmd+0x124>
     ba6:	5b c0       	rjmp	.+182    	; 0xc5e <_handle_cmd+0x1da>
		&& ('1' == _cmd.data[2])) {
     ba8:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <_cmd+0x2>
     bac:	81 33       	cpi	r24, 0x31	; 49
			_BNO_test_1();
     bae:	11 f4       	brne	.+4      	; 0xbb4 <_handle_cmd+0x130>
     bb0:	70 dd       	rcall	.-1312   	; 0x692 <_BNO_test_1>
		} else if ((_cmd.index > 2)
		&& ('2' == _cmd.data[2])) {
     bb2:	55 c0       	rjmp	.+170    	; 0xc5e <_handle_cmd+0x1da>
			_BNO_test_2();
     bb4:	82 33       	cpi	r24, 0x32	; 50
     bb6:	11 f4       	brne	.+4      	; 0xbbc <_handle_cmd+0x138>
     bb8:	15 de       	rcall	.-982    	; 0x7e4 <_BNO_test_2>
		} else if ((_cmd.index > 2)
		&& ('3' == _cmd.data[2])) {
     bba:	51 c0       	rjmp	.+162    	; 0xc5e <_handle_cmd+0x1da>
			_BNO_test_3();
     bbc:	83 33       	cpi	r24, 0x33	; 51
     bbe:	11 f4       	brne	.+4      	; 0xbc4 <_handle_cmd+0x140>
     bc0:	4b de       	rcall	.-874    	; 0x858 <_BNO_test_3>
		} else if ((_cmd.index > 2)
		&& ('4' == _cmd.data[2])) {
     bc2:	4d c0       	rjmp	.+154    	; 0xc5e <_handle_cmd+0x1da>
     bc4:	84 33       	cpi	r24, 0x34	; 52
			_BNO_test_4();
     bc6:	09 f0       	breq	.+2      	; 0xbca <_handle_cmd+0x146>
     bc8:	4a c0       	rjmp	.+148    	; 0xc5e <_handle_cmd+0x1da>
     bca:	68 de       	rcall	.-816    	; 0x89c <_BNO_test_4>
		}
	} else if ('c' == _cmd.data[0]){
     bcc:	48 c0       	rjmp	.+144    	; 0xc5e <_handle_cmd+0x1da>
     bce:	83 36       	cpi	r24, 0x63	; 99
		BNO_read_print_cal();
     bd0:	11 f4       	brne	.+4      	; 0xbd6 <_handle_cmd+0x152>
     bd2:	9c db       	rcall	.-2248   	; 0x30c <BNO_read_print_cal>
	} else if (_strcmp((char*)_cmd.data, "stream_on", -1)) {
     bd4:	44 c0       	rjmp	.+136    	; 0xc5e <_handle_cmd+0x1da>
     bd6:	4f ef       	ldi	r20, 0xFF	; 255
     bd8:	5f ef       	ldi	r21, 0xFF	; 255
     bda:	6f ea       	ldi	r22, 0xAF	; 175
     bdc:	72 e0       	ldi	r23, 0x02	; 2
     bde:	88 ec       	ldi	r24, 0xC8	; 200
     be0:	93 e0       	ldi	r25, 0x03	; 3
     be2:	d1 de       	rcall	.-606    	; 0x986 <_strcmp>
     be4:	81 11       	cpse	r24, r1
		//CONF_streaming_on = true;
	} else if (_strcmp((char*)_cmd.data, "stream_off", -1)) {
     be6:	3b c0       	rjmp	.+118    	; 0xc5e <_handle_cmd+0x1da>
     be8:	4f ef       	ldi	r20, 0xFF	; 255
     bea:	5f ef       	ldi	r21, 0xFF	; 255
     bec:	69 eb       	ldi	r22, 0xB9	; 185
     bee:	72 e0       	ldi	r23, 0x02	; 2
     bf0:	88 ec       	ldi	r24, 0xC8	; 200
     bf2:	93 e0       	ldi	r25, 0x03	; 3
     bf4:	c8 de       	rcall	.-624    	; 0x986 <_strcmp>
     bf6:	88 23       	and	r24, r24
		//CONF_streaming_on = false;
		UART_write_str("streaming off!\r\n");
     bf8:	19 f0       	breq	.+6      	; 0xc00 <_handle_cmd+0x17c>
     bfa:	84 ec       	ldi	r24, 0xC4	; 196
     bfc:	92 e0       	ldi	r25, 0x02	; 2
	} else if (_strcmp((char*)_cmd.data, "echo", 4)) {
     bfe:	2e c0       	rjmp	.+92     	; 0xc5c <_handle_cmd+0x1d8>
     c00:	44 e0       	ldi	r20, 0x04	; 4
     c02:	50 e0       	ldi	r21, 0x00	; 0
     c04:	65 ed       	ldi	r22, 0xD5	; 213
     c06:	72 e0       	ldi	r23, 0x02	; 2
     c08:	88 ec       	ldi	r24, 0xC8	; 200
     c0a:	93 e0       	ldi	r25, 0x03	; 3
     c0c:	bc de       	rcall	.-648    	; 0x986 <_strcmp>
     c0e:	88 23       	and	r24, r24
		UART_write_str("echo");
     c10:	19 f0       	breq	.+6      	; 0xc18 <_handle_cmd+0x194>
     c12:	85 ed       	ldi	r24, 0xD5	; 213
	} else if (_strcmp("calib", (char*)_cmd.data, 5)) {
     c14:	92 e0       	ldi	r25, 0x02	; 2
     c16:	22 c0       	rjmp	.+68     	; 0xc5c <_handle_cmd+0x1d8>
     c18:	45 e0       	ldi	r20, 0x05	; 5
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	68 ec       	ldi	r22, 0xC8	; 200
     c1e:	73 e0       	ldi	r23, 0x03	; 3
     c20:	8a ed       	ldi	r24, 0xDA	; 218
     c22:	92 e0       	ldi	r25, 0x02	; 2
     c24:	b0 de       	rcall	.-672    	; 0x986 <_strcmp>
     c26:	88 23       	and	r24, r24

void _cmd_calib(void)
{
	struct CTRL_calib_t calib;
	
	calib = CTRL_get_calib();
     c28:	b9 f0       	breq	.+46     	; 0xc58 <_handle_cmd+0x1d4>
     c2a:	ce 01       	movw	r24, r28
     c2c:	8b 96       	adiw	r24, 0x2b	; 43
     c2e:	db d3       	rcall	.+1974   	; 0x13e6 <CTRL_get_calib>
     c30:	8a e2       	ldi	r24, 0x2A	; 42
     c32:	fe 01       	movw	r30, r28
     c34:	bb 96       	adiw	r30, 0x2b	; 43
     c36:	de 01       	movw	r26, r28
     c38:	11 96       	adiw	r26, 0x01	; 1
     c3a:	01 90       	ld	r0, Z+
     c3c:	0d 92       	st	X+, r0
     c3e:	8a 95       	dec	r24
	
	EEPROM_write_array(0, (uint8_t*)&calib, sizeof(calib));
     c40:	e1 f7       	brne	.-8      	; 0xc3a <_handle_cmd+0x1b6>
     c42:	4a e2       	ldi	r20, 0x2A	; 42
     c44:	50 e0       	ldi	r21, 0x00	; 0
     c46:	be 01       	movw	r22, r28
     c48:	6f 5f       	subi	r22, 0xFF	; 255
     c4a:	7f 4f       	sbci	r23, 0xFF	; 255
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	bc d4       	rcall	.+2424   	; 0x15ca <EEPROM_write_array>
		UART_write_str("streaming off!\r\n");
	} else if (_strcmp((char*)_cmd.data, "echo", 4)) {
		UART_write_str("echo");
	} else if (_strcmp("calib", (char*)_cmd.data, 5)) {
		_cmd_calib();
		UART_write_str("Calib saved!\r\n");
     c52:	80 ee       	ldi	r24, 0xE0	; 224
     c54:	92 e0       	ldi	r25, 0x02	; 2
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <_handle_cmd+0x1d8>
	} else {
		UART_write_str("Invalid cmd!");
     c58:	8f ee       	ldi	r24, 0xEF	; 239
     c5a:	92 e0       	ldi	r25, 0x02	; 2
     c5c:	d1 d7       	rcall	.+4002   	; 0x1c00 <UART_write_str>
	}
}
     c5e:	cc 5a       	subi	r28, 0xAC	; 172
     c60:	df 4f       	sbci	r29, 0xFF	; 255
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
	return true;
}


void CONS_handle(void)
{
     c70:	08 95       	ret

00000c72 <CONS_handle>:
     c72:	cf 93       	push	r28
	while (UART_available() > 0) {
     c74:	df 93       	push	r29
     c76:	d5 d7       	rcall	.+4010   	; 0x1c22 <UART_available>
     c78:	18 16       	cp	r1, r24
     c7a:	19 06       	cpc	r1, r25
     c7c:	f4 f4       	brge	.+60     	; 0xcba <CONS_handle+0x48>
		// append byte
		_cmd.data[_cmd.index] = UART_read();
     c7e:	c0 91 e6 03 	lds	r28, 0x03E6	; 0x8003e6 <_cmd+0x1e>
     c82:	d0 e0       	ldi	r29, 0x00	; 0
     c84:	c8 d7       	rcall	.+3984   	; 0x1c16 <UART_read>
     c86:	c8 53       	subi	r28, 0x38	; 56
     c88:	dc 4f       	sbci	r29, 0xFC	; 252
     c8a:	88 83       	st	Y, r24
		// check for complete command
		if ('\n' == _cmd.data[_cmd.index]) {
     c8c:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <_cmd+0x1e>
     c90:	e8 2f       	mov	r30, r24
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	e8 53       	subi	r30, 0x38	; 56
     c96:	fc 4f       	sbci	r31, 0xFC	; 252
     c98:	90 81       	ld	r25, Z
     c9a:	9a 30       	cpi	r25, 0x0A	; 10
     c9c:	29 f4       	brne	.+10     	; 0xca8 <CONS_handle+0x36>
			// replace newline with line terminator
			_cmd.data[_cmd.index] = '\0';
     c9e:	10 82       	st	Z, r1
	}
	
	return;
	
_cons_iterate_command:
	_handle_cmd();
     ca0:	f1 de       	rcall	.-542    	; 0xa84 <_handle_cmd>
     ca2:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <_cmd+0x1e>
	_cmd.index = 0;
     ca6:	09 c0       	rjmp	.+18     	; 0xcba <CONS_handle+0x48>
     ca8:	8e 31       	cpi	r24, 0x1E	; 30
			_cmd.data[_cmd.index] = '\0';
			// handle buffer content as command
			goto _cons_iterate_command;
		}
		else {
			if (_cmd.index >= CONS_CMD_LINE_SIZE) {
     caa:	18 f0       	brcs	.+6      	; 0xcb2 <CONS_handle+0x40>
     cac:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <_cmd+0x1e>
				_cmd.index = 0;
     cb0:	e2 cf       	rjmp	.-60     	; 0xc76 <CONS_handle+0x4>
     cb2:	8f 5f       	subi	r24, 0xFF	; 255
			}
			else {
				_cmd.index ++;
     cb4:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <_cmd+0x1e>
     cb8:	de cf       	rjmp	.-68     	; 0xc76 <CONS_handle+0x4>
     cba:	df 91       	pop	r29
	return;
	
_cons_iterate_command:
	_handle_cmd();
	_cmd.index = 0;
}
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <print>:
     cc0:	2f 92       	push	r2
	// print decimal part
	_print_sint((int)(100 * (num - floor(num))));
}

void print(const char *format, ...)
{
     cc2:	3f 92       	push	r3
     cc4:	4f 92       	push	r4
     cc6:	5f 92       	push	r5
     cc8:	6f 92       	push	r6
     cca:	7f 92       	push	r7
     ccc:	8f 92       	push	r8
     cce:	9f 92       	push	r9
     cd0:	af 92       	push	r10
     cd2:	bf 92       	push	r11
     cd4:	cf 92       	push	r12
     cd6:	df 92       	push	r13
     cd8:	ef 92       	push	r14
     cda:	ff 92       	push	r15
     cdc:	0f 93       	push	r16
     cde:	1f 93       	push	r17
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	2a 97       	sbiw	r28, 0x0a	; 10
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	cd bf       	out	0x3d, r28	; 61
     cf4:	fe 01       	movw	r30, r28
     cf6:	7f 96       	adiw	r30, 0x1f	; 31
     cf8:	81 91       	ld	r24, Z+
     cfa:	91 91       	ld	r25, Z+
     cfc:	7f 01       	movw	r14, r30
	va_list args;
	int index;
	
	va_start(args, format);
     cfe:	00 e0       	ldi	r16, 0x00	; 0
	
	// iterate format
	index = 0;
     d00:	10 e0       	ldi	r17, 0x00	; 0
     d02:	fe 01       	movw	r30, r28
     d04:	31 96       	adiw	r30, 0x01	; 1
     d06:	5f 01       	movw	r10, r30
     d08:	ef 8d       	ldd	r30, Y+31	; 0x1f
	while (format[index] != '\0') {
     d0a:	f8 a1       	ldd	r31, Y+32	; 0x20
     d0c:	e0 0f       	add	r30, r16
     d0e:	f1 1f       	adc	r31, r17
     d10:	80 81       	ld	r24, Z
     d12:	88 23       	and	r24, r24
     d14:	09 f4       	brne	.+2      	; 0xd18 <print+0x58>
     d16:	93 c0       	rjmp	.+294    	; 0xe3e <print+0x17e>
     d18:	85 32       	cpi	r24, 0x25	; 37
		if ('%' == format[index]) {
     d1a:	09 f0       	breq	.+2      	; 0xd1e <print+0x5e>
     d1c:	8c c0       	rjmp	.+280    	; 0xe36 <print+0x176>
     d1e:	81 81       	ldd	r24, Z+1	; 0x01
			switch (format[index + 1]) {
     d20:	86 36       	cpi	r24, 0x66	; 102
     d22:	09 f4       	brne	.+2      	; 0xd26 <print+0x66>
     d24:	49 c0       	rjmp	.+146    	; 0xdb8 <print+0xf8>
     d26:	1c f4       	brge	.+6      	; 0xd2e <print+0x6e>
     d28:	84 36       	cpi	r24, 0x64	; 100
     d2a:	31 f0       	breq	.+12     	; 0xd38 <print+0x78>
     d2c:	81 c0       	rjmp	.+258    	; 0xe30 <print+0x170>
     d2e:	89 36       	cpi	r24, 0x69	; 105
     d30:	19 f0       	breq	.+6      	; 0xd38 <print+0x78>
     d32:	88 37       	cpi	r24, 0x78	; 120
     d34:	51 f0       	breq	.+20     	; 0xd4a <print+0x8a>
     d36:	7c c0       	rjmp	.+248    	; 0xe30 <print+0x170>
				case 'd':
				case 'i':
					_print_sint(va_arg(args, int));
     d38:	67 01       	movw	r12, r14
     d3a:	f2 e0       	ldi	r31, 0x02	; 2
     d3c:	cf 0e       	add	r12, r31
     d3e:	d1 1c       	adc	r13, r1
     d40:	f7 01       	movw	r30, r14
     d42:	80 81       	ld	r24, Z
     d44:	91 81       	ldd	r25, Z+1	; 0x01
     d46:	3f de       	rcall	.-898    	; 0x9c6 <_print_sint>
     d48:	35 c0       	rjmp	.+106    	; 0xdb4 <print+0xf4>
					break;
				case 'x':
					_print_hex(va_arg(args, int));
     d4a:	67 01       	movw	r12, r14
     d4c:	f2 e0       	ldi	r31, 0x02	; 2
     d4e:	cf 0e       	add	r12, r31
     d50:	d1 1c       	adc	r13, r1
     d52:	f7 01       	movw	r30, r14
     d54:	20 81       	ld	r18, Z
     d56:	31 81       	ldd	r19, Z+1	; 0x01
static void _print_hex(int num)
{
	int len;
	char buff[10];
	
	if (0 == num) {
     d58:	21 15       	cp	r18, r1
     d5a:	31 05       	cpc	r19, r1
     d5c:	19 f4       	brne	.+6      	; 0xd64 <print+0xa4>
		UART_write('0');
     d5e:	80 e3       	ldi	r24, 0x30	; 48
     d60:	37 d7       	rcall	.+3694   	; 0x1bd0 <UART_write>
     d62:	28 c0       	rjmp	.+80     	; 0xdb4 <print+0xf4>
     d64:	f5 01       	movw	r30, r10
static void _print_hex(int num)
{
	int len;
	char buff[10];
	
	if (0 == num) {
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	42 2f       	mov	r20, r18
     d6c:	4f 70       	andi	r20, 0x0F	; 15
     d6e:	b9 01       	movw	r22, r18
		UART_write('0');
	} else {
		// convert int to reverse char representation
		len = 0;
		while (num) {
			if ((num & 0xf) < 10) {
     d70:	6f 70       	andi	r22, 0x0F	; 15
     d72:	77 27       	eor	r23, r23
     d74:	6a 30       	cpi	r22, 0x0A	; 10
     d76:	71 05       	cpc	r23, r1
     d78:	14 f4       	brge	.+4      	; 0xd7e <print+0xbe>
     d7a:	40 5d       	subi	r20, 0xD0	; 208
				buff[len++] = '0' + (num & 0xf);
     d7c:	01 c0       	rjmp	.+2      	; 0xd80 <print+0xc0>
     d7e:	49 5c       	subi	r20, 0xC9	; 201
			} else {
				buff[len++] = 'A' + (num & 0xf) - 10;
     d80:	40 83       	st	Z, r20
     d82:	44 e0       	ldi	r20, 0x04	; 4
			}
			num = (unsigned int)num >> 4;
     d84:	36 95       	lsr	r19
     d86:	27 95       	ror	r18
     d88:	4a 95       	dec	r20
     d8a:	e1 f7       	brne	.-8      	; 0xd84 <print+0xc4>
     d8c:	ac 01       	movw	r20, r24
     d8e:	4f 5f       	subi	r20, 0xFF	; 255
     d90:	5f 4f       	sbci	r21, 0xFF	; 255
     d92:	31 96       	adiw	r30, 0x01	; 1
	if (0 == num) {
		UART_write('0');
	} else {
		// convert int to reverse char representation
		len = 0;
		while (num) {
     d94:	21 15       	cp	r18, r1
     d96:	31 05       	cpc	r19, r1
     d98:	11 f0       	breq	.+4      	; 0xd9e <print+0xde>
     d9a:	ca 01       	movw	r24, r20
     d9c:	e6 cf       	rjmp	.-52     	; 0xd6a <print+0xaa>
     d9e:	75 01       	movw	r14, r10
     da0:	e8 0e       	add	r14, r24
     da2:	f9 1e       	adc	r15, r25
			}
			num = (unsigned int)num >> 4;
		}
		
		// print number
		for (len = len -1; len >= 0; len--) {
     da4:	ae 14       	cp	r10, r14
     da6:	bf 04       	cpc	r11, r15
     da8:	29 f0       	breq	.+10     	; 0xdb4 <print+0xf4>
			UART_write(buff[len]);
     daa:	f7 01       	movw	r30, r14
     dac:	82 91       	ld	r24, -Z
     dae:	7f 01       	movw	r14, r30
     db0:	0f d7       	rcall	.+3614   	; 0x1bd0 <UART_write>
     db2:	f8 cf       	rjmp	.-16     	; 0xda4 <print+0xe4>
				case 'd':
				case 'i':
					_print_sint(va_arg(args, int));
					break;
				case 'x':
					_print_hex(va_arg(args, int));
     db4:	76 01       	movw	r14, r12
     db6:	3c c0       	rjmp	.+120    	; 0xe30 <print+0x170>
					break;
				case 'f':
					_print_float((float)va_arg(args, double));
     db8:	17 01       	movw	r2, r14
     dba:	f4 e0       	ldi	r31, 0x04	; 4
     dbc:	2f 0e       	add	r2, r31
     dbe:	31 1c       	adc	r3, r1
     dc0:	f7 01       	movw	r30, r14
     dc2:	c0 80       	ld	r12, Z
     dc4:	d1 80       	ldd	r13, Z+1	; 0x01
     dc6:	e2 80       	ldd	r14, Z+2	; 0x02
     dc8:	f3 80       	ldd	r15, Z+3	; 0x03

static void _print_float(float num)
{
	int num_sign;
	
	num_sign = (num < 0) ? -1 : 1;
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	a9 01       	movw	r20, r18
     dd0:	c7 01       	movw	r24, r14
     dd2:	b6 01       	movw	r22, r12
     dd4:	b5 d7       	rcall	.+3946   	; 0x1d40 <__cmpsf2>
     dd6:	87 ff       	sbrs	r24, 7
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <print+0x122>
     dda:	88 24       	eor	r8, r8
     ddc:	8a 94       	dec	r8
     dde:	98 2c       	mov	r9, r8
     de0:	03 c0       	rjmp	.+6      	; 0xde8 <print+0x128>
     de2:	88 24       	eor	r8, r8
     de4:	83 94       	inc	r8
     de6:	91 2c       	mov	r9, r1
	num = fabs(num);
     de8:	e8 94       	clt
	
	// print integer part
	_print_sint((int)floor(num) * num_sign);
     dea:	f7 f8       	bld	r15, 7
     dec:	c7 01       	movw	r24, r14
     dee:	b6 01       	movw	r22, r12
     df0:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <floor>
     df4:	2b 01       	movw	r4, r22
     df6:	3c 01       	movw	r6, r24
     df8:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <__fixsfsi>
     dfc:	86 9e       	mul	r8, r22
     dfe:	90 01       	movw	r18, r0
     e00:	87 9e       	mul	r8, r23
     e02:	30 0d       	add	r19, r0
     e04:	96 9e       	mul	r9, r22
     e06:	30 0d       	add	r19, r0
	UART_write('.');
     e08:	11 24       	eor	r1, r1
     e0a:	c9 01       	movw	r24, r18
	// print decimal part
	_print_sint((int)(100 * (num - floor(num))));
     e0c:	dc dd       	rcall	.-1096   	; 0x9c6 <_print_sint>
     e0e:	8e e2       	ldi	r24, 0x2E	; 46
     e10:	df d6       	rcall	.+3518   	; 0x1bd0 <UART_write>
     e12:	a3 01       	movw	r20, r6
     e14:	92 01       	movw	r18, r4
     e16:	c7 01       	movw	r24, r14
     e18:	b6 01       	movw	r22, r12
     e1a:	2d d7       	rcall	.+3674   	; 0x1c76 <__subsf3>
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	48 ec       	ldi	r20, 0xC8	; 200
     e22:	52 e4       	ldi	r21, 0x42	; 66
     e24:	0e 94 46 10 	call	0x208c	; 0x208c <__mulsf3>
     e28:	f7 d7       	rcall	.+4078   	; 0x1e18 <__fixsfsi>
     e2a:	cb 01       	movw	r24, r22
     e2c:	cc dd       	rcall	.-1128   	; 0x9c6 <_print_sint>
					break;
				case 'x':
					_print_hex(va_arg(args, int));
					break;
				case 'f':
					_print_float((float)va_arg(args, double));
     e2e:	71 01       	movw	r14, r2
					break;
			}
			index ++;
     e30:	0f 5f       	subi	r16, 0xFF	; 255
     e32:	1f 4f       	sbci	r17, 0xFF	; 255
     e34:	01 c0       	rjmp	.+2      	; 0xe38 <print+0x178>
		} else {
			// write to UART
			UART_write(format[index]);
     e36:	cc d6       	rcall	.+3480   	; 0x1bd0 <UART_write>
     e38:	0f 5f       	subi	r16, 0xFF	; 255
		}
		index ++;
     e3a:	1f 4f       	sbci	r17, 0xFF	; 255
     e3c:	65 cf       	rjmp	.-310    	; 0xd08 <print+0x48>
     e3e:	2a 96       	adiw	r28, 0x0a	; 10
	}
	
	va_end(args); 
}
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	ff 90       	pop	r15
     e54:	ef 90       	pop	r14
     e56:	df 90       	pop	r13
     e58:	cf 90       	pop	r12
     e5a:	bf 90       	pop	r11
     e5c:	af 90       	pop	r10
     e5e:	9f 90       	pop	r9
     e60:	8f 90       	pop	r8
     e62:	7f 90       	pop	r7
     e64:	6f 90       	pop	r6
     e66:	5f 90       	pop	r5
     e68:	4f 90       	pop	r4
     e6a:	3f 90       	pop	r3
     e6c:	2f 90       	pop	r2




void _CONS_test_print(void)
{
     e6e:	08 95       	ret

00000e70 <_CONS_test_print>:
     e70:	1f 93       	push	r17
	print("Test 1: Ana are mere!\r\n");
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	8c ef       	ldi	r24, 0xFC	; 252
     e78:	92 e0       	ldi	r25, 0x02	; 2
     e7a:	9f 93       	push	r25
     e7c:	8f 93       	push	r24
	print("Test 2: Ana are %d mere!\r\n", 123);
     e7e:	20 df       	rcall	.-448    	; 0xcc0 <print>
     e80:	1f 92       	push	r1
     e82:	db e7       	ldi	r29, 0x7B	; 123
     e84:	df 93       	push	r29
     e86:	84 e1       	ldi	r24, 0x14	; 20
     e88:	93 e0       	ldi	r25, 0x03	; 3
     e8a:	9f 93       	push	r25
     e8c:	8f 93       	push	r24
	print("Test 3: Ana are %d mere SI %d pere!\r\n", 123, -1);
     e8e:	18 df       	rcall	.-464    	; 0xcc0 <print>
     e90:	cf ef       	ldi	r28, 0xFF	; 255
     e92:	cf 93       	push	r28
     e94:	cf 93       	push	r28
     e96:	1f 92       	push	r1
     e98:	df 93       	push	r29
     e9a:	8f e2       	ldi	r24, 0x2F	; 47
     e9c:	93 e0       	ldi	r25, 0x03	; 3
     e9e:	9f 93       	push	r25
     ea0:	8f 93       	push	r24
	print("Test 4: Ana are %x mere\r\n", 0xfff3);
     ea2:	0e df       	rcall	.-484    	; 0xcc0 <print>
     ea4:	cf 93       	push	r28
     ea6:	83 ef       	ldi	r24, 0xF3	; 243
     ea8:	8f 93       	push	r24
     eaa:	85 e5       	ldi	r24, 0x55	; 85
     eac:	93 e0       	ldi	r25, 0x03	; 3
     eae:	9f 93       	push	r25
     eb0:	8f 93       	push	r24
	print("Test 5: Ana are %f mere\r\n", 1234.456);
     eb2:	06 df       	rcall	.-500    	; 0xcc0 <print>
     eb4:	84 e4       	ldi	r24, 0x44	; 68
     eb6:	8f 93       	push	r24
     eb8:	1a e9       	ldi	r17, 0x9A	; 154
     eba:	1f 93       	push	r17
     ebc:	de e4       	ldi	r29, 0x4E	; 78
     ebe:	df 93       	push	r29
     ec0:	c8 e9       	ldi	r28, 0x98	; 152
     ec2:	cf 93       	push	r28
     ec4:	8f e6       	ldi	r24, 0x6F	; 111
     ec6:	93 e0       	ldi	r25, 0x03	; 3
     ec8:	9f 93       	push	r25
     eca:	8f 93       	push	r24
     ecc:	f9 de       	rcall	.-526    	; 0xcc0 <print>
	print("Test 6: Ana are %f mere\r\n", -1234.456);
     ece:	84 ec       	ldi	r24, 0xC4	; 196
     ed0:	8f 93       	push	r24
     ed2:	1f 93       	push	r17
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	89 e8       	ldi	r24, 0x89	; 137
     eda:	93 e0       	ldi	r25, 0x03	; 3
     edc:	9f 93       	push	r25
     ede:	8f 93       	push	r24
     ee0:	ef de       	rcall	.-546    	; 0xcc0 <print>
     ee2:	8d b7       	in	r24, 0x3d	; 61
     ee4:	9e b7       	in	r25, 0x3e	; 62
     ee6:	4c 96       	adiw	r24, 0x1c	; 28
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	9e bf       	out	0x3e, r25	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	8d bf       	out	0x3d, r24	; 61
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	1f 91       	pop	r17
     ef8:	08 95       	ret

00000efa <__vector_7>:
     efa:	1f 92       	push	r1
}


// Control system routine
ISR(TIMER2_COMPA_vect)
{	
     efc:	0f 92       	push	r0
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	0f 92       	push	r0
     f02:	11 24       	eor	r1, r1
     f04:	2f 93       	push	r18
     f06:	3f 93       	push	r19
     f08:	4f 93       	push	r20
     f0a:	5f 93       	push	r21
     f0c:	6f 93       	push	r22
     f0e:	7f 93       	push	r23
     f10:	8f 93       	push	r24
     f12:	9f 93       	push	r25
     f14:	af 93       	push	r26
     f16:	bf 93       	push	r27
     f18:	ef 93       	push	r30
     f1a:	ff 93       	push	r31
	// add 10ms to system time
	_pid.system_time += 1;
     f1c:	eb ee       	ldi	r30, 0xEB	; 235
     f1e:	f3 e0       	ldi	r31, 0x03	; 3
     f20:	82 8d       	ldd	r24, Z+26	; 0x1a
     f22:	93 8d       	ldd	r25, Z+27	; 0x1b
     f24:	a4 8d       	ldd	r26, Z+28	; 0x1c
     f26:	b5 8d       	ldd	r27, Z+29	; 0x1d
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	a1 1d       	adc	r26, r1
     f2c:	b1 1d       	adc	r27, r1
     f2e:	82 8f       	std	Z+26, r24	; 0x1a
     f30:	93 8f       	std	Z+27, r25	; 0x1b
     f32:	a4 8f       	std	Z+28, r26	; 0x1c
     f34:	b5 8f       	std	Z+29, r27	; 0x1d
	// update indicator LED
	IND_iterate();
     f36:	37 d5       	rcall	.+2670   	; 0x19a6 <IND_iterate>
}
     f38:	ff 91       	pop	r31
     f3a:	ef 91       	pop	r30
     f3c:	bf 91       	pop	r27
     f3e:	af 91       	pop	r26
     f40:	9f 91       	pop	r25
     f42:	8f 91       	pop	r24
     f44:	7f 91       	pop	r23
     f46:	6f 91       	pop	r22
     f48:	5f 91       	pop	r21
     f4a:	4f 91       	pop	r20
     f4c:	3f 91       	pop	r19
     f4e:	2f 91       	pop	r18
     f50:	0f 90       	pop	r0
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	0f 90       	pop	r0
     f56:	1f 90       	pop	r1
     f58:	18 95       	reti

00000f5a <CTRL_init>:

void CTRL_init(void)
{	
	_pid.system_time = 0;
     f5a:	eb ee       	ldi	r30, 0xEB	; 235
     f5c:	f3 e0       	ldi	r31, 0x03	; 3
     f5e:	12 8e       	std	Z+26, r1	; 0x1a
     f60:	13 8e       	std	Z+27, r1	; 0x1b
     f62:	14 8e       	std	Z+28, r1	; 0x1c
     f64:	15 8e       	std	Z+29, r1	; 0x1d
	_pid.cal_time = 0;
     f66:	16 8e       	std	Z+30, r1	; 0x1e
     f68:	17 8e       	std	Z+31, r1	; 0x1f
     f6a:	10 a2       	std	Z+32, r1	; 0x20
     f6c:	11 a2       	std	Z+33, r1	; 0x21
	_pid.angle_off = 0;
     f6e:	16 8a       	std	Z+22, r1	; 0x16
     f70:	17 8a       	std	Z+23, r1	; 0x17
     f72:	10 8e       	std	Z+24, r1	; 0x18
     f74:	11 8e       	std	Z+25, r1	; 0x19
	_pid.motor_control = false;
     f76:	11 82       	std	Z+1, r1	; 0x01
	// init I2C read handler
	_pid.read_handle_angle = I2C_ADDRESS_NACK;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	82 a3       	std	Z+34, r24	; 0x22
	_pid.read_handle_calib = I2C_ADDRESS_NACK;
     f7c:	83 a3       	std	Z+35, r24	; 0x23
	
	// Fast PWM Mode, TOP @OCR0A
	// Disabled output
	TCCR2A = 3u << WGM00;
     f7e:	83 e0       	ldi	r24, 0x03	; 3
     f80:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	
	// TC TOP value
	OCR2A = CONF_CTRL_TIMER_CNT;
     f84:	8f e0       	ldi	r24, 0x0F	; 15
     f86:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	// reset timer counter
	TCNT2 = 0;
     f8a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
/* Set timer source or no source */
static inline void _timer_set_enable(bool enable)
{
	// Fast PWM Mode, TOP @OCR0A
	// Prescaler 1/1024
	TCCR2B = (uint8_t)enable * ((1u << WGM02) | (CONF_CTRL_CLK << CS20));
     f8e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	// Prescaler 1/1024
	//TCCR2B = (1u << WGM02) | (CONF_CTRL_CLK << CS20);
	_timer_set_enable(true);
	
	// enable OCRA compare interrupt
	TIMSK2 |= (1 << OCIE2A);
     f92:	e0 e7       	ldi	r30, 0x70	; 112
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	82 60       	ori	r24, 0x02	; 2
     f9a:	80 83       	st	Z, r24
     f9c:	08 95       	ret

00000f9e <CTRL_set_PID_terms>:
}

void CTRL_set_PID_terms(float bp, float bi, float bd)
{
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     fa6:	af b7       	in	r26, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fa8:	f8 94       	cli
	{
		_pid.bp = bp;
     faa:	eb ee       	ldi	r30, 0xEB	; 235
     fac:	f3 e0       	ldi	r31, 0x03	; 3
     fae:	62 87       	std	Z+10, r22	; 0x0a
     fb0:	73 87       	std	Z+11, r23	; 0x0b
     fb2:	84 87       	std	Z+12, r24	; 0x0c
     fb4:	95 87       	std	Z+13, r25	; 0x0d
		_pid.bi = bi;
     fb6:	26 87       	std	Z+14, r18	; 0x0e
     fb8:	37 87       	std	Z+15, r19	; 0x0f
     fba:	40 8b       	std	Z+16, r20	; 0x10
     fbc:	51 8b       	std	Z+17, r21	; 0x11
		_pid.bd = bd;
     fbe:	e2 8a       	std	Z+18, r14	; 0x12
     fc0:	f3 8a       	std	Z+19, r15	; 0x13
     fc2:	04 8b       	std	Z+20, r16	; 0x14
     fc4:	15 8b       	std	Z+21, r17	; 0x15
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fc6:	af bf       	out	0x3f, r26	; 63
	}
}
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	ff 90       	pop	r15
     fce:	ef 90       	pop	r14
     fd0:	08 95       	ret

00000fd2 <CTRL_set_PID_bp>:

void CTRL_set_PID_bp(float bp)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     fd2:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fd4:	f8 94       	cli
	{
		_pid.bp = bp;
     fd6:	60 93 f5 03 	sts	0x03F5, r22	; 0x8003f5 <_pid+0xa>
     fda:	70 93 f6 03 	sts	0x03F6, r23	; 0x8003f6 <_pid+0xb>
     fde:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <_pid+0xc>
     fe2:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <_pid+0xd>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fe6:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
     fe8:	08 95       	ret

00000fea <CTRL_set_PID_bi>:
	}
}

void CTRL_set_PID_bi(float bi)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     fea:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fec:	f8 94       	cli
	{
		_pid.bi = bi;	
     fee:	60 93 f9 03 	sts	0x03F9, r22	; 0x8003f9 <_pid+0xe>
     ff2:	70 93 fa 03 	sts	0x03FA, r23	; 0x8003fa <_pid+0xf>
     ff6:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <_pid+0x10>
     ffa:	90 93 fc 03 	sts	0x03FC, r25	; 0x8003fc <_pid+0x11>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ffe:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1000:	08 95       	ret

00001002 <CTRL_set_PID_bd>:
	}
}

void CTRL_set_PID_bd(float bd)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1002:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1004:	f8 94       	cli
	{
		_pid.bd = bd;
    1006:	60 93 fd 03 	sts	0x03FD, r22	; 0x8003fd <_pid+0x12>
    100a:	70 93 fe 03 	sts	0x03FE, r23	; 0x8003fe <_pid+0x13>
    100e:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <_pid+0x14>
    1012:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <_pid+0x15>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1016:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1018:	08 95       	ret

0000101a <CTRL_set_angle_off>:
	}
}

void CTRL_set_angle_off(float off)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    101a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    101c:	f8 94       	cli
	{
		_pid.angle_off = off;
    101e:	60 93 01 04 	sts	0x0401, r22	; 0x800401 <_pid+0x16>
    1022:	70 93 02 04 	sts	0x0402, r23	; 0x800402 <_pid+0x17>
    1026:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <_pid+0x18>
    102a:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <_pid+0x19>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    102e:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1030:	08 95       	ret

00001032 <CTRL_start>:
	}
}

void CTRL_start(void)
{
    1032:	cf 93       	push	r28
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1034:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1036:	f8 94       	cli
	{
		if (!_pid.motor_control) {
    1038:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <_pid+0x1>
    103c:	81 11       	cpse	r24, r1
    103e:	1c c0       	rjmp	.+56     	; 0x1078 <CTRL_start+0x46>
			
			// wait for previous data requests (angle, calib)
			while (I2C_IN_PROGRESS == _pid.read_handle_angle)
    1040:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <_pid+0x22>
    1044:	83 30       	cpi	r24, 0x03	; 3
    1046:	e1 f3       	breq	.-8      	; 0x1040 <CTRL_start+0xe>
				; // wait
			while (I2C_IN_PROGRESS == _pid.read_handle_calib)
    1048:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <_pid+0x23>
    104c:	83 30       	cpi	r24, 0x03	; 3
    104e:	e1 f3       	breq	.-8      	; 0x1048 <CTRL_start+0x16>
				; // wait
			
			// request new data (angle, calibration)
			BNO_request_angle(&(_pid.read_handle_angle));
    1050:	8d e0       	ldi	r24, 0x0D	; 13
    1052:	94 e0       	ldi	r25, 0x04	; 4
    1054:	27 d8       	rcall	.-4018   	; 0xa4 <BNO_request_angle>
			BNO_request_calib(&(_pid.read_handle_calib));
    1056:	8e e0       	ldi	r24, 0x0E	; 14
    1058:	94 e0       	ldi	r25, 0x04	; 4
    105a:	45 d8       	rcall	.-3958   	; 0xe6 <BNO_request_calib>
			
			// Start motors
			MOTOR_A_speed(0);
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	35 d5       	rcall	.+2666   	; 0x1acc <MOTOR_A_speed>
			MOTOR_B_speed(0);
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	3c d5       	rcall	.+2680   	; 0x1ae0 <MOTOR_B_speed>
void MOTOR_B_speed(int16_t speed);

/* Start both motors */
static inline void MOTORS_on(void)
{
	TCCR0B = CONF_MOTOR_CLK;
    1068:	83 e0       	ldi	r24, 0x03	; 3
    106a:	85 bd       	out	0x25, r24	; 37
	DDRD |= (1 << PORTD6) | (1 << PORTD5);
    106c:	8a b1       	in	r24, 0x0a	; 10
    106e:	80 66       	ori	r24, 0x60	; 96
    1070:	8a b9       	out	0x0a, r24	; 10
			MOTORS_on();	
			
			// enable control system output to motors
			_pid.motor_control = true;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <_pid+0x1>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1078:	cf bf       	out	0x3f, r28	; 63
		}
	}
}
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret

0000107e <CTRL_stop>:


void CTRL_stop(void)
{
    107e:	cf 93       	push	r28
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1080:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1082:	f8 94       	cli


/* Stop both motors */ 
static inline void MOTORS_off(void)
{
	TCCR0B = TC0_CLK_OFF;
    1084:	15 bc       	out	0x25, r1	; 37
	DDRD &= ~(1 << PORTD6) & ~(1 << PORTD5);
    1086:	8a b1       	in	r24, 0x0a	; 10
    1088:	8f 79       	andi	r24, 0x9F	; 159
    108a:	8a b9       	out	0x0a, r24	; 10
	{
		// turn off the motors
		MOTORS_off();
		// disable motor control
		_pid.motor_control = false;
    108c:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <_pid+0x1>
		// Indicator LED to ERROR
		IND_set_mode(IND_ERROR);
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	27 d4       	rcall	.+2126   	; 0x18e2 <IND_set_mode>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1094:	cf bf       	out	0x3f, r28	; 63
	}
}
    1096:	cf 91       	pop	r28
    1098:	08 95       	ret

0000109a <CTRL_get_time_ms>:
	}
}

uint32_t CTRL_get_time_ms(void)
{
	return _pid.system_time;
    109a:	60 91 05 04 	lds	r22, 0x0405	; 0x800405 <_pid+0x1a>
    109e:	70 91 06 04 	lds	r23, 0x0406	; 0x800406 <_pid+0x1b>
    10a2:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <_pid+0x1c>
    10a6:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <_pid+0x1d>
}
    10aa:	08 95       	ret

000010ac <CTRL_get_elapsed_ms>:


uint32_t CTRL_get_elapsed_ms(uint32_t past)
{	
    10ac:	cf 92       	push	r12
    10ae:	df 92       	push	r13
    10b0:	ef 92       	push	r14
    10b2:	ff 92       	push	r15
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
	uint32_t present = _pid.system_time;
    10b8:	00 91 05 04 	lds	r16, 0x0405	; 0x800405 <_pid+0x1a>
    10bc:	10 91 06 04 	lds	r17, 0x0406	; 0x800406 <_pid+0x1b>
    10c0:	20 91 07 04 	lds	r18, 0x0407	; 0x800407 <_pid+0x1c>
    10c4:	30 91 08 04 	lds	r19, 0x0408	; 0x800408 <_pid+0x1d>
	
	return (past < present) 
		 ? (present - past) 
		 : (past - present);
    10c8:	60 17       	cp	r22, r16
    10ca:	71 07       	cpc	r23, r17
    10cc:	82 07       	cpc	r24, r18
    10ce:	93 07       	cpc	r25, r19
    10d0:	48 f4       	brcc	.+18     	; 0x10e4 <CTRL_get_elapsed_ms+0x38>
    10d2:	68 01       	movw	r12, r16
    10d4:	79 01       	movw	r14, r18
    10d6:	c6 1a       	sub	r12, r22
    10d8:	d7 0a       	sbc	r13, r23
    10da:	e8 0a       	sbc	r14, r24
    10dc:	f9 0a       	sbc	r15, r25
    10de:	c7 01       	movw	r24, r14
    10e0:	b6 01       	movw	r22, r12
    10e2:	04 c0       	rjmp	.+8      	; 0x10ec <CTRL_get_elapsed_ms+0x40>
    10e4:	60 1b       	sub	r22, r16
    10e6:	71 0b       	sbc	r23, r17
    10e8:	82 0b       	sbc	r24, r18
    10ea:	93 0b       	sbc	r25, r19
}
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	df 90       	pop	r13
    10f6:	cf 90       	pop	r12
    10f8:	08 95       	ret

000010fa <CTRL_handle>:
	MOTOR_A_speed((int16_t)cmd);
	MOTOR_B_speed((int16_t)cmd);
}

void CTRL_handle(void)
{
    10fa:	4f 92       	push	r4
    10fc:	5f 92       	push	r5
    10fe:	6f 92       	push	r6
    1100:	7f 92       	push	r7
    1102:	8f 92       	push	r8
    1104:	9f 92       	push	r9
    1106:	af 92       	push	r10
    1108:	bf 92       	push	r11
    110a:	cf 92       	push	r12
    110c:	df 92       	push	r13
    110e:	ef 92       	push	r14
    1110:	ff 92       	push	r15
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	64 97       	sbiw	r28, 0x14	; 20
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
	BNO_calib_t BNO_calib_data;
	float angle;
	
	
	// handle once every 10ms
	if (CTRL_get_elapsed_ms(timer_PID) > CONF_CTRL_PID_LOOP_INTERVAL) {
    1126:	60 91 e7 03 	lds	r22, 0x03E7	; 0x8003e7 <timer_PID.2143>
    112a:	70 91 e8 03 	lds	r23, 0x03E8	; 0x8003e8 <timer_PID.2143+0x1>
    112e:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <timer_PID.2143+0x2>
    1132:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <timer_PID.2143+0x3>
    1136:	ba df       	rcall	.-140    	; 0x10ac <CTRL_get_elapsed_ms>
    1138:	6b 30       	cpi	r22, 0x0B	; 11
    113a:	71 05       	cpc	r23, r1
    113c:	81 05       	cpc	r24, r1
    113e:	91 05       	cpc	r25, r1
    1140:	08 f4       	brcc	.+2      	; 0x1144 <CTRL_handle+0x4a>
    1142:	33 c1       	rjmp	.+614    	; 0x13aa <CTRL_handle+0x2b0>
	}
}

uint32_t CTRL_get_time_ms(void)
{
	return _pid.system_time;
    1144:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <_pid+0x1a>
    1148:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <_pid+0x1b>
    114c:	a0 91 07 04 	lds	r26, 0x0407	; 0x800407 <_pid+0x1c>
    1150:	b0 91 08 04 	lds	r27, 0x0408	; 0x800408 <_pid+0x1d>
	float angle;
	
	
	// handle once every 10ms
	if (CTRL_get_elapsed_ms(timer_PID) > CONF_CTRL_PID_LOOP_INTERVAL) {
		timer_PID = CTRL_get_time_ms();
    1154:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <timer_PID.2143>
    1158:	90 93 e8 03 	sts	0x03E8, r25	; 0x8003e8 <timer_PID.2143+0x1>
    115c:	a0 93 e9 03 	sts	0x03E9, r26	; 0x8003e9 <timer_PID.2143+0x2>
    1160:	b0 93 ea 03 	sts	0x03EA, r27	; 0x8003ea <timer_PID.2143+0x3>
		
		///////// {   PID   } //////////
		// if angle data not ready
		while((I2C_IN_PROGRESS == _pid.read_handle_angle))
    1164:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <_pid+0x22>
    1168:	83 30       	cpi	r24, 0x03	; 3
    116a:	e1 f3       	breq	.-8      	; 0x1164 <CTRL_handle+0x6a>
			; // wait
		
		// current angle + calibration offset
		BNO_angle_data = BNO_angle();
    116c:	ce 01       	movw	r24, r28
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	0e 94 90 00 	call	0x120	; 0x120 <BNO_angle>
		angle = BNO_angle_data.z + _pid.angle_off;
    1174:	60 91 01 04 	lds	r22, 0x0401	; 0x800401 <_pid+0x16>
    1178:	70 91 02 04 	lds	r23, 0x0402	; 0x800402 <_pid+0x17>
    117c:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <_pid+0x18>
    1180:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <_pid+0x19>
    1184:	29 85       	ldd	r18, Y+9	; 0x09
    1186:	3a 85       	ldd	r19, Y+10	; 0x0a
    1188:	4b 85       	ldd	r20, Y+11	; 0x0b
    118a:	5c 85       	ldd	r21, Y+12	; 0x0c
    118c:	75 d5       	rcall	.+2794   	; 0x1c78 <__addsf3>
    118e:	6b 01       	movw	r12, r22
    1190:	7c 01       	movw	r14, r24
		// request new reading
		BNO_request_angle(&(_pid.read_handle_angle));
    1192:	8d e0       	ldi	r24, 0x0D	; 13
    1194:	94 e0       	ldi	r25, 0x04	; 4
    1196:	0e 94 52 00 	call	0xa4	; 0xa4 <BNO_request_angle>
	float cmd;
	
	
#if defined (SAFETY_ANGLE)
	// !!! safety stop !!!
	if (fabs(angle) > CONF_CTRL_MAX_ANGLE) {
    119a:	c7 01       	movw	r24, r14
    119c:	b6 01       	movw	r22, r12
    119e:	9f 77       	andi	r25, 0x7F	; 127
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	4c e0       	ldi	r20, 0x0C	; 12
    11a6:	52 e4       	ldi	r21, 0x42	; 66
    11a8:	6d d7       	rcall	.+3802   	; 0x2084 <__gesf2>
    11aa:	18 16       	cp	r1, r24
		// stop routine and indicate error
		CTRL_stop();
    11ac:	0c f4       	brge	.+2      	; 0x11b0 <CTRL_handle+0xb6>
	}
#endif

	// motor control is disabled
	if (!_pid.motor_control) {
    11ae:	67 df       	rcall	.-306    	; 0x107e <CTRL_stop>
    11b0:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <_pid+0x1>
		MOTOR_A_speed(0);
    11b4:	81 11       	cpse	r24, r1
    11b6:	0b c0       	rjmp	.+22     	; 0x11ce <CTRL_handle+0xd4>
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
		MOTOR_B_speed(0);
    11bc:	87 d4       	rcall	.+2318   	; 0x1acc <MOTOR_A_speed>
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	8e d4       	rcall	.+2332   	; 0x1ae0 <MOTOR_B_speed>


/* Stop both motors */ 
static inline void MOTORS_off(void)
{
	TCCR0B = TC0_CLK_OFF;
    11c4:	15 bc       	out	0x25, r1	; 37
	DDRD &= ~(1 << PORTD6) & ~(1 << PORTD5);
    11c6:	8a b1       	in	r24, 0x0a	; 10
    11c8:	8f 79       	andi	r24, 0x9F	; 159
    11ca:	8a b9       	out	0x0a, r24	; 10
    11cc:	ee c0       	rjmp	.+476    	; 0x13aa <CTRL_handle+0x2b0>
		MOTORS_off();
		return;
	}

	// pass through PID
	cmd =  (_pid.bp * angle)
    11ce:	40 90 f5 03 	lds	r4, 0x03F5	; 0x8003f5 <_pid+0xa>
    11d2:	50 90 f6 03 	lds	r5, 0x03F6	; 0x8003f6 <_pid+0xb>
    11d6:	60 90 f7 03 	lds	r6, 0x03F7	; 0x8003f7 <_pid+0xc>
    11da:	70 90 f8 03 	lds	r7, 0x03F8	; 0x8003f8 <_pid+0xd>
		+  (_pid.bd * (_pid.angle_old - angle))
    11de:	80 90 fd 03 	lds	r8, 0x03FD	; 0x8003fd <_pid+0x12>
    11e2:	90 90 fe 03 	lds	r9, 0x03FE	; 0x8003fe <_pid+0x13>
    11e6:	a0 90 ff 03 	lds	r10, 0x03FF	; 0x8003ff <_pid+0x14>
    11ea:	b0 90 00 04 	lds	r11, 0x0400	; 0x800400 <_pid+0x15>
    11ee:	60 91 ed 03 	lds	r22, 0x03ED	; 0x8003ed <_pid+0x2>
    11f2:	70 91 ee 03 	lds	r23, 0x03EE	; 0x8003ee <_pid+0x3>
    11f6:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <_pid+0x4>
    11fa:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <_pid+0x5>
		+  (_pid.bi * _pid.angle_sum);
    11fe:	20 91 f9 03 	lds	r18, 0x03F9	; 0x8003f9 <_pid+0xe>
    1202:	30 91 fa 03 	lds	r19, 0x03FA	; 0x8003fa <_pid+0xf>
    1206:	40 91 fb 03 	lds	r20, 0x03FB	; 0x8003fb <_pid+0x10>
    120a:	50 91 fc 03 	lds	r21, 0x03FC	; 0x8003fc <_pid+0x11>
    120e:	2d 87       	std	Y+13, r18	; 0x0d
    1210:	3e 87       	std	Y+14, r19	; 0x0e
    1212:	4f 87       	std	Y+15, r20	; 0x0f
    1214:	58 8b       	std	Y+16, r21	; 0x10
    1216:	20 91 f1 03 	lds	r18, 0x03F1	; 0x8003f1 <_pid+0x6>
    121a:	30 91 f2 03 	lds	r19, 0x03F2	; 0x8003f2 <_pid+0x7>
    121e:	40 91 f3 03 	lds	r20, 0x03F3	; 0x8003f3 <_pid+0x8>
    1222:	50 91 f4 03 	lds	r21, 0x03F4	; 0x8003f4 <_pid+0x9>
    1226:	29 8b       	std	Y+17, r18	; 0x11
    1228:	3a 8b       	std	Y+18, r19	; 0x12
		MOTORS_off();
		return;
	}

	// pass through PID
	cmd =  (_pid.bp * angle)
    122a:	4b 8b       	std	Y+19, r20	; 0x13
    122c:	5c 8b       	std	Y+20, r21	; 0x14
    122e:	a7 01       	movw	r20, r14
    1230:	96 01       	movw	r18, r12
    1232:	21 d5       	rcall	.+2626   	; 0x1c76 <__subsf3>
    1234:	a5 01       	movw	r20, r10
    1236:	94 01       	movw	r18, r8
    1238:	29 d7       	rcall	.+3666   	; 0x208c <__mulsf3>
    123a:	4b 01       	movw	r8, r22
    123c:	5c 01       	movw	r10, r24
    123e:	a3 01       	movw	r20, r6
    1240:	92 01       	movw	r18, r4
    1242:	c7 01       	movw	r24, r14
    1244:	b6 01       	movw	r22, r12
    1246:	22 d7       	rcall	.+3652   	; 0x208c <__mulsf3>
    1248:	9b 01       	movw	r18, r22
    124a:	ac 01       	movw	r20, r24
    124c:	c5 01       	movw	r24, r10
    124e:	b4 01       	movw	r22, r8
    1250:	13 d5       	rcall	.+2598   	; 0x1c78 <__addsf3>
    1252:	4b 01       	movw	r8, r22
    1254:	5c 01       	movw	r10, r24
    1256:	29 89       	ldd	r18, Y+17	; 0x11
    1258:	3a 89       	ldd	r19, Y+18	; 0x12
    125a:	4b 89       	ldd	r20, Y+19	; 0x13
    125c:	5c 89       	ldd	r21, Y+20	; 0x14
    125e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1260:	7e 85       	ldd	r23, Y+14	; 0x0e
    1262:	8f 85       	ldd	r24, Y+15	; 0x0f
    1264:	98 89       	ldd	r25, Y+16	; 0x10
    1266:	12 d7       	rcall	.+3620   	; 0x208c <__mulsf3>
    1268:	9b 01       	movw	r18, r22
    126a:	ac 01       	movw	r20, r24
    126c:	c5 01       	movw	r24, r10
    126e:	b4 01       	movw	r22, r8
    1270:	03 d5       	rcall	.+2566   	; 0x1c78 <__addsf3>
    1272:	4b 01       	movw	r8, r22
    1274:	5c 01       	movw	r10, r24
		+  (_pid.bd * (_pid.angle_old - angle))
		+  (_pid.bi * _pid.angle_sum);
	// update PID
	_pid.angle_old = angle;
    1276:	c0 92 ed 03 	sts	0x03ED, r12	; 0x8003ed <_pid+0x2>
    127a:	d0 92 ee 03 	sts	0x03EE, r13	; 0x8003ee <_pid+0x3>
    127e:	e0 92 ef 03 	sts	0x03EF, r14	; 0x8003ef <_pid+0x4>
    1282:	f0 92 f0 03 	sts	0x03F0, r15	; 0x8003f0 <_pid+0x5>
	// integral sum
	_pid.angle_sum += angle;
    1286:	20 91 f1 03 	lds	r18, 0x03F1	; 0x8003f1 <_pid+0x6>
    128a:	30 91 f2 03 	lds	r19, 0x03F2	; 0x8003f2 <_pid+0x7>
    128e:	40 91 f3 03 	lds	r20, 0x03F3	; 0x8003f3 <_pid+0x8>
    1292:	50 91 f4 03 	lds	r21, 0x03F4	; 0x8003f4 <_pid+0x9>
    1296:	c7 01       	movw	r24, r14
    1298:	b6 01       	movw	r22, r12
    129a:	ee d4       	rcall	.+2524   	; 0x1c78 <__addsf3>
    129c:	60 93 f1 03 	sts	0x03F1, r22	; 0x8003f1 <_pid+0x6>
    12a0:	70 93 f2 03 	sts	0x03F2, r23	; 0x8003f2 <_pid+0x7>
    12a4:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <_pid+0x8>
    12a8:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <_pid+0x9>
	// cap integral sum
	if (_pid.angle_sum > CONF_CTRL_PID_MAX_SUM) {
    12ac:	60 91 f1 03 	lds	r22, 0x03F1	; 0x8003f1 <_pid+0x6>
    12b0:	70 91 f2 03 	lds	r23, 0x03F2	; 0x8003f2 <_pid+0x7>
    12b4:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <_pid+0x8>
    12b8:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <_pid+0x9>
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	48 ec       	ldi	r20, 0xC8	; 200
    12c2:	52 e4       	ldi	r21, 0x42	; 66
    12c4:	df d6       	rcall	.+3518   	; 0x2084 <__gesf2>
    12c6:	18 16       	cp	r1, r24
		_pid.angle_sum = CONF_CTRL_PID_MAX_SUM;
    12c8:	2c f4       	brge	.+10     	; 0x12d4 <CTRL_handle+0x1da>
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	a8 ec       	ldi	r26, 0xC8	; 200
    12d0:	b2 e4       	ldi	r27, 0x42	; 66
	}
	else if (_pid.angle_sum < -CONF_CTRL_PID_MAX_SUM) {
    12d2:	13 c0       	rjmp	.+38     	; 0x12fa <CTRL_handle+0x200>
    12d4:	60 91 f1 03 	lds	r22, 0x03F1	; 0x8003f1 <_pid+0x6>
    12d8:	70 91 f2 03 	lds	r23, 0x03F2	; 0x8003f2 <_pid+0x7>
    12dc:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <_pid+0x8>
    12e0:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <_pid+0x9>
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	48 ec       	ldi	r20, 0xC8	; 200
    12ea:	52 ec       	ldi	r21, 0xC2	; 194
    12ec:	29 d5       	rcall	.+2642   	; 0x1d40 <__cmpsf2>
    12ee:	87 ff       	sbrs	r24, 7
    12f0:	0c c0       	rjmp	.+24     	; 0x130a <CTRL_handle+0x210>
		_pid.angle_sum = -CONF_CTRL_PID_MAX_SUM;
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	a8 ec       	ldi	r26, 0xC8	; 200
    12f8:	b2 ec       	ldi	r27, 0xC2	; 194
    12fa:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <_pid+0x6>
    12fe:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <_pid+0x7>
    1302:	a0 93 f3 03 	sts	0x03F3, r26	; 0x8003f3 <_pid+0x8>
    1306:	b0 93 f4 03 	sts	0x03F4, r27	; 0x8003f4 <_pid+0x9>
	}
	
	// zero angle
	if (fabs(cmd) < CONF_CTRL_PID_MIN_CMD) {
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	44 eb       	ldi	r20, 0xB4	; 180
    1310:	52 e4       	ldi	r21, 0x42	; 66
    1312:	c5 01       	movw	r24, r10
    1314:	b4 01       	movw	r22, r8
    1316:	9f 77       	andi	r25, 0x7F	; 127
    1318:	13 d5       	rcall	.+2598   	; 0x1d40 <__cmpsf2>
    131a:	87 ff       	sbrs	r24, 7
		cmd = 0;
		// turn off PWM
		DDRB &= ~((1 << PORTB0) | (1 << PORTB1));
    131c:	07 c0       	rjmp	.+14     	; 0x132c <CTRL_handle+0x232>
    131e:	84 b1       	in	r24, 0x04	; 4
    1320:	8c 7f       	andi	r24, 0xFC	; 252
		_pid.angle_sum = -CONF_CTRL_PID_MAX_SUM;
	}
	
	// zero angle
	if (fabs(cmd) < CONF_CTRL_PID_MIN_CMD) {
		cmd = 0;
    1322:	84 b9       	out	0x04, r24	; 4
    1324:	81 2c       	mov	r8, r1
    1326:	91 2c       	mov	r9, r1
		// turn off PWM
		DDRB &= ~((1 << PORTB0) | (1 << PORTB1));
		} else {
		// enable PWM
		DDRB |= (1 << PORTB0) | (1 << PORTB1);
    1328:	54 01       	movw	r10, r8
    132a:	22 c0       	rjmp	.+68     	; 0x1370 <CTRL_handle+0x276>
    132c:	84 b1       	in	r24, 0x04	; 4
		// cap between -255 and 255
		if (cmd > 255.0f) {
    132e:	83 60       	ori	r24, 0x03	; 3
    1330:	84 b9       	out	0x04, r24	; 4
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	4f e7       	ldi	r20, 0x7F	; 127
    1338:	53 e4       	ldi	r21, 0x43	; 67
    133a:	c5 01       	movw	r24, r10
    133c:	b4 01       	movw	r22, r8
    133e:	a2 d6       	rcall	.+3396   	; 0x2084 <__gesf2>
    1340:	18 16       	cp	r1, r24
			cmd = 255.0f;
		}
		else if (cmd < -255.0f) {
    1342:	84 f0       	brlt	.+32     	; 0x1364 <CTRL_handle+0x26a>
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	4f e7       	ldi	r20, 0x7F	; 127
    134a:	53 ec       	ldi	r21, 0xC3	; 195
    134c:	c5 01       	movw	r24, r10
    134e:	b4 01       	movw	r22, r8
    1350:	f7 d4       	rcall	.+2542   	; 0x1d40 <__cmpsf2>
			cmd = -255.0f;
    1352:	87 ff       	sbrs	r24, 7
    1354:	0d c0       	rjmp	.+26     	; 0x1370 <CTRL_handle+0x276>
    1356:	81 2c       	mov	r8, r1
    1358:	91 2c       	mov	r9, r1
    135a:	9f e7       	ldi	r25, 0x7F	; 127
    135c:	a9 2e       	mov	r10, r25
    135e:	93 ec       	ldi	r25, 0xC3	; 195
		} else {
		// enable PWM
		DDRB |= (1 << PORTB0) | (1 << PORTB1);
		// cap between -255 and 255
		if (cmd > 255.0f) {
			cmd = 255.0f;
    1360:	b9 2e       	mov	r11, r25
    1362:	06 c0       	rjmp	.+12     	; 0x1370 <CTRL_handle+0x276>
    1364:	81 2c       	mov	r8, r1
    1366:	91 2c       	mov	r9, r1
    1368:	8f e7       	ldi	r24, 0x7F	; 127
    136a:	a8 2e       	mov	r10, r24
			cmd = -255.0f;
		}
	}
	
	// send motor commands
	MOTOR_A_speed((int16_t)cmd);
    136c:	83 e4       	ldi	r24, 0x43	; 67
    136e:	b8 2e       	mov	r11, r24
    1370:	c5 01       	movw	r24, r10
    1372:	b4 01       	movw	r22, r8
    1374:	51 d5       	rcall	.+2722   	; 0x1e18 <__fixsfsi>
    1376:	6b 01       	movw	r12, r22
    1378:	7c 01       	movw	r14, r24
    137a:	cb 01       	movw	r24, r22
	MOTOR_B_speed((int16_t)cmd);
    137c:	a7 d3       	rcall	.+1870   	; 0x1acc <MOTOR_A_speed>
			CTRL_load_calib_from_EEPROM();
		}
		
		// TODO: send calibration data on UART
	}
}
    137e:	c6 01       	movw	r24, r12
    1380:	64 96       	adiw	r28, 0x14	; 20
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	df 90       	pop	r13
    1396:	cf 90       	pop	r12
    1398:	bf 90       	pop	r11
    139a:	af 90       	pop	r10
    139c:	9f 90       	pop	r9
    139e:	8f 90       	pop	r8
    13a0:	7f 90       	pop	r7
    13a2:	6f 90       	pop	r6
    13a4:	5f 90       	pop	r5
		}
	}
	
	// send motor commands
	MOTOR_A_speed((int16_t)cmd);
	MOTOR_B_speed((int16_t)cmd);
    13a6:	4f 90       	pop	r4
    13a8:	9b c3       	rjmp	.+1846   	; 0x1ae0 <MOTOR_B_speed>
			CTRL_load_calib_from_EEPROM();
		}
		
		// TODO: send calibration data on UART
	}
}
    13aa:	64 96       	adiw	r28, 0x14	; 20
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	ff 90       	pop	r15
    13bc:	ef 90       	pop	r14
    13be:	df 90       	pop	r13
    13c0:	cf 90       	pop	r12
    13c2:	bf 90       	pop	r11
    13c4:	af 90       	pop	r10
    13c6:	9f 90       	pop	r9
    13c8:	8f 90       	pop	r8
    13ca:	7f 90       	pop	r7
    13cc:	6f 90       	pop	r6
    13ce:	5f 90       	pop	r5
}


int32_t CTRL_get_last_angle(void)
{
	return _pid.angle_old;
    13d0:	4f 90       	pop	r4
    13d2:	08 95       	ret

000013d4 <CTRL_get_last_angle>:
    13d4:	60 91 ed 03 	lds	r22, 0x03ED	; 0x8003ed <_pid+0x2>
    13d8:	70 91 ee 03 	lds	r23, 0x03EE	; 0x8003ee <_pid+0x3>
    13dc:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <_pid+0x4>
    13e0:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <_pid+0x5>
}
    13e4:	19 c5       	rjmp	.+2610   	; 0x1e18 <__fixsfsi>

000013e6 <CTRL_get_calib>:

struct CTRL_calib_t CTRL_get_calib(void)
{
    13e6:	0f 93       	push	r16
    13e8:	1f 93       	push	r17
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	aa 97       	sbiw	r28, 0x2a	; 42
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	8c 01       	movw	r16, r24
	struct CTRL_calib_t calib;
	
	// set calibration as valid
	calib.validation = CALIB_VALIDATION;
    1400:	85 ea       	ldi	r24, 0xA5	; 165
    1402:	95 ea       	ldi	r25, 0xA5	; 165
    1404:	dc 01       	movw	r26, r24
    1406:	89 83       	std	Y+1, r24	; 0x01
    1408:	9a 83       	std	Y+2, r25	; 0x02
    140a:	ab 83       	std	Y+3, r26	; 0x03
    140c:	bc 83       	std	Y+4, r27	; 0x04
	// PID coeficients
	calib.bp = _pid.bp;
    140e:	eb ee       	ldi	r30, 0xEB	; 235
    1410:	f3 e0       	ldi	r31, 0x03	; 3
    1412:	82 85       	ldd	r24, Z+10	; 0x0a
    1414:	93 85       	ldd	r25, Z+11	; 0x0b
    1416:	a4 85       	ldd	r26, Z+12	; 0x0c
    1418:	b5 85       	ldd	r27, Z+13	; 0x0d
    141a:	8d 83       	std	Y+5, r24	; 0x05
    141c:	9e 83       	std	Y+6, r25	; 0x06
    141e:	af 83       	std	Y+7, r26	; 0x07
    1420:	b8 87       	std	Y+8, r27	; 0x08
	calib.bi = _pid.bi;
    1422:	86 85       	ldd	r24, Z+14	; 0x0e
    1424:	97 85       	ldd	r25, Z+15	; 0x0f
    1426:	a0 89       	ldd	r26, Z+16	; 0x10
    1428:	b1 89       	ldd	r27, Z+17	; 0x11
    142a:	89 87       	std	Y+9, r24	; 0x09
    142c:	9a 87       	std	Y+10, r25	; 0x0a
    142e:	ab 87       	std	Y+11, r26	; 0x0b
    1430:	bc 87       	std	Y+12, r27	; 0x0c
	calib.bd = _pid.bd;
    1432:	82 89       	ldd	r24, Z+18	; 0x12
    1434:	93 89       	ldd	r25, Z+19	; 0x13
    1436:	a4 89       	ldd	r26, Z+20	; 0x14
    1438:	b5 89       	ldd	r27, Z+21	; 0x15
    143a:	8d 87       	std	Y+13, r24	; 0x0d
    143c:	9e 87       	std	Y+14, r25	; 0x0e
    143e:	af 87       	std	Y+15, r26	; 0x0f
    1440:	b8 8b       	std	Y+16, r27	; 0x10
	// IMU sensor offset
	calib.angle_off = _pid.angle_off;
    1442:	86 89       	ldd	r24, Z+22	; 0x16
    1444:	97 89       	ldd	r25, Z+23	; 0x17
    1446:	a0 8d       	ldd	r26, Z+24	; 0x18
    1448:	b1 8d       	ldd	r27, Z+25	; 0x19
    144a:	89 8b       	std	Y+17, r24	; 0x11
    144c:	9a 8b       	std	Y+18, r25	; 0x12
    144e:	ab 8b       	std	Y+19, r26	; 0x13
    1450:	bc 8b       	std	Y+20, r27	; 0x14
	// IMU sensor calibration
	BNO_read_reg(
    1452:	46 e1       	ldi	r20, 0x16	; 22
    1454:	be 01       	movw	r22, r28
    1456:	6b 5e       	subi	r22, 0xEB	; 235
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	85 e5       	ldi	r24, 0x55	; 85
    145c:	0e 94 02 01 	call	0x204	; 0x204 <BNO_read_reg>
		ACCEL_OFFSET_X_LSB_ADDR, 
		(uint8_t *)&(calib.bno), 
		MAG_RADIUS_MSB_ADDR - ACCEL_OFFSET_X_LSB_ADDR + 1
	);
	
	return calib;
    1460:	8a e2       	ldi	r24, 0x2A	; 42
    1462:	fe 01       	movw	r30, r28
    1464:	31 96       	adiw	r30, 0x01	; 1
    1466:	d8 01       	movw	r26, r16
    1468:	01 90       	ld	r0, Z+
    146a:	0d 92       	st	X+, r0
    146c:	8a 95       	dec	r24
    146e:	e1 f7       	brne	.-8      	; 0x1468 <CTRL_get_calib+0x82>
}
    1470:	c8 01       	movw	r24, r16
    1472:	aa 96       	adiw	r28, 0x2a	; 42
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16

void CTRL_load_calib_from_EEPROM(void)
{
    1486:	08 95       	ret

00001488 <CTRL_load_calib_from_EEPROM>:
    1488:	ef 92       	push	r14
    148a:	ff 92       	push	r15
    148c:	1f 93       	push	r17
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	aa 97       	sbiw	r28, 0x2a	; 42
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
	struct CTRL_calib_t calib;
	
	// load from EEPROM
	EEPROM_read_array(0, (uint8_t *)&calib, sizeof(calib));
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	4a e2       	ldi	r20, 0x2A	; 42
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	be 01       	movw	r22, r28
    14a8:	6f 5f       	subi	r22, 0xFF	; 255
    14aa:	7f 4f       	sbci	r23, 0xFF	; 255
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	a8 d0       	rcall	.+336    	; 0x1602 <EEPROM_read_array>
	
	// Check data VALID
	if (CALIB_VALIDATION == calib.validation) {
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	9a 81       	ldd	r25, Y+2	; 0x02
    14b6:	ab 81       	ldd	r26, Y+3	; 0x03
    14b8:	bc 81       	ldd	r27, Y+4	; 0x04
    14ba:	85 3a       	cpi	r24, 0xA5	; 165
    14bc:	95 4a       	sbci	r25, 0xA5	; 165
    14be:	a5 4a       	sbci	r26, 0xA5	; 165
    14c0:	b5 4a       	sbci	r27, 0xA5	; 165
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <CTRL_load_calib_from_EEPROM+0x3e>
    14c4:	5c c0       	rjmp	.+184    	; 0x157e <CTRL_load_calib_from_EEPROM+0xf6>
		// set PID parameters
		_pid.bp = calib.bp;
    14c6:	8d 81       	ldd	r24, Y+5	; 0x05
    14c8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ca:	af 81       	ldd	r26, Y+7	; 0x07
    14cc:	b8 85       	ldd	r27, Y+8	; 0x08
    14ce:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <_pid+0xa>
    14d2:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <_pid+0xb>
    14d6:	a0 93 f7 03 	sts	0x03F7, r26	; 0x8003f7 <_pid+0xc>
    14da:	b0 93 f8 03 	sts	0x03F8, r27	; 0x8003f8 <_pid+0xd>
		_pid.bi = calib.bi;
    14de:	89 85       	ldd	r24, Y+9	; 0x09
    14e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e2:	ab 85       	ldd	r26, Y+11	; 0x0b
    14e4:	bc 85       	ldd	r27, Y+12	; 0x0c
    14e6:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <_pid+0xe>
    14ea:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <_pid+0xf>
    14ee:	a0 93 fb 03 	sts	0x03FB, r26	; 0x8003fb <_pid+0x10>
    14f2:	b0 93 fc 03 	sts	0x03FC, r27	; 0x8003fc <_pid+0x11>
		_pid.bd = calib.bd;
    14f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14fa:	af 85       	ldd	r26, Y+15	; 0x0f
    14fc:	b8 89       	ldd	r27, Y+16	; 0x10
    14fe:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <_pid+0x12>
    1502:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <_pid+0x13>
    1506:	a0 93 ff 03 	sts	0x03FF, r26	; 0x8003ff <_pid+0x14>
    150a:	b0 93 00 04 	sts	0x0400, r27	; 0x800400 <_pid+0x15>
		_pid.angle_off = calib.angle_off;
    150e:	89 89       	ldd	r24, Y+17	; 0x11
    1510:	9a 89       	ldd	r25, Y+18	; 0x12
    1512:	ab 89       	ldd	r26, Y+19	; 0x13
    1514:	bc 89       	ldd	r27, Y+20	; 0x14
    1516:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <_pid+0x16>
    151a:	90 93 02 04 	sts	0x0402, r25	; 0x800402 <_pid+0x17>
    151e:	a0 93 03 04 	sts	0x0403, r26	; 0x800403 <_pid+0x18>
    1522:	b0 93 04 04 	sts	0x0404, r27	; 0x800404 <_pid+0x19>
		
		// BNO055 enter config mode
		BNO_write_reg(BNO055_OPR_MODE_ADDR, OPERATION_MODE_CONFIG);
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	8d e3       	ldi	r24, 0x3D	; 61
    152a:	0e 94 b5 01 	call	0x36a	; 0x36a <BNO_write_reg>
    152e:	8f ef       	ldi	r24, 0xFF	; 255
    1530:	96 e7       	ldi	r25, 0x76	; 118
    1532:	e1 e0       	ldi	r30, 0x01	; 1
    1534:	81 50       	subi	r24, 0x01	; 1
    1536:	90 40       	sbci	r25, 0x00	; 0
    1538:	e0 40       	sbci	r30, 0x00	; 0
    153a:	e1 f7       	brne	.-8      	; 0x1534 <CTRL_load_calib_from_EEPROM+0xac>
    153c:	00 c0       	rjmp	.+0      	; 0x153e <CTRL_load_calib_from_EEPROM+0xb6>
    153e:	00 00       	nop
		_delay_ms(30);
		
		// select register page 0
		BNO_write_reg(BNO055_PAGE_ID_ADDR, 0);
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	87 e0       	ldi	r24, 0x07	; 7
    1544:	0e 94 b5 01 	call	0x36a	; 0x36a <BNO_write_reg>
    1548:	7e 01       	movw	r14, r28
    154a:	f5 e1       	ldi	r31, 0x15	; 21
    154c:	ef 0e       	add	r14, r31
    154e:	f1 1c       	adc	r15, r1
    1550:	15 e5       	ldi	r17, 0x55	; 85
		
		// write BNO055 calibration
		for (uint16_t i = ACCEL_OFFSET_X_LSB_ADDR;
		i <= MAG_RADIUS_MSB_ADDR;
		i ++) {
			BNO_write_reg(i, calib.bno[i - ACCEL_OFFSET_X_LSB_ADDR]);	
    1552:	f7 01       	movw	r30, r14
    1554:	61 91       	ld	r22, Z+
    1556:	7f 01       	movw	r14, r30
    1558:	81 2f       	mov	r24, r17
    155a:	0e 94 b5 01 	call	0x36a	; 0x36a <BNO_write_reg>
    155e:	1f 5f       	subi	r17, 0xFF	; 255
		
		// select register page 0
		BNO_write_reg(BNO055_PAGE_ID_ADDR, 0);
		
		// write BNO055 calibration
		for (uint16_t i = ACCEL_OFFSET_X_LSB_ADDR;
    1560:	1b 36       	cpi	r17, 0x6B	; 107
    1562:	b9 f7       	brne	.-18     	; 0x1552 <CTRL_load_calib_from_EEPROM+0xca>
		i ++) {
			BNO_write_reg(i, calib.bno[i - ACCEL_OFFSET_X_LSB_ADDR]);	
		}
		
		// restore previous mode
		BNO_write_reg(BNO055_OPR_MODE_ADDR, CONF_BNO055_MODE);
    1564:	68 e0       	ldi	r22, 0x08	; 8
    1566:	8d e3       	ldi	r24, 0x3D	; 61
    1568:	0e 94 b5 01 	call	0x36a	; 0x36a <BNO_write_reg>
    156c:	ff ef       	ldi	r31, 0xFF	; 255
    156e:	26 e7       	ldi	r18, 0x76	; 118
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	f1 50       	subi	r31, 0x01	; 1
    1574:	20 40       	sbci	r18, 0x00	; 0
    1576:	80 40       	sbci	r24, 0x00	; 0
    1578:	e1 f7       	brne	.-8      	; 0x1572 <CTRL_load_calib_from_EEPROM+0xea>
    157a:	00 c0       	rjmp	.+0      	; 0x157c <CTRL_load_calib_from_EEPROM+0xf4>
    157c:	00 00       	nop
		_delay_ms(30);
	}
}
    157e:	aa 96       	adiw	r28, 0x2a	; 42
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	1f 91       	pop	r17
    1590:	ff 90       	pop	r15
    1592:	ef 90       	pop	r14
    1594:	08 95       	ret

00001596 <EEPROM_read>:
#include <util/atomic.h>



uint8_t EEPROM_read(uint16_t addr)
{
    1596:	9c 01       	movw	r18, r24
	uint8_t data;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1598:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    159a:	f8 94       	cli
	{
		// wait for EEPROM Write completion
		while (EECR & (1u << EEPE))
    159c:	f9 99       	sbic	0x1f, 1	; 31
    159e:	fe cf       	rjmp	.-4      	; 0x159c <EEPROM_read+0x6>
			;
		// set address
		EEAR = addr;
    15a0:	32 bd       	out	0x22, r19	; 34
    15a2:	21 bd       	out	0x21, r18	; 33
		// do read
		EECR = (1u << EERE);
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	8f bb       	out	0x1f, r24	; 31
		data = EEDR;
    15a8:	80 b5       	in	r24, 0x20	; 32
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    15aa:	9f bf       	out	0x3f, r25	; 63
	}
	
	return data;
}
    15ac:	08 95       	ret

000015ae <EEPROM_write>:

void EEPROM_write(uint16_t addr, uint8_t data)
{
    15ae:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    15b0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    15b2:	f8 94       	cli
	{
		// wait for EEPROM Write completion
		while (EECR & (1u << EEPE))
    15b4:	f9 99       	sbic	0x1f, 1	; 31
    15b6:	fe cf       	rjmp	.-4      	; 0x15b4 <EEPROM_write+0x6>
			;
		// set address, data
		EEAR = addr;
    15b8:	32 bd       	out	0x22, r19	; 34
    15ba:	21 bd       	out	0x21, r18	; 33
		EEDR = data;
    15bc:	60 bd       	out	0x20, r22	; 32
		// enable write
		EECR = (1u << EEMPE);
    15be:	84 e0       	ldi	r24, 0x04	; 4
    15c0:	8f bb       	out	0x1f, r24	; 31
		EECR = (1u << EEPE);
    15c2:	82 e0       	ldi	r24, 0x02	; 2
    15c4:	8f bb       	out	0x1f, r24	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    15c6:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    15c8:	08 95       	ret

000015ca <EEPROM_write_array>:
	}
}

void EEPROM_write_array(uint16_t addr, uint8_t *data_ptr, uint16_t size)
{
    15ca:	ef 92       	push	r14
    15cc:	ff 92       	push	r15
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	eb 01       	movw	r28, r22
    15d8:	8b 01       	movw	r16, r22
    15da:	04 0f       	add	r16, r20
    15dc:	15 1f       	adc	r17, r21
	for (uint16_t i = 0; i < size; i++) {
    15de:	7c 01       	movw	r14, r24
    15e0:	c0 17       	cp	r28, r16
    15e2:	d1 07       	cpc	r29, r17
    15e4:	39 f0       	breq	.+14     	; 0x15f4 <EEPROM_write_array+0x2a>
		EEPROM_write(addr + i, data_ptr[i]);
    15e6:	69 91       	ld	r22, Y+
    15e8:	c7 01       	movw	r24, r14
    15ea:	e1 df       	rcall	.-62     	; 0x15ae <EEPROM_write>
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	e8 1a       	sub	r14, r24
    15f0:	f8 0a       	sbc	r15, r24
    15f2:	f6 cf       	rjmp	.-20     	; 0x15e0 <EEPROM_write_array+0x16>
	}
}
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	ff 90       	pop	r15
    15fe:	ef 90       	pop	r14
    1600:	08 95       	ret

00001602 <EEPROM_read_array>:

void EEPROM_read_array(uint16_t addr, uint8_t *data_ptr, uint16_t size)
{
    1602:	ef 92       	push	r14
    1604:	ff 92       	push	r15
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	8b 01       	movw	r16, r22
    1610:	04 0f       	add	r16, r20
    1612:	15 1f       	adc	r17, r21
	for (uint16_t i = 0; i < size; i++) {
    1614:	eb 01       	movw	r28, r22
		data_ptr[i] = EEPROM_read(addr + i);
    1616:	7c 01       	movw	r14, r24
    1618:	e6 1a       	sub	r14, r22
    161a:	f7 0a       	sbc	r15, r23
	}
}

void EEPROM_read_array(uint16_t addr, uint8_t *data_ptr, uint16_t size)
{
	for (uint16_t i = 0; i < size; i++) {
    161c:	c0 17       	cp	r28, r16
    161e:	d1 07       	cpc	r29, r17
    1620:	31 f0       	breq	.+12     	; 0x162e <EEPROM_read_array+0x2c>
		data_ptr[i] = EEPROM_read(addr + i);
    1622:	c7 01       	movw	r24, r14
    1624:	8c 0f       	add	r24, r28
    1626:	9d 1f       	adc	r25, r29
    1628:	b6 df       	rcall	.-148    	; 0x1596 <EEPROM_read>
    162a:	89 93       	st	Y+, r24
    162c:	f7 cf       	rjmp	.-18     	; 0x161c <EEPROM_read_array+0x1a>
	}
}
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	08 95       	ret

0000163c <_task_ended>:
 * and start next one if available */
static void _task_ended(void)
{
	//UART_write_str("STO\n\r");
	// send stop condition
	TWCR = _EN_TRANSFER | (1 << TWSTO);
    163c:	85 e9       	ldi	r24, 0x95	; 149
    163e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	// remove task from queue
	_local.task_head = (_local.task_head + 1) & (CONF_I2C_TASK_BUFF_SIZE - 1);
    1642:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <_local+0x39>
    1646:	8f 5f       	subi	r24, 0xFF	; 255
    1648:	87 70       	andi	r24, 0x07	; 7
    164a:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <_local+0x39>
	_local.tasks_num --;
    164e:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <_local+0x3b>
    1652:	81 50       	subi	r24, 0x01	; 1
    1654:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <_local+0x3b>
	// if other tasks available, start next one
	if (_local.tasks_num) {
    1658:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <_local+0x3b>
    165c:	88 23       	and	r24, r24
    165e:	19 f0       	breq	.+6      	; 0x1666 <_task_ended+0x2a>
		//UART_write_str("STA\n\r");
		//_delay_ms(500);
		TWCR = _EN_TRANSFER | (1 << TWSTA);
    1660:	85 ea       	ldi	r24, 0xA5	; 165
    1662:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1666:	08 95       	ret

00001668 <__vector_24>:
	}
}

// handle I2C events
ISR(TWI_vect)
{
    1668:	1f 92       	push	r1
    166a:	0f 92       	push	r0
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	0f 92       	push	r0
    1670:	11 24       	eor	r1, r1
    1672:	2f 93       	push	r18
    1674:	3f 93       	push	r19
    1676:	4f 93       	push	r20
    1678:	5f 93       	push	r21
    167a:	6f 93       	push	r22
    167c:	7f 93       	push	r23
    167e:	8f 93       	push	r24
    1680:	9f 93       	push	r25
    1682:	af 93       	push	r26
    1684:	bf 93       	push	r27
    1686:	ef 93       	push	r30
    1688:	ff 93       	push	r31
	volatile _task_t *crt_task_ptr;
	// if there is at least one task active
	if (_local.tasks_num > 0) {
    168a:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <_local+0x3b>
    168e:	18 16       	cp	r1, r24
    1690:	0c f0       	brlt	.+2      	; 0x1694 <__vector_24+0x2c>
    1692:	af c0       	rjmp	.+350    	; 0x17f2 <__vector_24+0x18a>
		// pointer to crt task
		crt_task_ptr = &(_local.tasks[_local.task_head]);
    1694:	e0 91 48 04 	lds	r30, 0x0448	; 0x800448 <_local+0x39>
		// Read task
		if (crt_task_ptr->read) {
    1698:	2e 2f       	mov	r18, r30
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	87 e0       	ldi	r24, 0x07	; 7
    169e:	e8 9f       	mul	r30, r24
    16a0:	f0 01       	movw	r30, r0
    16a2:	11 24       	eor	r1, r1
    16a4:	e1 5f       	subi	r30, 0xF1	; 241
    16a6:	fb 4f       	sbci	r31, 0xFB	; 251
    16a8:	86 81       	ldd	r24, Z+6	; 0x06
    16aa:	88 23       	and	r24, r24
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <__vector_24+0x48>
    16ae:	53 c0       	rjmp	.+166    	; 0x1756 <__vector_24+0xee>
			// react on transmission status
			switch (TWSR & 0xF8u) {
    16b0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    16b4:	88 7f       	andi	r24, 0xF8	; 248
    16b6:	80 34       	cpi	r24, 0x40	; 64
    16b8:	91 f1       	breq	.+100    	; 0x171e <__vector_24+0xb6>
    16ba:	28 f4       	brcc	.+10     	; 0x16c6 <__vector_24+0x5e>
    16bc:	88 30       	cpi	r24, 0x08	; 8
    16be:	59 f0       	breq	.+22     	; 0x16d6 <__vector_24+0x6e>
    16c0:	80 31       	cpi	r24, 0x10	; 16
    16c2:	49 f0       	breq	.+18     	; 0x16d6 <__vector_24+0x6e>
    16c4:	99 c0       	rjmp	.+306    	; 0x17f8 <__vector_24+0x190>
    16c6:	80 35       	cpi	r24, 0x50	; 80
    16c8:	a1 f0       	breq	.+40     	; 0x16f2 <__vector_24+0x8a>
    16ca:	88 35       	cpi	r24, 0x58	; 88
    16cc:	91 f0       	breq	.+36     	; 0x16f2 <__vector_24+0x8a>
    16ce:	88 34       	cpi	r24, 0x48	; 72
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <__vector_24+0x6c>
    16d2:	61 c0       	rjmp	.+194    	; 0x1796 <__vector_24+0x12e>
    16d4:	91 c0       	rjmp	.+290    	; 0x17f8 <__vector_24+0x190>
				
				// START/REPEATED START transmitted
				case 0x08:
				case 0x10:
					// add slave address and R bit
					_local.task_data_index = 0;
    16d6:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <_local+0x38>
					TWDR = ((crt_task_ptr->addr) << 1) | 1u;
    16da:	87 e0       	ldi	r24, 0x07	; 7
    16dc:	82 9f       	mul	r24, r18
    16de:	f0 01       	movw	r30, r0
    16e0:	83 9f       	mul	r24, r19
    16e2:	f0 0d       	add	r31, r0
    16e4:	11 24       	eor	r1, r1
    16e6:	e1 5f       	subi	r30, 0xF1	; 241
    16e8:	fb 4f       	sbci	r31, 0xFB	; 251
    16ea:	82 81       	ldd	r24, Z+2	; 0x02
    16ec:	88 0f       	add	r24, r24
    16ee:	81 60       	ori	r24, 0x01	; 1
    16f0:	70 c0       	rjmp	.+224    	; 0x17d2 <__vector_24+0x16a>
				// Data byte received by master
				// ACK sent
				case 0x50:
				// NACK sent
				case 0x58:
					crt_task_ptr->data[_local.task_data_index++] = TWDR;
    16f2:	87 e0       	ldi	r24, 0x07	; 7
    16f4:	82 9f       	mul	r24, r18
    16f6:	f0 01       	movw	r30, r0
    16f8:	83 9f       	mul	r24, r19
    16fa:	f0 0d       	add	r31, r0
    16fc:	11 24       	eor	r1, r1
    16fe:	e1 5f       	subi	r30, 0xF1	; 241
    1700:	fb 4f       	sbci	r31, 0xFB	; 251
    1702:	01 90       	ld	r0, Z+
    1704:	f0 81       	ld	r31, Z
    1706:	e0 2d       	mov	r30, r0
    1708:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <_local+0x38>
    170c:	91 e0       	ldi	r25, 0x01	; 1
    170e:	98 0f       	add	r25, r24
    1710:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <_local+0x38>
    1714:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1718:	e8 0f       	add	r30, r24
    171a:	f1 1d       	adc	r31, r1
    171c:	90 83       	st	Z, r25
					//UART_write_str("RXD\r\n");
					// ! Fall through !
				// SLA+R+ACK transmitted
				case 0x40:
					// more data expected
					if (_local.task_data_index < crt_task_ptr->len) {
    171e:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <_local+0x38>
    1722:	87 e0       	ldi	r24, 0x07	; 7
    1724:	82 9f       	mul	r24, r18
    1726:	f0 01       	movw	r30, r0
    1728:	83 9f       	mul	r24, r19
    172a:	f0 0d       	add	r31, r0
    172c:	11 24       	eor	r1, r1
    172e:	e1 5f       	subi	r30, 0xF1	; 241
    1730:	fb 4f       	sbci	r31, 0xFB	; 251
    1732:	83 81       	ldd	r24, Z+3	; 0x03
    1734:	98 17       	cp	r25, r24
    1736:	08 f0       	brcs	.+2      	; 0x173a <__vector_24+0xd2>
    1738:	50 c0       	rjmp	.+160    	; 0x17da <__vector_24+0x172>
						// request more data
						//UART_write_str("RQD\r\n");
						// 'many' (>1) more bytes
						if (_local.task_data_index + 1 < crt_task_ptr->len) {
    173a:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <_local+0x38>
    173e:	23 81       	ldd	r18, Z+3	; 0x03
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	01 96       	adiw	r24, 0x01	; 1
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	82 17       	cp	r24, r18
    1748:	93 07       	cpc	r25, r19
    174a:	0c f0       	brlt	.+2      	; 0x174e <__vector_24+0xe6>
    174c:	44 c0       	rjmp	.+136    	; 0x17d6 <__vector_24+0x16e>
							TWCR = _EN_TRANSFER | (1 << TWEA);	
    174e:	85 ec       	ldi	r24, 0xC5	; 197
    1750:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1754:	51 c0       	rjmp	.+162    	; 0x17f8 <__vector_24+0x190>
				*/
					
			}
		// Write task
		} else {
			switch (TWSR & 0xF8u) {
    1756:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    175a:	88 7f       	andi	r24, 0xF8	; 248
    175c:	88 31       	cpi	r24, 0x18	; 24
    175e:	01 f1       	breq	.+64     	; 0x17a0 <__vector_24+0x138>
    1760:	28 f4       	brcc	.+10     	; 0x176c <__vector_24+0x104>
    1762:	88 30       	cpi	r24, 0x08	; 8
    1764:	59 f0       	breq	.+22     	; 0x177c <__vector_24+0x114>
    1766:	80 31       	cpi	r24, 0x10	; 16
    1768:	49 f0       	breq	.+18     	; 0x177c <__vector_24+0x114>
    176a:	46 c0       	rjmp	.+140    	; 0x17f8 <__vector_24+0x190>
    176c:	88 32       	cpi	r24, 0x28	; 40
    176e:	c1 f0       	breq	.+48     	; 0x17a0 <__vector_24+0x138>
    1770:	80 33       	cpi	r24, 0x30	; 48
    1772:	c1 f1       	breq	.+112    	; 0x17e4 <__vector_24+0x17c>
    1774:	80 32       	cpi	r24, 0x20	; 32
    1776:	09 f0       	breq	.+2      	; 0x177a <__vector_24+0x112>
    1778:	3f c0       	rjmp	.+126    	; 0x17f8 <__vector_24+0x190>
    177a:	0d c0       	rjmp	.+26     	; 0x1796 <__vector_24+0x12e>
				
				// (REPEATED) START sent
				case 0x08:
				case 0x10:
					// add slave address and W bit
					_local.task_data_index = 0;
    177c:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <_local+0x38>
					TWDR = (crt_task_ptr->addr << 1);
    1780:	87 e0       	ldi	r24, 0x07	; 7
    1782:	82 9f       	mul	r24, r18
    1784:	f0 01       	movw	r30, r0
    1786:	83 9f       	mul	r24, r19
    1788:	f0 0d       	add	r31, r0
    178a:	11 24       	eor	r1, r1
    178c:	e1 5f       	subi	r30, 0xF1	; 241
    178e:	fb 4f       	sbci	r31, 0xFB	; 251
    1790:	82 81       	ldd	r24, Z+2	; 0x02
    1792:	88 0f       	add	r24, r24
    1794:	1e c0       	rjmp	.+60     	; 0x17d2 <__vector_24+0x16a>
					//UART_write_str("_STA_W\n\r");
					break;
					
				// slave send NACK on SLA+W
				case 0x20:
					*(crt_task_ptr->status_ptr) = I2C_ADDRESS_NACK;
    1796:	04 80       	ldd	r0, Z+4	; 0x04
    1798:	f5 81       	ldd	r31, Z+5	; 0x05
    179a:	e0 2d       	mov	r30, r0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	26 c0       	rjmp	.+76     	; 0x17ec <__vector_24+0x184>
				// slave sent ACK 
				// on (SLA+W or Data write)
				case 0x18:
				case 0x28:
					// if more data to send
					if (crt_task_ptr->len > _local.task_data_index) {
    17a0:	87 e0       	ldi	r24, 0x07	; 7
    17a2:	82 9f       	mul	r24, r18
    17a4:	f0 01       	movw	r30, r0
    17a6:	83 9f       	mul	r24, r19
    17a8:	f0 0d       	add	r31, r0
    17aa:	11 24       	eor	r1, r1
    17ac:	e1 5f       	subi	r30, 0xF1	; 241
    17ae:	fb 4f       	sbci	r31, 0xFB	; 251
    17b0:	93 81       	ldd	r25, Z+3	; 0x03
    17b2:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <_local+0x38>
    17b6:	89 17       	cp	r24, r25
    17b8:	80 f4       	brcc	.+32     	; 0x17da <__vector_24+0x172>
						TWDR = crt_task_ptr->data[_local.task_data_index++];
    17ba:	01 90       	ld	r0, Z+
    17bc:	f0 81       	ld	r31, Z
    17be:	e0 2d       	mov	r30, r0
    17c0:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <_local+0x38>
    17c4:	91 e0       	ldi	r25, 0x01	; 1
    17c6:	98 0f       	add	r25, r24
    17c8:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <_local+0x38>
    17cc:	e8 0f       	add	r30, r24
    17ce:	f1 1d       	adc	r31, r1
    17d0:	80 81       	ld	r24, Z
    17d2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
						TWCR = _EN_TRANSFER;
    17d6:	85 e8       	ldi	r24, 0x85	; 133
    17d8:	bb cf       	rjmp	.-138    	; 0x1750 <__vector_24+0xe8>
						//UART_write_str("TXD\n\r");
					} else {
						*(crt_task_ptr->status_ptr) = I2C_SUCCESS;
    17da:	04 80       	ldd	r0, Z+4	; 0x04
    17dc:	f5 81       	ldd	r31, Z+5	; 0x05
    17de:	e0 2d       	mov	r30, r0
    17e0:	10 82       	st	Z, r1
    17e2:	05 c0       	rjmp	.+10     	; 0x17ee <__vector_24+0x186>
						_task_ended();
					}
					break;
				// slave sent NACK on data send
				case 0x30:
					*(crt_task_ptr->status_ptr) = I2C_WRITE_NACK;
    17e4:	04 80       	ldd	r0, Z+4	; 0x04
    17e6:	f5 81       	ldd	r31, Z+5	; 0x05
    17e8:	e0 2d       	mov	r30, r0
    17ea:	82 e0       	ldi	r24, 0x02	; 2
    17ec:	80 83       	st	Z, r24
					_task_ended();
    17ee:	26 df       	rcall	.-436    	; 0x163c <_task_ended>
					//UART_write_str("_ND_W\n\r");
					break;
    17f0:	03 c0       	rjmp	.+6      	; 0x17f8 <__vector_24+0x190>
			}
		}
	} else {
		UART_write_str("I2C_ERR:no task!\n");
    17f2:	83 ea       	ldi	r24, 0xA3	; 163
    17f4:	93 e0       	ldi	r25, 0x03	; 3
    17f6:	04 d2       	rcall	.+1032   	; 0x1c00 <UART_write_str>
	}
}
    17f8:	ff 91       	pop	r31
    17fa:	ef 91       	pop	r30
    17fc:	bf 91       	pop	r27
    17fe:	af 91       	pop	r26
    1800:	9f 91       	pop	r25
    1802:	8f 91       	pop	r24
    1804:	7f 91       	pop	r23
    1806:	6f 91       	pop	r22
    1808:	5f 91       	pop	r21
    180a:	4f 91       	pop	r20
    180c:	3f 91       	pop	r19
    180e:	2f 91       	pop	r18
    1810:	0f 90       	pop	r0
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	0f 90       	pop	r0
    1816:	1f 90       	pop	r1
    1818:	18 95       	reti

0000181a <I2C_init>:

void I2C_init(void)
{
	// init task circular buffer
	_local.task_head = 0;
    181a:	ef e0       	ldi	r30, 0x0F	; 15
    181c:	f4 e0       	ldi	r31, 0x04	; 4
    181e:	11 ae       	std	Z+57, r1	; 0x39
	_local.task_tail = 0;
    1820:	12 ae       	std	Z+58, r1	; 0x3a
	_local.tasks_num = 0;
    1822:	13 ae       	std	Z+59, r1	; 0x3b
	_local.task_data_index = 0;
    1824:	10 ae       	std	Z+56, r1	; 0x38
	
	// init I2C peripheral
	// configure frequency
	TWBR = CONF_I2C_BIT_RATE_REG;
    1826:	83 e0       	ldi	r24, 0x03	; 3
    1828:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWSR = CONF_I2C_PRESCALER & 0x3;
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1832:	08 95       	ret

00001834 <I2C_available_tasks>:
}


uint8_t I2C_available_tasks(void)
{
	return CONF_I2C_TASK_BUFF_SIZE - _local.tasks_num;
    1834:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <_local+0x3b>
}
    1838:	88 e0       	ldi	r24, 0x08	; 8
    183a:	89 1b       	sub	r24, r25
    183c:	08 95       	ret

0000183e <_I2C_enqueue_task>:


bool _I2C_enqueue_task(bool read, uint8_t addr, uint8_t *buff_ptr, uint16_t max_len, volatile I2C_stat_t *status_ptr)
{
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
	uint8_t flags;
	
	// save interrupt flag state
	flags = SREG;
    1842:	3f b7       	in	r19, 0x3f	; 63
	cli();
    1844:	f8 94       	cli
	
	if (_local.tasks_num >= CONF_I2C_TASK_BUFF_SIZE) {
    1846:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <_local+0x3b>
    184a:	98 30       	cpi	r25, 0x08	; 8
    184c:	18 f0       	brcs	.+6      	; 0x1854 <_I2C_enqueue_task+0x16>
		SREG = flags;
    184e:	3f bf       	out	0x3f, r19	; 63
		return false;
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	44 c0       	rjmp	.+136    	; 0x18dc <_I2C_enqueue_task+0x9e>
	}
	
	// enqueue task
	_local.tasks[_local.task_tail].data = buff_ptr;
    1854:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <_local+0x3a>
    1858:	97 e0       	ldi	r25, 0x07	; 7
    185a:	9e 9f       	mul	r25, r30
    185c:	f0 01       	movw	r30, r0
    185e:	11 24       	eor	r1, r1
    1860:	e1 5f       	subi	r30, 0xF1	; 241
    1862:	fb 4f       	sbci	r31, 0xFB	; 251
    1864:	51 83       	std	Z+1, r21	; 0x01
    1866:	40 83       	st	Z, r20
	_local.tasks[_local.task_tail].addr = addr;
    1868:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <_local+0x3a>
    186c:	9e 9f       	mul	r25, r30
    186e:	f0 01       	movw	r30, r0
    1870:	11 24       	eor	r1, r1
    1872:	e1 5f       	subi	r30, 0xF1	; 241
    1874:	fb 4f       	sbci	r31, 0xFB	; 251
    1876:	62 83       	std	Z+2, r22	; 0x02
	_local.tasks[_local.task_tail].len = max_len;
    1878:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <_local+0x3a>
    187c:	9e 9f       	mul	r25, r30
    187e:	f0 01       	movw	r30, r0
    1880:	11 24       	eor	r1, r1
    1882:	e1 5f       	subi	r30, 0xF1	; 241
    1884:	fb 4f       	sbci	r31, 0xFB	; 251
    1886:	23 83       	std	Z+3, r18	; 0x03
	_local.tasks[_local.task_tail].read = read;
    1888:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <_local+0x3a>
    188c:	9e 9f       	mul	r25, r30
    188e:	f0 01       	movw	r30, r0
    1890:	11 24       	eor	r1, r1
    1892:	e1 5f       	subi	r30, 0xF1	; 241
    1894:	fb 4f       	sbci	r31, 0xFB	; 251
    1896:	86 83       	std	Z+6, r24	; 0x06
	_local.tasks[_local.task_tail].status_ptr = status_ptr;
    1898:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <_local+0x3a>
    189c:	9e 9f       	mul	r25, r30
    189e:	f0 01       	movw	r30, r0
    18a0:	11 24       	eor	r1, r1
    18a2:	e1 5f       	subi	r30, 0xF1	; 241
    18a4:	fb 4f       	sbci	r31, 0xFB	; 251
    18a6:	15 83       	std	Z+5, r17	; 0x05
    18a8:	04 83       	std	Z+4, r16	; 0x04
	*status_ptr = I2C_IN_PROGRESS;
    18aa:	83 e0       	ldi	r24, 0x03	; 3
    18ac:	f8 01       	movw	r30, r16
    18ae:	80 83       	st	Z, r24
	_local.task_tail = (_local.task_tail + 1) 
    18b0:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <_local+0x3a>
    18b4:	8f 5f       	subi	r24, 0xFF	; 255
    18b6:	87 70       	andi	r24, 0x07	; 7
    18b8:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <_local+0x3a>
						& (CONF_I2C_TASK_BUFF_SIZE - 1);
	_local.tasks_num ++;
    18bc:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <_local+0x3b>
    18c0:	8f 5f       	subi	r24, 0xFF	; 255
    18c2:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <_local+0x3b>
	
	// if this is the first task added to the queue
	// (queue is empty)
	if (1 == _local.tasks_num) {
    18c6:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <_local+0x3b>
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	29 f4       	brne	.+10     	; 0x18d8 <_I2C_enqueue_task+0x9a>
		// send start condition
		_local.task_data_index = 0;
    18ce:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <_local+0x38>
		TWCR = _EN_TRANSFER | (1 << TWSTA);
    18d2:	85 ea       	ldi	r24, 0xA5	; 165
    18d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	}
	
	// restore interrupt flag		
	SREG = flags;
    18d8:	3f bf       	out	0x3f, r19	; 63
	
	return true;
    18da:	81 e0       	ldi	r24, 0x01	; 1
}
    18dc:	1f 91       	pop	r17
    18de:	0f 91       	pop	r16
    18e0:	08 95       	ret

000018e2 <IND_set_mode>:
	uint32_t last_change;
	bool led_on;
} _local;

void IND_set_mode(indicator_mode_t mode)
{
    18e2:	0f 93       	push	r16
    18e4:	1f 93       	push	r17
	// enable led output
	DDRB |= (1 << PORTB5);
    18e6:	25 9a       	sbi	0x04, 5	; 4
	_local.led_on = true;
    18e8:	91 e0       	ldi	r25, 0x01	; 1
    18ea:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <_local+0xc>
	
	switch (mode) {
    18ee:	81 30       	cpi	r24, 0x01	; 1
    18f0:	61 f0       	breq	.+24     	; 0x190a <IND_set_mode+0x28>
    18f2:	48 f0       	brcs	.+18     	; 0x1906 <IND_set_mode+0x24>
    18f4:	82 30       	cpi	r24, 0x02	; 2
    18f6:	71 f0       	breq	.+28     	; 0x1914 <IND_set_mode+0x32>
    18f8:	83 30       	cpi	r24, 0x03	; 3
    18fa:	69 f5       	brne	.+90     	; 0x1956 <IND_set_mode+0x74>
		case IND_ERROR:
			_local.delay_on_ms = 50;
			_local.delay_off_ms = 500;
			break;
		case IND_SIGNAL:
			_local.delay_on_ms = 50;
    18fc:	82 e3       	ldi	r24, 0x32	; 50
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	a0 e0       	ldi	r26, 0x00	; 0
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	18 c0       	rjmp	.+48     	; 0x1936 <IND_set_mode+0x54>
	DDRB |= (1 << PORTB5);
	_local.led_on = true;
	
	switch (mode) {
		case IND_BOOTING:
			PORTB |= (1 << PORTB5);
    1906:	2d 9a       	sbi	0x05, 5	; 5
			break;
    1908:	26 c0       	rjmp	.+76     	; 0x1956 <IND_set_mode+0x74>
		case IND_RUNNING:
			_local.delay_on_ms = 500;
    190a:	84 ef       	ldi	r24, 0xF4	; 244
    190c:	91 e0       	ldi	r25, 0x01	; 1
    190e:	a0 e0       	ldi	r26, 0x00	; 0
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	11 c0       	rjmp	.+34     	; 0x1936 <IND_set_mode+0x54>
			_local.delay_off_ms = 500;
			break;
		case IND_ERROR:
			_local.delay_on_ms = 50;
    1914:	82 e3       	ldi	r24, 0x32	; 50
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	a0 e0       	ldi	r26, 0x00	; 0
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <_local>
    1920:	90 93 4c 04 	sts	0x044C, r25	; 0x80044c <_local+0x1>
    1924:	a0 93 4d 04 	sts	0x044D, r26	; 0x80044d <_local+0x2>
    1928:	b0 93 4e 04 	sts	0x044E, r27	; 0x80044e <_local+0x3>
			_local.delay_off_ms = 500;
    192c:	84 ef       	ldi	r24, 0xF4	; 244
    192e:	91 e0       	ldi	r25, 0x01	; 1
    1930:	a0 e0       	ldi	r26, 0x00	; 0
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	08 c0       	rjmp	.+16     	; 0x1946 <IND_set_mode+0x64>
			break;
		case IND_SIGNAL:
			_local.delay_on_ms = 50;
    1936:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <_local>
    193a:	90 93 4c 04 	sts	0x044C, r25	; 0x80044c <_local+0x1>
    193e:	a0 93 4d 04 	sts	0x044D, r26	; 0x80044d <_local+0x2>
    1942:	b0 93 4e 04 	sts	0x044E, r27	; 0x80044e <_local+0x3>
			_local.delay_off_ms = 50;
    1946:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <_local+0x4>
    194a:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <_local+0x5>
    194e:	a0 93 51 04 	sts	0x0451, r26	; 0x800451 <_local+0x6>
    1952:	b0 93 52 04 	sts	0x0452, r27	; 0x800452 <_local+0x7>
			break;
	}
	
	// force reset
	if (_local.led_on) {
    1956:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <_local+0xc>
    195a:	88 23       	and	r24, r24
    195c:	51 f0       	breq	.+20     	; 0x1972 <IND_set_mode+0x90>
		_local.last_change = CTRL_get_time_ms() - _local.delay_on_ms;
    195e:	9d db       	rcall	.-2246   	; 0x109a <CTRL_get_time_ms>
    1960:	00 91 4b 04 	lds	r16, 0x044B	; 0x80044b <_local>
    1964:	10 91 4c 04 	lds	r17, 0x044C	; 0x80044c <_local+0x1>
    1968:	20 91 4d 04 	lds	r18, 0x044D	; 0x80044d <_local+0x2>
    196c:	30 91 4e 04 	lds	r19, 0x044E	; 0x80044e <_local+0x3>
    1970:	09 c0       	rjmp	.+18     	; 0x1984 <IND_set_mode+0xa2>
	} else {
		_local.last_change = CTRL_get_time_ms() - _local.delay_off_ms;
    1972:	93 db       	rcall	.-2266   	; 0x109a <CTRL_get_time_ms>
    1974:	00 91 4f 04 	lds	r16, 0x044F	; 0x80044f <_local+0x4>
    1978:	10 91 50 04 	lds	r17, 0x0450	; 0x800450 <_local+0x5>
    197c:	20 91 51 04 	lds	r18, 0x0451	; 0x800451 <_local+0x6>
    1980:	30 91 52 04 	lds	r19, 0x0452	; 0x800452 <_local+0x7>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	80 1b       	sub	r24, r16
    198a:	91 0b       	sbc	r25, r17
    198c:	a2 0b       	sbc	r26, r18
    198e:	b3 0b       	sbc	r27, r19
    1990:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <_local+0x8>
    1994:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <_local+0x9>
    1998:	a0 93 55 04 	sts	0x0455, r26	; 0x800455 <_local+0xa>
    199c:	b0 93 56 04 	sts	0x0456, r27	; 0x800456 <_local+0xb>
    19a0:	1f 91       	pop	r17
	}
}
    19a2:	0f 91       	pop	r16
    19a4:	08 95       	ret

000019a6 <IND_iterate>:
    19a6:	0f 93       	push	r16

void IND_iterate(void)
{
    19a8:	1f 93       	push	r17
    19aa:	20 91 57 04 	lds	r18, 0x0457	; 0x800457 <_local+0xc>
	if (_local.led_on) {
    19ae:	60 91 53 04 	lds	r22, 0x0453	; 0x800453 <_local+0x8>
    19b2:	70 91 54 04 	lds	r23, 0x0454	; 0x800454 <_local+0x9>
    19b6:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <_local+0xa>
    19ba:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <_local+0xb>
    19be:	22 23       	and	r18, r18
    19c0:	91 f0       	breq	.+36     	; 0x19e6 <IND_iterate+0x40>
		if (CTRL_get_elapsed_ms(_local.last_change) > _local.delay_on_ms) {
    19c2:	74 db       	rcall	.-2328   	; 0x10ac <CTRL_get_elapsed_ms>
    19c4:	00 91 4b 04 	lds	r16, 0x044B	; 0x80044b <_local>
    19c8:	10 91 4c 04 	lds	r17, 0x044C	; 0x80044c <_local+0x1>
    19cc:	20 91 4d 04 	lds	r18, 0x044D	; 0x80044d <_local+0x2>
    19d0:	30 91 4e 04 	lds	r19, 0x044E	; 0x80044e <_local+0x3>
    19d4:	06 17       	cp	r16, r22
    19d6:	17 07       	cpc	r17, r23
    19d8:	28 07       	cpc	r18, r24
    19da:	39 07       	cpc	r19, r25
    19dc:	f8 f4       	brcc	.+62     	; 0x1a1c <IND_iterate+0x76>
    19de:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <_local+0xc>
			_local.led_on = false;
			DDRB &= ~(1 << PORTB5);
    19e2:	25 98       	cbi	0x04, 5	; 4
    19e4:	12 c0       	rjmp	.+36     	; 0x1a0a <IND_iterate+0x64>
			_local.last_change = CTRL_get_time_ms();
		}
	} else {
		if (CTRL_get_elapsed_ms(_local.last_change) > _local.delay_off_ms) {
    19e6:	62 db       	rcall	.-2364   	; 0x10ac <CTRL_get_elapsed_ms>
    19e8:	00 91 4f 04 	lds	r16, 0x044F	; 0x80044f <_local+0x4>
    19ec:	10 91 50 04 	lds	r17, 0x0450	; 0x800450 <_local+0x5>
    19f0:	20 91 51 04 	lds	r18, 0x0451	; 0x800451 <_local+0x6>
    19f4:	30 91 52 04 	lds	r19, 0x0452	; 0x800452 <_local+0x7>
    19f8:	06 17       	cp	r16, r22
    19fa:	17 07       	cpc	r17, r23
    19fc:	28 07       	cpc	r18, r24
    19fe:	39 07       	cpc	r19, r25
    1a00:	68 f4       	brcc	.+26     	; 0x1a1c <IND_iterate+0x76>
    1a02:	81 e0       	ldi	r24, 0x01	; 1
			_local.led_on = true;
    1a04:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <_local+0xc>
			DDRB |= (1 << PORTB5);
    1a08:	25 9a       	sbi	0x04, 5	; 4
			_local.last_change = CTRL_get_time_ms();
    1a0a:	47 db       	rcall	.-2418   	; 0x109a <CTRL_get_time_ms>
    1a0c:	60 93 53 04 	sts	0x0453, r22	; 0x800453 <_local+0x8>
    1a10:	70 93 54 04 	sts	0x0454, r23	; 0x800454 <_local+0x9>
    1a14:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <_local+0xa>
    1a18:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <_local+0xb>
    1a1c:	1f 91       	pop	r17
		}
	}
    1a1e:	0f 91       	pop	r16
    1a20:	08 95       	ret

00001a22 <circ_buff_init>:
#include "misc/circular_buff.h"

void circ_buff_init(struct circ_buff_t *buff)
{
	// sanity check
	if (NULL == buff) {
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	41 f0       	breq	.+16     	; 0x1a36 <circ_buff_init+0x14>
		return;
	}
	
	buff->head = 0;
    1a26:	fc 01       	movw	r30, r24
    1a28:	ef 57       	subi	r30, 0x7F	; 127
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	10 82       	st	Z, r1
	buff->tail = 0;
    1a2e:	31 96       	adiw	r30, 0x01	; 1
    1a30:	10 82       	st	Z, r1
	buff->size = 0;
    1a32:	32 97       	sbiw	r30, 0x02	; 2
    1a34:	10 82       	st	Z, r1
    1a36:	08 95       	ret

00001a38 <circ_buff_put>:
}

void circ_buff_put(struct circ_buff_t *buff, uint8_t data)
{
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	9c 01       	movw	r18, r24
	// sanity check
	if (NULL == buff) {
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	99 f0       	breq	.+38     	; 0x1a68 <circ_buff_put+0x30>
		return;
	}
	
	// discard excess bytes
	if (buff->size >= CIRC_BUFF_CAPACITY) {
    1a42:	fc 01       	movw	r30, r24
    1a44:	e0 58       	subi	r30, 0x80	; 128
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	80 81       	ld	r24, Z
    1a4a:	87 fd       	sbrc	r24, 7
    1a4c:	0d c0       	rjmp	.+26     	; 0x1a68 <circ_buff_put+0x30>
		return;
	}
	
	buff->data[buff->tail] = data;
    1a4e:	d9 01       	movw	r26, r18
    1a50:	ae 57       	subi	r26, 0x7E	; 126
    1a52:	bf 4f       	sbci	r27, 0xFF	; 255
    1a54:	9c 91       	ld	r25, X
    1a56:	e9 01       	movw	r28, r18
    1a58:	c9 0f       	add	r28, r25
    1a5a:	d1 1d       	adc	r29, r1
    1a5c:	68 83       	st	Y, r22
	buff->tail = (buff->tail + 1) & (CIRC_BUFF_CAPACITY - 1);
    1a5e:	9f 5f       	subi	r25, 0xFF	; 255
    1a60:	9f 77       	andi	r25, 0x7F	; 127
    1a62:	9c 93       	st	X, r25
	buff->size ++;
    1a64:	8f 5f       	subi	r24, 0xFF	; 255
    1a66:	80 83       	st	Z, r24
}
    1a68:	df 91       	pop	r29
    1a6a:	cf 91       	pop	r28
    1a6c:	08 95       	ret

00001a6e <circ_buff_get>:

uint8_t circ_buff_get(struct circ_buff_t *buff)
{
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	ac 01       	movw	r20, r24
	uint8_t tmp;
	
	// sanity check
	if (NULL == buff) {
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	a9 f0       	breq	.+42     	; 0x1aa2 <circ_buff_get+0x34>
		return 0xff;
	}
	
	if (buff->size == 0) {
    1a78:	fc 01       	movw	r30, r24
    1a7a:	e0 58       	subi	r30, 0x80	; 128
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	90 81       	ld	r25, Z
    1a80:	99 23       	and	r25, r25
    1a82:	81 f0       	breq	.+32     	; 0x1aa4 <circ_buff_get+0x36>
		return 0;
	}
	
	tmp = buff->data[buff->head];
    1a84:	da 01       	movw	r26, r20
    1a86:	af 57       	subi	r26, 0x7F	; 127
    1a88:	bf 4f       	sbci	r27, 0xFF	; 255
    1a8a:	2c 91       	ld	r18, X
    1a8c:	ea 01       	movw	r28, r20
    1a8e:	c2 0f       	add	r28, r18
    1a90:	d1 1d       	adc	r29, r1
    1a92:	88 81       	ld	r24, Y
	buff->head = (buff->head + 1) & (CIRC_BUFF_CAPACITY - 1);
    1a94:	2f 5f       	subi	r18, 0xFF	; 255
    1a96:	2f 77       	andi	r18, 0x7F	; 127
    1a98:	2c 93       	st	X, r18
	buff->size --;
    1a9a:	91 50       	subi	r25, 0x01	; 1
    1a9c:	90 83       	st	Z, r25
	
	return tmp;
    1a9e:	98 2f       	mov	r25, r24
    1aa0:	01 c0       	rjmp	.+2      	; 0x1aa4 <circ_buff_get+0x36>
{
	uint8_t tmp;
	
	// sanity check
	if (NULL == buff) {
		return 0xff;
    1aa2:	9f ef       	ldi	r25, 0xFF	; 255
	tmp = buff->data[buff->head];
	buff->head = (buff->head + 1) & (CIRC_BUFF_CAPACITY - 1);
	buff->size --;
	
	return tmp;
}
    1aa4:	89 2f       	mov	r24, r25
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	08 95       	ret

00001aac <MOTOR_init>:


/* Stop both motors */ 
static inline void MOTORS_off(void)
{
	TCCR0B = TC0_CLK_OFF;
    1aac:	15 bc       	out	0x25, r1	; 37
	DDRD &= ~(1 << PORTD6) & ~(1 << PORTD5);
    1aae:	8a b1       	in	r24, 0x0a	; 10
    1ab0:	8f 79       	andi	r24, 0x9F	; 159
    1ab2:	8a b9       	out	0x0a, r24	; 10
	
	// Fast PWM Mode (TOP = 0xFF)
	// Set OC0A, OC0B @BOTTOM
	// Clear OC0A, OC0B @compare
	// (non-inverting mode)
	TCCR0A = (2u << COM0A0) | (2u << COM0B0) | (3u << WGM00);
    1ab4:	83 ea       	ldi	r24, 0xA3	; 163
    1ab6:	84 bd       	out	0x24, r24	; 36
	
	// reset counter value 
	TCNT0 = 0;
    1ab8:	16 bc       	out	0x26, r1	; 38
	
	// default compare values
	OCR0A = 50;
    1aba:	82 e3       	ldi	r24, 0x32	; 50
    1abc:	87 bd       	out	0x27, r24	; 39
	OCR0B = 50;
    1abe:	88 bd       	out	0x28, r24	; 40
	
	// desable all interrupts
	TIMSK0 = 0;
    1ac0:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	// enable output pins
	// in PD5, PD6
	DDRB |= (1 << PORTB0) | (1 << PORTB1);
    1ac4:	84 b1       	in	r24, 0x04	; 4
    1ac6:	83 60       	ori	r24, 0x03	; 3
    1ac8:	84 b9       	out	0x04, r24	; 4
    1aca:	08 95       	ret

00001acc <MOTOR_A_speed>:
}


void MOTOR_A_speed(int16_t speed)
{
	if (speed > 0) {
    1acc:	18 16       	cp	r1, r24
    1ace:	19 06       	cpc	r1, r25
    1ad0:	1c f4       	brge	.+6      	; 0x1ad8 <MOTOR_A_speed+0xc>
		OCR0A = speed;
    1ad2:	87 bd       	out	0x27, r24	; 39
		CONF_MOTOR_A_DIR_FW();
    1ad4:	28 9a       	sbi	0x05, 0	; 5
    1ad6:	08 95       	ret
	} else if (speed <= 0) {
		OCR0A = -speed;
    1ad8:	81 95       	neg	r24
    1ada:	87 bd       	out	0x27, r24	; 39
		CONF_MOTOR_A_DIR_BW();
    1adc:	28 98       	cbi	0x05, 0	; 5
    1ade:	08 95       	ret

00001ae0 <MOTOR_B_speed>:
}


void MOTOR_B_speed(int16_t speed)
{
	if (speed > 0) {
    1ae0:	18 16       	cp	r1, r24
    1ae2:	19 06       	cpc	r1, r25
    1ae4:	1c f4       	brge	.+6      	; 0x1aec <MOTOR_B_speed+0xc>
		OCR0B = speed;
    1ae6:	88 bd       	out	0x28, r24	; 40
		CONF_MOTOR_B_DIR_FW();
    1ae8:	29 98       	cbi	0x05, 1	; 5
    1aea:	08 95       	ret
	} else if (speed <= 0) {
		OCR0B = -speed;
    1aec:	81 95       	neg	r24
    1aee:	88 bd       	out	0x28, r24	; 40
		CONF_MOTOR_B_DIR_BW();
    1af0:	29 9a       	sbi	0x05, 1	; 5
    1af2:	08 95       	ret

00001af4 <__vector_18>:
} _local;


// Called @data RX
ISR(USART_RX_vect) 
{
    1af4:	1f 92       	push	r1
    1af6:	0f 92       	push	r0
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	0f 92       	push	r0
    1afc:	11 24       	eor	r1, r1
    1afe:	2f 93       	push	r18
    1b00:	3f 93       	push	r19
    1b02:	4f 93       	push	r20
    1b04:	5f 93       	push	r21
    1b06:	6f 93       	push	r22
    1b08:	7f 93       	push	r23
    1b0a:	8f 93       	push	r24
    1b0c:	9f 93       	push	r25
    1b0e:	af 93       	push	r26
    1b10:	bf 93       	push	r27
    1b12:	ef 93       	push	r30
    1b14:	ff 93       	push	r31
	circ_buff_put((struct circ_buff_t*)&(_local.buff_in), UDR0);
    1b16:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1b1a:	88 e5       	ldi	r24, 0x58	; 88
    1b1c:	94 e0       	ldi	r25, 0x04	; 4
    1b1e:	8c df       	rcall	.-232    	; 0x1a38 <circ_buff_put>
}
    1b20:	ff 91       	pop	r31
    1b22:	ef 91       	pop	r30
    1b24:	bf 91       	pop	r27
    1b26:	af 91       	pop	r26
    1b28:	9f 91       	pop	r25
    1b2a:	8f 91       	pop	r24
    1b2c:	7f 91       	pop	r23
    1b2e:	6f 91       	pop	r22
    1b30:	5f 91       	pop	r21
    1b32:	4f 91       	pop	r20
    1b34:	3f 91       	pop	r19
    1b36:	2f 91       	pop	r18
    1b38:	0f 90       	pop	r0
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	0f 90       	pop	r0
    1b3e:	1f 90       	pop	r1
    1b40:	18 95       	reti

00001b42 <__vector_19>:

// Called when data can be written to
// UART data reg
// (TX) 
ISR(USART_UDRE_vect)
{
    1b42:	1f 92       	push	r1
    1b44:	0f 92       	push	r0
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	0f 92       	push	r0
    1b4a:	11 24       	eor	r1, r1
    1b4c:	2f 93       	push	r18
    1b4e:	3f 93       	push	r19
    1b50:	4f 93       	push	r20
    1b52:	5f 93       	push	r21
    1b54:	6f 93       	push	r22
    1b56:	7f 93       	push	r23
    1b58:	8f 93       	push	r24
    1b5a:	9f 93       	push	r25
    1b5c:	af 93       	push	r26
    1b5e:	bf 93       	push	r27
    1b60:	ef 93       	push	r30
    1b62:	ff 93       	push	r31
	// if there are data to be sent
	if (_local.buff_out.size > 0) {
    1b64:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <_local+0x103>
    1b68:	88 23       	and	r24, r24
    1b6a:	31 f0       	breq	.+12     	; 0x1b78 <__vector_19+0x36>
		UDR0 = circ_buff_get((struct circ_buff_t*)&(_local.buff_out));
    1b6c:	8b ed       	ldi	r24, 0xDB	; 219
    1b6e:	94 e0       	ldi	r25, 0x04	; 4
    1b70:	7e df       	rcall	.-260    	; 0x1a6e <circ_buff_get>
    1b72:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1b76:	05 c0       	rjmp	.+10     	; 0x1b82 <__vector_19+0x40>
	} else {
		// no data to be sent
		// disable TX interrupt	
		UCSR0B &= ~(1 << UDRIE0);
    1b78:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1b7c:	8f 7d       	andi	r24, 0xDF	; 223
    1b7e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	}
}
    1b82:	ff 91       	pop	r31
    1b84:	ef 91       	pop	r30
    1b86:	bf 91       	pop	r27
    1b88:	af 91       	pop	r26
    1b8a:	9f 91       	pop	r25
    1b8c:	8f 91       	pop	r24
    1b8e:	7f 91       	pop	r23
    1b90:	6f 91       	pop	r22
    1b92:	5f 91       	pop	r21
    1b94:	4f 91       	pop	r20
    1b96:	3f 91       	pop	r19
    1b98:	2f 91       	pop	r18
    1b9a:	0f 90       	pop	r0
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	0f 90       	pop	r0
    1ba0:	1f 90       	pop	r1
    1ba2:	18 95       	reti

00001ba4 <UART_init>:

void UART_init(void)
{
	// 0b00000110
	// Async, 8N1
	UCSR0C = 0x06;
    1ba4:	86 e0       	ldi	r24, 0x06	; 6
    1ba6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	// set baudrate 38400
	UBRR0H = 0;
    1baa:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
#if defined (BOARD_CLOCK_8M)
	UBRR0L = 12;
#else
	UBRR0L = 25;
    1bae:	89 e1       	ldi	r24, 0x19	; 25
    1bb0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif
	// enable RX interrupt
	UCSR0B |= 1 << RXCIE0;
    1bb4:	e1 ec       	ldi	r30, 0xC1	; 193
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	80 68       	ori	r24, 0x80	; 128
    1bbc:	80 83       	st	Z, r24
	// enable RX, TX
	UCSR0B |= (3 << 3);
    1bbe:	80 81       	ld	r24, Z
    1bc0:	88 61       	ori	r24, 0x18	; 24
    1bc2:	80 83       	st	Z, r24
	
	circ_buff_init((struct circ_buff_t*)&(_local.buff_in));
    1bc4:	88 e5       	ldi	r24, 0x58	; 88
    1bc6:	94 e0       	ldi	r25, 0x04	; 4
    1bc8:	2c df       	rcall	.-424    	; 0x1a22 <circ_buff_init>
	circ_buff_init((struct circ_buff_t*)&(_local.buff_out));
    1bca:	8b ed       	ldi	r24, 0xDB	; 219
    1bcc:	94 e0       	ldi	r25, 0x04	; 4
    1bce:	29 cf       	rjmp	.-430    	; 0x1a22 <circ_buff_init>

00001bd0 <UART_write>:
    1bd0:	cf 93       	push	r28
}



void UART_write(uint8_t byte)
{	
    1bd2:	cf b7       	in	r28, 0x3f	; 63
	uint8_t flags;
	
	flags = SREG;
    1bd4:	f8 94       	cli
		// buffer full
		// re-enable interrupts
		sei();
		// wait a bit (enough to TX 1 byte)
		_delay_us(27);
		cli();
    1bd6:	90 91 5b 05 	lds	r25, 0x055B	; 0x80055b <_local+0x103>
	uint8_t flags;
	
	flags = SREG;
	// check if buff out is full
	cli();
	while (_local.buff_out.size >= CIRC_BUFF_CAPACITY) {
    1bda:	97 ff       	sbrs	r25, 7
    1bdc:	05 c0       	rjmp	.+10     	; 0x1be8 <UART_write+0x18>
    1bde:	78 94       	sei
		// buffer full
		// re-enable interrupts
		sei();
    1be0:	90 e9       	ldi	r25, 0x90	; 144
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1be2:	9a 95       	dec	r25
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <UART_write+0x12>
    1be6:	f6 cf       	rjmp	.-20     	; 0x1bd4 <UART_write+0x4>
		_delay_us(27);
		cli();
	}

	// add data to TX buffer
	circ_buff_put((struct circ_buff_t*)&(_local.buff_out), byte);
    1be8:	68 2f       	mov	r22, r24
    1bea:	8b ed       	ldi	r24, 0xDB	; 219
    1bec:	94 e0       	ldi	r25, 0x04	; 4
    1bee:	24 df       	rcall	.-440    	; 0x1a38 <circ_buff_put>
    1bf0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	// enable TX Data Reg Empty Interrupt
	UCSR0B |= 1 << UDRIE0;
    1bf4:	80 62       	ori	r24, 0x20	; 32
    1bf6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1bfa:	cf bf       	out	0x3f, r28	; 63
	
	SREG = flags;
    1bfc:	cf 91       	pop	r28
}
    1bfe:	08 95       	ret

00001c00 <UART_write_str>:
    1c00:	cf 93       	push	r28

void UART_write_str(const char *str)
{
    1c02:	df 93       	push	r29
    1c04:	ec 01       	movw	r28, r24
	uint16_t i;
	
	i = 0;
	while(str[i] != '\0') {
    1c06:	89 91       	ld	r24, Y+
    1c08:	88 23       	and	r24, r24
    1c0a:	11 f0       	breq	.+4      	; 0x1c10 <UART_write_str+0x10>
		UART_write(str[i++]);
    1c0c:	e1 df       	rcall	.-62     	; 0x1bd0 <UART_write>
    1c0e:	fb cf       	rjmp	.-10     	; 0x1c06 <UART_write_str+0x6>
    1c10:	df 91       	pop	r29
	}
}
    1c12:	cf 91       	pop	r28
    1c14:	08 95       	ret

00001c16 <UART_read>:

uint8_t UART_read(void)
{
	uint8_t tmp;
	
	cli();
    1c16:	f8 94       	cli
	tmp = circ_buff_get((struct circ_buff_t*)&(_local.buff_in));
    1c18:	88 e5       	ldi	r24, 0x58	; 88
    1c1a:	94 e0       	ldi	r25, 0x04	; 4
    1c1c:	28 df       	rcall	.-432    	; 0x1a6e <circ_buff_get>
    1c1e:	78 94       	sei
	sei();
    1c20:	08 95       	ret

00001c22 <UART_available>:
	
	return tmp;
}
    1c22:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <_local+0x80>


int	 UART_available(void)
{
	return (int)_local.buff_in.size;
    1c26:	90 e0       	ldi	r25, 0x00	; 0
}
    1c28:	08 95       	ret

00001c2a <main>:


int main(void)
{	
	// init system peripherals
	I2C_init();
    1c2a:	f7 dd       	rcall	.-1042   	; 0x181a <I2C_init>
	UART_init();
    1c2c:	bb df       	rcall	.-138    	; 0x1ba4 <UART_init>
	
	// init sub-systems
	MOTOR_init();
    1c2e:	3e df       	rcall	.-388    	; 0x1aac <MOTOR_init>
	CONS_init();
    1c30:	0e 94 3f 05 	call	0xa7e	; 0xa7e <CONS_init>
	CTRL_init();
    1c34:	92 d9       	rcall	.-3292   	; 0xf5a <CTRL_init>
    1c36:	e1 2c       	mov	r14, r1
	
	// init Control System parameters
	CTRL_set_PID_terms(55.0f, 3, 9.0f);
    1c38:	f1 2c       	mov	r15, r1
    1c3a:	00 e1       	ldi	r16, 0x10	; 16
    1c3c:	11 e4       	ldi	r17, 0x41	; 65
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e4       	ldi	r20, 0x40	; 64
    1c44:	50 e4       	ldi	r21, 0x40	; 64
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	8c e5       	ldi	r24, 0x5C	; 92
    1c4c:	92 e4       	ldi	r25, 0x42	; 66
    1c4e:	a7 d9       	rcall	.-3250   	; 0xf9e <CTRL_set_PID_terms>
    1c50:	66 e6       	ldi	r22, 0x66	; 102
	CTRL_set_angle_off(-3.6f);
    1c52:	76 e6       	ldi	r23, 0x66	; 102
    1c54:	86 e6       	ldi	r24, 0x66	; 102
    1c56:	90 ec       	ldi	r25, 0xC0	; 192
    1c58:	e0 d9       	rcall	.-3136   	; 0x101a <CTRL_set_angle_off>
    1c5a:	78 94       	sei
	
	// enable global interrupts
	sei();
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
	
	// init sensor BNO055
	BNO_init(true);
    1c5e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <BNO_init>
	// try to copy calibration data
	// from EEPROM to BNO055 sensor
	CTRL_load_calib_from_EEPROM();
	
	// enable button
	DDRB &= ~(1 << PORTB7);
    1c62:	12 dc       	rcall	.-2012   	; 0x1488 <CTRL_load_calib_from_EEPROM>
	
	// LED indicate system Running
	IND_set_mode(IND_RUNNING);
    1c64:	27 98       	cbi	0x04, 7	; 4
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	3c de       	rcall	.-904    	; 0x18e2 <IND_set_mode>
	
	// start Control System
	CTRL_start();
    1c6a:	e3 d9       	rcall	.-3130   	; 0x1032 <CTRL_start>
    1c6c:	02 d8       	rcall	.-4092   	; 0xc72 <CONS_handle>
	
	// main loop
	while (1) {
		// handle Console Commands
		CONS_handle();
    1c6e:	45 da       	rcall	.-2934   	; 0x10fa <CTRL_handle>
    1c70:	1f 99       	sbic	0x03, 7	; 3
		// handle Control System
		CTRL_handle();
    1c72:	fc cf       	rjmp	.-8      	; 0x1c6c <main+0x42>
    1c74:	f8 cf       	rjmp	.-16     	; 0x1c66 <main+0x3c>

00001c76 <__subsf3>:
		// on button press, re-enable system
		if (0 == (PINB & (1 << PORTB7))) {
    1c76:	50 58       	subi	r21, 0x80	; 128

00001c78 <__addsf3>:
    1c78:	bb 27       	eor	r27, r27
    1c7a:	aa 27       	eor	r26, r26
    1c7c:	0e d0       	rcall	.+28     	; 0x1c9a <__addsf3x>
    1c7e:	b1 c1       	rjmp	.+866    	; 0x1fe2 <__fp_round>
    1c80:	a2 d1       	rcall	.+836    	; 0x1fc6 <__fp_pscA>
    1c82:	30 f0       	brcs	.+12     	; 0x1c90 <__addsf3+0x18>
    1c84:	a7 d1       	rcall	.+846    	; 0x1fd4 <__fp_pscB>
    1c86:	20 f0       	brcs	.+8      	; 0x1c90 <__addsf3+0x18>
    1c88:	31 f4       	brne	.+12     	; 0x1c96 <__addsf3+0x1e>
    1c8a:	9f 3f       	cpi	r25, 0xFF	; 255
    1c8c:	11 f4       	brne	.+4      	; 0x1c92 <__addsf3+0x1a>
    1c8e:	1e f4       	brtc	.+6      	; 0x1c96 <__addsf3+0x1e>
    1c90:	97 c1       	rjmp	.+814    	; 0x1fc0 <__fp_nan>
    1c92:	0e f4       	brtc	.+2      	; 0x1c96 <__addsf3+0x1e>
    1c94:	e0 95       	com	r30
    1c96:	e7 fb       	bst	r30, 7
    1c98:	64 c1       	rjmp	.+712    	; 0x1f62 <__fp_inf>

00001c9a <__addsf3x>:
    1c9a:	e9 2f       	mov	r30, r25
    1c9c:	b3 d1       	rcall	.+870    	; 0x2004 <__fp_split3>
    1c9e:	80 f3       	brcs	.-32     	; 0x1c80 <__addsf3+0x8>
    1ca0:	ba 17       	cp	r27, r26
    1ca2:	62 07       	cpc	r22, r18
    1ca4:	73 07       	cpc	r23, r19
    1ca6:	84 07       	cpc	r24, r20
    1ca8:	95 07       	cpc	r25, r21
    1caa:	18 f0       	brcs	.+6      	; 0x1cb2 <__addsf3x+0x18>
    1cac:	71 f4       	brne	.+28     	; 0x1cca <__addsf3x+0x30>
    1cae:	9e f5       	brtc	.+102    	; 0x1d16 <__addsf3x+0x7c>
    1cb0:	e2 c1       	rjmp	.+964    	; 0x2076 <__fp_zero>
    1cb2:	0e f4       	brtc	.+2      	; 0x1cb6 <__addsf3x+0x1c>
    1cb4:	e0 95       	com	r30
    1cb6:	0b 2e       	mov	r0, r27
    1cb8:	ba 2f       	mov	r27, r26
    1cba:	a0 2d       	mov	r26, r0
    1cbc:	0b 01       	movw	r0, r22
    1cbe:	b9 01       	movw	r22, r18
    1cc0:	90 01       	movw	r18, r0
    1cc2:	0c 01       	movw	r0, r24
    1cc4:	ca 01       	movw	r24, r20
    1cc6:	a0 01       	movw	r20, r0
    1cc8:	11 24       	eor	r1, r1
    1cca:	ff 27       	eor	r31, r31
    1ccc:	59 1b       	sub	r21, r25
    1cce:	99 f0       	breq	.+38     	; 0x1cf6 <__addsf3x+0x5c>
    1cd0:	59 3f       	cpi	r21, 0xF9	; 249
    1cd2:	50 f4       	brcc	.+20     	; 0x1ce8 <__addsf3x+0x4e>
    1cd4:	50 3e       	cpi	r21, 0xE0	; 224
    1cd6:	68 f1       	brcs	.+90     	; 0x1d32 <__addsf3x+0x98>
    1cd8:	1a 16       	cp	r1, r26
    1cda:	f0 40       	sbci	r31, 0x00	; 0
    1cdc:	a2 2f       	mov	r26, r18
    1cde:	23 2f       	mov	r18, r19
    1ce0:	34 2f       	mov	r19, r20
    1ce2:	44 27       	eor	r20, r20
    1ce4:	58 5f       	subi	r21, 0xF8	; 248
    1ce6:	f3 cf       	rjmp	.-26     	; 0x1cce <__addsf3x+0x34>
    1ce8:	46 95       	lsr	r20
    1cea:	37 95       	ror	r19
    1cec:	27 95       	ror	r18
    1cee:	a7 95       	ror	r26
    1cf0:	f0 40       	sbci	r31, 0x00	; 0
    1cf2:	53 95       	inc	r21
    1cf4:	c9 f7       	brne	.-14     	; 0x1ce8 <__addsf3x+0x4e>
    1cf6:	7e f4       	brtc	.+30     	; 0x1d16 <__addsf3x+0x7c>
    1cf8:	1f 16       	cp	r1, r31
    1cfa:	ba 0b       	sbc	r27, r26
    1cfc:	62 0b       	sbc	r22, r18
    1cfe:	73 0b       	sbc	r23, r19
    1d00:	84 0b       	sbc	r24, r20
    1d02:	ba f0       	brmi	.+46     	; 0x1d32 <__addsf3x+0x98>
    1d04:	91 50       	subi	r25, 0x01	; 1
    1d06:	a1 f0       	breq	.+40     	; 0x1d30 <__addsf3x+0x96>
    1d08:	ff 0f       	add	r31, r31
    1d0a:	bb 1f       	adc	r27, r27
    1d0c:	66 1f       	adc	r22, r22
    1d0e:	77 1f       	adc	r23, r23
    1d10:	88 1f       	adc	r24, r24
    1d12:	c2 f7       	brpl	.-16     	; 0x1d04 <__addsf3x+0x6a>
    1d14:	0e c0       	rjmp	.+28     	; 0x1d32 <__addsf3x+0x98>
    1d16:	ba 0f       	add	r27, r26
    1d18:	62 1f       	adc	r22, r18
    1d1a:	73 1f       	adc	r23, r19
    1d1c:	84 1f       	adc	r24, r20
    1d1e:	48 f4       	brcc	.+18     	; 0x1d32 <__addsf3x+0x98>
    1d20:	87 95       	ror	r24
    1d22:	77 95       	ror	r23
    1d24:	67 95       	ror	r22
    1d26:	b7 95       	ror	r27
    1d28:	f7 95       	ror	r31
    1d2a:	9e 3f       	cpi	r25, 0xFE	; 254
    1d2c:	08 f0       	brcs	.+2      	; 0x1d30 <__addsf3x+0x96>
    1d2e:	b3 cf       	rjmp	.-154    	; 0x1c96 <__addsf3+0x1e>
    1d30:	93 95       	inc	r25
    1d32:	88 0f       	add	r24, r24
    1d34:	08 f0       	brcs	.+2      	; 0x1d38 <__addsf3x+0x9e>
    1d36:	99 27       	eor	r25, r25
    1d38:	ee 0f       	add	r30, r30
    1d3a:	97 95       	ror	r25
    1d3c:	87 95       	ror	r24
    1d3e:	08 95       	ret

00001d40 <__cmpsf2>:
    1d40:	ec d0       	rcall	.+472    	; 0x1f1a <__fp_cmp>
    1d42:	08 f4       	brcc	.+2      	; 0x1d46 <__cmpsf2+0x6>
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	08 95       	ret

00001d48 <__divsf3>:
    1d48:	0c d0       	rcall	.+24     	; 0x1d62 <__divsf3x>
    1d4a:	4b c1       	rjmp	.+662    	; 0x1fe2 <__fp_round>
    1d4c:	43 d1       	rcall	.+646    	; 0x1fd4 <__fp_pscB>
    1d4e:	40 f0       	brcs	.+16     	; 0x1d60 <__divsf3+0x18>
    1d50:	3a d1       	rcall	.+628    	; 0x1fc6 <__fp_pscA>
    1d52:	30 f0       	brcs	.+12     	; 0x1d60 <__divsf3+0x18>
    1d54:	21 f4       	brne	.+8      	; 0x1d5e <__divsf3+0x16>
    1d56:	5f 3f       	cpi	r21, 0xFF	; 255
    1d58:	19 f0       	breq	.+6      	; 0x1d60 <__divsf3+0x18>
    1d5a:	03 c1       	rjmp	.+518    	; 0x1f62 <__fp_inf>
    1d5c:	51 11       	cpse	r21, r1
    1d5e:	8c c1       	rjmp	.+792    	; 0x2078 <__fp_szero>
    1d60:	2f c1       	rjmp	.+606    	; 0x1fc0 <__fp_nan>

00001d62 <__divsf3x>:
    1d62:	50 d1       	rcall	.+672    	; 0x2004 <__fp_split3>
    1d64:	98 f3       	brcs	.-26     	; 0x1d4c <__divsf3+0x4>

00001d66 <__divsf3_pse>:
    1d66:	99 23       	and	r25, r25
    1d68:	c9 f3       	breq	.-14     	; 0x1d5c <__divsf3+0x14>
    1d6a:	55 23       	and	r21, r21
    1d6c:	b1 f3       	breq	.-20     	; 0x1d5a <__divsf3+0x12>
    1d6e:	95 1b       	sub	r25, r21
    1d70:	55 0b       	sbc	r21, r21
    1d72:	bb 27       	eor	r27, r27
    1d74:	aa 27       	eor	r26, r26
    1d76:	62 17       	cp	r22, r18
    1d78:	73 07       	cpc	r23, r19
    1d7a:	84 07       	cpc	r24, r20
    1d7c:	38 f0       	brcs	.+14     	; 0x1d8c <__divsf3_pse+0x26>
    1d7e:	9f 5f       	subi	r25, 0xFF	; 255
    1d80:	5f 4f       	sbci	r21, 0xFF	; 255
    1d82:	22 0f       	add	r18, r18
    1d84:	33 1f       	adc	r19, r19
    1d86:	44 1f       	adc	r20, r20
    1d88:	aa 1f       	adc	r26, r26
    1d8a:	a9 f3       	breq	.-22     	; 0x1d76 <__divsf3_pse+0x10>
    1d8c:	33 d0       	rcall	.+102    	; 0x1df4 <__divsf3_pse+0x8e>
    1d8e:	0e 2e       	mov	r0, r30
    1d90:	3a f0       	brmi	.+14     	; 0x1da0 <__divsf3_pse+0x3a>
    1d92:	e0 e8       	ldi	r30, 0x80	; 128
    1d94:	30 d0       	rcall	.+96     	; 0x1df6 <__divsf3_pse+0x90>
    1d96:	91 50       	subi	r25, 0x01	; 1
    1d98:	50 40       	sbci	r21, 0x00	; 0
    1d9a:	e6 95       	lsr	r30
    1d9c:	00 1c       	adc	r0, r0
    1d9e:	ca f7       	brpl	.-14     	; 0x1d92 <__divsf3_pse+0x2c>
    1da0:	29 d0       	rcall	.+82     	; 0x1df4 <__divsf3_pse+0x8e>
    1da2:	fe 2f       	mov	r31, r30
    1da4:	27 d0       	rcall	.+78     	; 0x1df4 <__divsf3_pse+0x8e>
    1da6:	66 0f       	add	r22, r22
    1da8:	77 1f       	adc	r23, r23
    1daa:	88 1f       	adc	r24, r24
    1dac:	bb 1f       	adc	r27, r27
    1dae:	26 17       	cp	r18, r22
    1db0:	37 07       	cpc	r19, r23
    1db2:	48 07       	cpc	r20, r24
    1db4:	ab 07       	cpc	r26, r27
    1db6:	b0 e8       	ldi	r27, 0x80	; 128
    1db8:	09 f0       	breq	.+2      	; 0x1dbc <__divsf3_pse+0x56>
    1dba:	bb 0b       	sbc	r27, r27
    1dbc:	80 2d       	mov	r24, r0
    1dbe:	bf 01       	movw	r22, r30
    1dc0:	ff 27       	eor	r31, r31
    1dc2:	93 58       	subi	r25, 0x83	; 131
    1dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc6:	2a f0       	brmi	.+10     	; 0x1dd2 <__divsf3_pse+0x6c>
    1dc8:	9e 3f       	cpi	r25, 0xFE	; 254
    1dca:	51 05       	cpc	r21, r1
    1dcc:	68 f0       	brcs	.+26     	; 0x1de8 <__divsf3_pse+0x82>
    1dce:	c9 c0       	rjmp	.+402    	; 0x1f62 <__fp_inf>
    1dd0:	53 c1       	rjmp	.+678    	; 0x2078 <__fp_szero>
    1dd2:	5f 3f       	cpi	r21, 0xFF	; 255
    1dd4:	ec f3       	brlt	.-6      	; 0x1dd0 <__divsf3_pse+0x6a>
    1dd6:	98 3e       	cpi	r25, 0xE8	; 232
    1dd8:	dc f3       	brlt	.-10     	; 0x1dd0 <__divsf3_pse+0x6a>
    1dda:	86 95       	lsr	r24
    1ddc:	77 95       	ror	r23
    1dde:	67 95       	ror	r22
    1de0:	b7 95       	ror	r27
    1de2:	f7 95       	ror	r31
    1de4:	9f 5f       	subi	r25, 0xFF	; 255
    1de6:	c9 f7       	brne	.-14     	; 0x1dda <__divsf3_pse+0x74>
    1de8:	88 0f       	add	r24, r24
    1dea:	91 1d       	adc	r25, r1
    1dec:	96 95       	lsr	r25
    1dee:	87 95       	ror	r24
    1df0:	97 f9       	bld	r25, 7
    1df2:	08 95       	ret
    1df4:	e1 e0       	ldi	r30, 0x01	; 1
    1df6:	66 0f       	add	r22, r22
    1df8:	77 1f       	adc	r23, r23
    1dfa:	88 1f       	adc	r24, r24
    1dfc:	bb 1f       	adc	r27, r27
    1dfe:	62 17       	cp	r22, r18
    1e00:	73 07       	cpc	r23, r19
    1e02:	84 07       	cpc	r24, r20
    1e04:	ba 07       	cpc	r27, r26
    1e06:	20 f0       	brcs	.+8      	; 0x1e10 <__divsf3_pse+0xaa>
    1e08:	62 1b       	sub	r22, r18
    1e0a:	73 0b       	sbc	r23, r19
    1e0c:	84 0b       	sbc	r24, r20
    1e0e:	ba 0b       	sbc	r27, r26
    1e10:	ee 1f       	adc	r30, r30
    1e12:	88 f7       	brcc	.-30     	; 0x1df6 <__divsf3_pse+0x90>
    1e14:	e0 95       	com	r30
    1e16:	08 95       	ret

00001e18 <__fixsfsi>:
    1e18:	04 d0       	rcall	.+8      	; 0x1e22 <__fixunssfsi>
    1e1a:	68 94       	set
    1e1c:	b1 11       	cpse	r27, r1
    1e1e:	2c c1       	rjmp	.+600    	; 0x2078 <__fp_szero>
    1e20:	08 95       	ret

00001e22 <__fixunssfsi>:
    1e22:	f8 d0       	rcall	.+496    	; 0x2014 <__fp_splitA>
    1e24:	88 f0       	brcs	.+34     	; 0x1e48 <__fixunssfsi+0x26>
    1e26:	9f 57       	subi	r25, 0x7F	; 127
    1e28:	90 f0       	brcs	.+36     	; 0x1e4e <__fixunssfsi+0x2c>
    1e2a:	b9 2f       	mov	r27, r25
    1e2c:	99 27       	eor	r25, r25
    1e2e:	b7 51       	subi	r27, 0x17	; 23
    1e30:	a0 f0       	brcs	.+40     	; 0x1e5a <__fixunssfsi+0x38>
    1e32:	d1 f0       	breq	.+52     	; 0x1e68 <__fixunssfsi+0x46>
    1e34:	66 0f       	add	r22, r22
    1e36:	77 1f       	adc	r23, r23
    1e38:	88 1f       	adc	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	1a f0       	brmi	.+6      	; 0x1e44 <__fixunssfsi+0x22>
    1e3e:	ba 95       	dec	r27
    1e40:	c9 f7       	brne	.-14     	; 0x1e34 <__fixunssfsi+0x12>
    1e42:	12 c0       	rjmp	.+36     	; 0x1e68 <__fixunssfsi+0x46>
    1e44:	b1 30       	cpi	r27, 0x01	; 1
    1e46:	81 f0       	breq	.+32     	; 0x1e68 <__fixunssfsi+0x46>
    1e48:	16 d1       	rcall	.+556    	; 0x2076 <__fp_zero>
    1e4a:	b1 e0       	ldi	r27, 0x01	; 1
    1e4c:	08 95       	ret
    1e4e:	13 c1       	rjmp	.+550    	; 0x2076 <__fp_zero>
    1e50:	67 2f       	mov	r22, r23
    1e52:	78 2f       	mov	r23, r24
    1e54:	88 27       	eor	r24, r24
    1e56:	b8 5f       	subi	r27, 0xF8	; 248
    1e58:	39 f0       	breq	.+14     	; 0x1e68 <__fixunssfsi+0x46>
    1e5a:	b9 3f       	cpi	r27, 0xF9	; 249
    1e5c:	cc f3       	brlt	.-14     	; 0x1e50 <__fixunssfsi+0x2e>
    1e5e:	86 95       	lsr	r24
    1e60:	77 95       	ror	r23
    1e62:	67 95       	ror	r22
    1e64:	b3 95       	inc	r27
    1e66:	d9 f7       	brne	.-10     	; 0x1e5e <__fixunssfsi+0x3c>
    1e68:	3e f4       	brtc	.+14     	; 0x1e78 <__fixunssfsi+0x56>
    1e6a:	90 95       	com	r25
    1e6c:	80 95       	com	r24
    1e6e:	70 95       	com	r23
    1e70:	61 95       	neg	r22
    1e72:	7f 4f       	sbci	r23, 0xFF	; 255
    1e74:	8f 4f       	sbci	r24, 0xFF	; 255
    1e76:	9f 4f       	sbci	r25, 0xFF	; 255
    1e78:	08 95       	ret

00001e7a <__floatunsisf>:
    1e7a:	e8 94       	clt
    1e7c:	09 c0       	rjmp	.+18     	; 0x1e90 <__floatsisf+0x12>

00001e7e <__floatsisf>:
    1e7e:	97 fb       	bst	r25, 7
    1e80:	3e f4       	brtc	.+14     	; 0x1e90 <__floatsisf+0x12>
    1e82:	90 95       	com	r25
    1e84:	80 95       	com	r24
    1e86:	70 95       	com	r23
    1e88:	61 95       	neg	r22
    1e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e90:	99 23       	and	r25, r25
    1e92:	a9 f0       	breq	.+42     	; 0x1ebe <__floatsisf+0x40>
    1e94:	f9 2f       	mov	r31, r25
    1e96:	96 e9       	ldi	r25, 0x96	; 150
    1e98:	bb 27       	eor	r27, r27
    1e9a:	93 95       	inc	r25
    1e9c:	f6 95       	lsr	r31
    1e9e:	87 95       	ror	r24
    1ea0:	77 95       	ror	r23
    1ea2:	67 95       	ror	r22
    1ea4:	b7 95       	ror	r27
    1ea6:	f1 11       	cpse	r31, r1
    1ea8:	f8 cf       	rjmp	.-16     	; 0x1e9a <__floatsisf+0x1c>
    1eaa:	fa f4       	brpl	.+62     	; 0x1eea <__floatsisf+0x6c>
    1eac:	bb 0f       	add	r27, r27
    1eae:	11 f4       	brne	.+4      	; 0x1eb4 <__floatsisf+0x36>
    1eb0:	60 ff       	sbrs	r22, 0
    1eb2:	1b c0       	rjmp	.+54     	; 0x1eea <__floatsisf+0x6c>
    1eb4:	6f 5f       	subi	r22, 0xFF	; 255
    1eb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eba:	9f 4f       	sbci	r25, 0xFF	; 255
    1ebc:	16 c0       	rjmp	.+44     	; 0x1eea <__floatsisf+0x6c>
    1ebe:	88 23       	and	r24, r24
    1ec0:	11 f0       	breq	.+4      	; 0x1ec6 <__floatsisf+0x48>
    1ec2:	96 e9       	ldi	r25, 0x96	; 150
    1ec4:	11 c0       	rjmp	.+34     	; 0x1ee8 <__floatsisf+0x6a>
    1ec6:	77 23       	and	r23, r23
    1ec8:	21 f0       	breq	.+8      	; 0x1ed2 <__floatsisf+0x54>
    1eca:	9e e8       	ldi	r25, 0x8E	; 142
    1ecc:	87 2f       	mov	r24, r23
    1ece:	76 2f       	mov	r23, r22
    1ed0:	05 c0       	rjmp	.+10     	; 0x1edc <__floatsisf+0x5e>
    1ed2:	66 23       	and	r22, r22
    1ed4:	71 f0       	breq	.+28     	; 0x1ef2 <__floatsisf+0x74>
    1ed6:	96 e8       	ldi	r25, 0x86	; 134
    1ed8:	86 2f       	mov	r24, r22
    1eda:	70 e0       	ldi	r23, 0x00	; 0
    1edc:	60 e0       	ldi	r22, 0x00	; 0
    1ede:	2a f0       	brmi	.+10     	; 0x1eea <__floatsisf+0x6c>
    1ee0:	9a 95       	dec	r25
    1ee2:	66 0f       	add	r22, r22
    1ee4:	77 1f       	adc	r23, r23
    1ee6:	88 1f       	adc	r24, r24
    1ee8:	da f7       	brpl	.-10     	; 0x1ee0 <__floatsisf+0x62>
    1eea:	88 0f       	add	r24, r24
    1eec:	96 95       	lsr	r25
    1eee:	87 95       	ror	r24
    1ef0:	97 f9       	bld	r25, 7
    1ef2:	08 95       	ret

00001ef4 <floor>:
    1ef4:	a9 d0       	rcall	.+338    	; 0x2048 <__fp_trunc>
    1ef6:	80 f0       	brcs	.+32     	; 0x1f18 <floor+0x24>
    1ef8:	9f 37       	cpi	r25, 0x7F	; 127
    1efa:	40 f4       	brcc	.+16     	; 0x1f0c <floor+0x18>
    1efc:	91 11       	cpse	r25, r1
    1efe:	0e f0       	brts	.+2      	; 0x1f02 <floor+0xe>
    1f00:	bb c0       	rjmp	.+374    	; 0x2078 <__fp_szero>
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	70 e0       	ldi	r23, 0x00	; 0
    1f06:	80 e8       	ldi	r24, 0x80	; 128
    1f08:	9f eb       	ldi	r25, 0xBF	; 191
    1f0a:	08 95       	ret
    1f0c:	26 f4       	brtc	.+8      	; 0x1f16 <floor+0x22>
    1f0e:	1b 16       	cp	r1, r27
    1f10:	61 1d       	adc	r22, r1
    1f12:	71 1d       	adc	r23, r1
    1f14:	81 1d       	adc	r24, r1
    1f16:	2b c0       	rjmp	.+86     	; 0x1f6e <__fp_mintl>
    1f18:	45 c0       	rjmp	.+138    	; 0x1fa4 <__fp_mpack>

00001f1a <__fp_cmp>:
    1f1a:	99 0f       	add	r25, r25
    1f1c:	00 08       	sbc	r0, r0
    1f1e:	55 0f       	add	r21, r21
    1f20:	aa 0b       	sbc	r26, r26
    1f22:	e0 e8       	ldi	r30, 0x80	; 128
    1f24:	fe ef       	ldi	r31, 0xFE	; 254
    1f26:	16 16       	cp	r1, r22
    1f28:	17 06       	cpc	r1, r23
    1f2a:	e8 07       	cpc	r30, r24
    1f2c:	f9 07       	cpc	r31, r25
    1f2e:	c0 f0       	brcs	.+48     	; 0x1f60 <__fp_cmp+0x46>
    1f30:	12 16       	cp	r1, r18
    1f32:	13 06       	cpc	r1, r19
    1f34:	e4 07       	cpc	r30, r20
    1f36:	f5 07       	cpc	r31, r21
    1f38:	98 f0       	brcs	.+38     	; 0x1f60 <__fp_cmp+0x46>
    1f3a:	62 1b       	sub	r22, r18
    1f3c:	73 0b       	sbc	r23, r19
    1f3e:	84 0b       	sbc	r24, r20
    1f40:	95 0b       	sbc	r25, r21
    1f42:	39 f4       	brne	.+14     	; 0x1f52 <__fp_cmp+0x38>
    1f44:	0a 26       	eor	r0, r26
    1f46:	61 f0       	breq	.+24     	; 0x1f60 <__fp_cmp+0x46>
    1f48:	23 2b       	or	r18, r19
    1f4a:	24 2b       	or	r18, r20
    1f4c:	25 2b       	or	r18, r21
    1f4e:	21 f4       	brne	.+8      	; 0x1f58 <__fp_cmp+0x3e>
    1f50:	08 95       	ret
    1f52:	0a 26       	eor	r0, r26
    1f54:	09 f4       	brne	.+2      	; 0x1f58 <__fp_cmp+0x3e>
    1f56:	a1 40       	sbci	r26, 0x01	; 1
    1f58:	a6 95       	lsr	r26
    1f5a:	8f ef       	ldi	r24, 0xFF	; 255
    1f5c:	81 1d       	adc	r24, r1
    1f5e:	81 1d       	adc	r24, r1
    1f60:	08 95       	ret

00001f62 <__fp_inf>:
    1f62:	97 f9       	bld	r25, 7
    1f64:	9f 67       	ori	r25, 0x7F	; 127
    1f66:	80 e8       	ldi	r24, 0x80	; 128
    1f68:	70 e0       	ldi	r23, 0x00	; 0
    1f6a:	60 e0       	ldi	r22, 0x00	; 0
    1f6c:	08 95       	ret

00001f6e <__fp_mintl>:
    1f6e:	88 23       	and	r24, r24
    1f70:	71 f4       	brne	.+28     	; 0x1f8e <__fp_mintl+0x20>
    1f72:	77 23       	and	r23, r23
    1f74:	21 f0       	breq	.+8      	; 0x1f7e <__fp_mintl+0x10>
    1f76:	98 50       	subi	r25, 0x08	; 8
    1f78:	87 2b       	or	r24, r23
    1f7a:	76 2f       	mov	r23, r22
    1f7c:	07 c0       	rjmp	.+14     	; 0x1f8c <__fp_mintl+0x1e>
    1f7e:	66 23       	and	r22, r22
    1f80:	11 f4       	brne	.+4      	; 0x1f86 <__fp_mintl+0x18>
    1f82:	99 27       	eor	r25, r25
    1f84:	0d c0       	rjmp	.+26     	; 0x1fa0 <__fp_mintl+0x32>
    1f86:	90 51       	subi	r25, 0x10	; 16
    1f88:	86 2b       	or	r24, r22
    1f8a:	70 e0       	ldi	r23, 0x00	; 0
    1f8c:	60 e0       	ldi	r22, 0x00	; 0
    1f8e:	2a f0       	brmi	.+10     	; 0x1f9a <__fp_mintl+0x2c>
    1f90:	9a 95       	dec	r25
    1f92:	66 0f       	add	r22, r22
    1f94:	77 1f       	adc	r23, r23
    1f96:	88 1f       	adc	r24, r24
    1f98:	da f7       	brpl	.-10     	; 0x1f90 <__fp_mintl+0x22>
    1f9a:	88 0f       	add	r24, r24
    1f9c:	96 95       	lsr	r25
    1f9e:	87 95       	ror	r24
    1fa0:	97 f9       	bld	r25, 7
    1fa2:	08 95       	ret

00001fa4 <__fp_mpack>:
    1fa4:	9f 3f       	cpi	r25, 0xFF	; 255
    1fa6:	31 f0       	breq	.+12     	; 0x1fb4 <__fp_mpack_finite+0xc>

00001fa8 <__fp_mpack_finite>:
    1fa8:	91 50       	subi	r25, 0x01	; 1
    1faa:	20 f4       	brcc	.+8      	; 0x1fb4 <__fp_mpack_finite+0xc>
    1fac:	87 95       	ror	r24
    1fae:	77 95       	ror	r23
    1fb0:	67 95       	ror	r22
    1fb2:	b7 95       	ror	r27
    1fb4:	88 0f       	add	r24, r24
    1fb6:	91 1d       	adc	r25, r1
    1fb8:	96 95       	lsr	r25
    1fba:	87 95       	ror	r24
    1fbc:	97 f9       	bld	r25, 7
    1fbe:	08 95       	ret

00001fc0 <__fp_nan>:
    1fc0:	9f ef       	ldi	r25, 0xFF	; 255
    1fc2:	80 ec       	ldi	r24, 0xC0	; 192
    1fc4:	08 95       	ret

00001fc6 <__fp_pscA>:
    1fc6:	00 24       	eor	r0, r0
    1fc8:	0a 94       	dec	r0
    1fca:	16 16       	cp	r1, r22
    1fcc:	17 06       	cpc	r1, r23
    1fce:	18 06       	cpc	r1, r24
    1fd0:	09 06       	cpc	r0, r25
    1fd2:	08 95       	ret

00001fd4 <__fp_pscB>:
    1fd4:	00 24       	eor	r0, r0
    1fd6:	0a 94       	dec	r0
    1fd8:	12 16       	cp	r1, r18
    1fda:	13 06       	cpc	r1, r19
    1fdc:	14 06       	cpc	r1, r20
    1fde:	05 06       	cpc	r0, r21
    1fe0:	08 95       	ret

00001fe2 <__fp_round>:
    1fe2:	09 2e       	mov	r0, r25
    1fe4:	03 94       	inc	r0
    1fe6:	00 0c       	add	r0, r0
    1fe8:	11 f4       	brne	.+4      	; 0x1fee <__fp_round+0xc>
    1fea:	88 23       	and	r24, r24
    1fec:	52 f0       	brmi	.+20     	; 0x2002 <__fp_round+0x20>
    1fee:	bb 0f       	add	r27, r27
    1ff0:	40 f4       	brcc	.+16     	; 0x2002 <__fp_round+0x20>
    1ff2:	bf 2b       	or	r27, r31
    1ff4:	11 f4       	brne	.+4      	; 0x1ffa <__fp_round+0x18>
    1ff6:	60 ff       	sbrs	r22, 0
    1ff8:	04 c0       	rjmp	.+8      	; 0x2002 <__fp_round+0x20>
    1ffa:	6f 5f       	subi	r22, 0xFF	; 255
    1ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    2000:	9f 4f       	sbci	r25, 0xFF	; 255
    2002:	08 95       	ret

00002004 <__fp_split3>:
    2004:	57 fd       	sbrc	r21, 7
    2006:	90 58       	subi	r25, 0x80	; 128
    2008:	44 0f       	add	r20, r20
    200a:	55 1f       	adc	r21, r21
    200c:	59 f0       	breq	.+22     	; 0x2024 <__fp_splitA+0x10>
    200e:	5f 3f       	cpi	r21, 0xFF	; 255
    2010:	71 f0       	breq	.+28     	; 0x202e <__fp_splitA+0x1a>
    2012:	47 95       	ror	r20

00002014 <__fp_splitA>:
    2014:	88 0f       	add	r24, r24
    2016:	97 fb       	bst	r25, 7
    2018:	99 1f       	adc	r25, r25
    201a:	61 f0       	breq	.+24     	; 0x2034 <__fp_splitA+0x20>
    201c:	9f 3f       	cpi	r25, 0xFF	; 255
    201e:	79 f0       	breq	.+30     	; 0x203e <__fp_splitA+0x2a>
    2020:	87 95       	ror	r24
    2022:	08 95       	ret
    2024:	12 16       	cp	r1, r18
    2026:	13 06       	cpc	r1, r19
    2028:	14 06       	cpc	r1, r20
    202a:	55 1f       	adc	r21, r21
    202c:	f2 cf       	rjmp	.-28     	; 0x2012 <__fp_split3+0xe>
    202e:	46 95       	lsr	r20
    2030:	f1 df       	rcall	.-30     	; 0x2014 <__fp_splitA>
    2032:	08 c0       	rjmp	.+16     	; 0x2044 <__fp_splitA+0x30>
    2034:	16 16       	cp	r1, r22
    2036:	17 06       	cpc	r1, r23
    2038:	18 06       	cpc	r1, r24
    203a:	99 1f       	adc	r25, r25
    203c:	f1 cf       	rjmp	.-30     	; 0x2020 <__fp_splitA+0xc>
    203e:	86 95       	lsr	r24
    2040:	71 05       	cpc	r23, r1
    2042:	61 05       	cpc	r22, r1
    2044:	08 94       	sec
    2046:	08 95       	ret

00002048 <__fp_trunc>:
    2048:	e5 df       	rcall	.-54     	; 0x2014 <__fp_splitA>
    204a:	a0 f0       	brcs	.+40     	; 0x2074 <__fp_trunc+0x2c>
    204c:	be e7       	ldi	r27, 0x7E	; 126
    204e:	b9 17       	cp	r27, r25
    2050:	88 f4       	brcc	.+34     	; 0x2074 <__fp_trunc+0x2c>
    2052:	bb 27       	eor	r27, r27
    2054:	9f 38       	cpi	r25, 0x8F	; 143
    2056:	60 f4       	brcc	.+24     	; 0x2070 <__fp_trunc+0x28>
    2058:	16 16       	cp	r1, r22
    205a:	b1 1d       	adc	r27, r1
    205c:	67 2f       	mov	r22, r23
    205e:	78 2f       	mov	r23, r24
    2060:	88 27       	eor	r24, r24
    2062:	98 5f       	subi	r25, 0xF8	; 248
    2064:	f7 cf       	rjmp	.-18     	; 0x2054 <__fp_trunc+0xc>
    2066:	86 95       	lsr	r24
    2068:	77 95       	ror	r23
    206a:	67 95       	ror	r22
    206c:	b1 1d       	adc	r27, r1
    206e:	93 95       	inc	r25
    2070:	96 39       	cpi	r25, 0x96	; 150
    2072:	c8 f3       	brcs	.-14     	; 0x2066 <__fp_trunc+0x1e>
    2074:	08 95       	ret

00002076 <__fp_zero>:
    2076:	e8 94       	clt

00002078 <__fp_szero>:
    2078:	bb 27       	eor	r27, r27
    207a:	66 27       	eor	r22, r22
    207c:	77 27       	eor	r23, r23
    207e:	cb 01       	movw	r24, r22
    2080:	97 f9       	bld	r25, 7
    2082:	08 95       	ret

00002084 <__gesf2>:
    2084:	4a df       	rcall	.-364    	; 0x1f1a <__fp_cmp>
    2086:	08 f4       	brcc	.+2      	; 0x208a <__gesf2+0x6>
    2088:	8f ef       	ldi	r24, 0xFF	; 255
    208a:	08 95       	ret

0000208c <__mulsf3>:
    208c:	0b d0       	rcall	.+22     	; 0x20a4 <__mulsf3x>
    208e:	a9 cf       	rjmp	.-174    	; 0x1fe2 <__fp_round>
    2090:	9a df       	rcall	.-204    	; 0x1fc6 <__fp_pscA>
    2092:	28 f0       	brcs	.+10     	; 0x209e <__mulsf3+0x12>
    2094:	9f df       	rcall	.-194    	; 0x1fd4 <__fp_pscB>
    2096:	18 f0       	brcs	.+6      	; 0x209e <__mulsf3+0x12>
    2098:	95 23       	and	r25, r21
    209a:	09 f0       	breq	.+2      	; 0x209e <__mulsf3+0x12>
    209c:	62 cf       	rjmp	.-316    	; 0x1f62 <__fp_inf>
    209e:	90 cf       	rjmp	.-224    	; 0x1fc0 <__fp_nan>
    20a0:	11 24       	eor	r1, r1
    20a2:	ea cf       	rjmp	.-44     	; 0x2078 <__fp_szero>

000020a4 <__mulsf3x>:
    20a4:	af df       	rcall	.-162    	; 0x2004 <__fp_split3>
    20a6:	a0 f3       	brcs	.-24     	; 0x2090 <__mulsf3+0x4>

000020a8 <__mulsf3_pse>:
    20a8:	95 9f       	mul	r25, r21
    20aa:	d1 f3       	breq	.-12     	; 0x20a0 <__mulsf3+0x14>
    20ac:	95 0f       	add	r25, r21
    20ae:	50 e0       	ldi	r21, 0x00	; 0
    20b0:	55 1f       	adc	r21, r21
    20b2:	62 9f       	mul	r22, r18
    20b4:	f0 01       	movw	r30, r0
    20b6:	72 9f       	mul	r23, r18
    20b8:	bb 27       	eor	r27, r27
    20ba:	f0 0d       	add	r31, r0
    20bc:	b1 1d       	adc	r27, r1
    20be:	63 9f       	mul	r22, r19
    20c0:	aa 27       	eor	r26, r26
    20c2:	f0 0d       	add	r31, r0
    20c4:	b1 1d       	adc	r27, r1
    20c6:	aa 1f       	adc	r26, r26
    20c8:	64 9f       	mul	r22, r20
    20ca:	66 27       	eor	r22, r22
    20cc:	b0 0d       	add	r27, r0
    20ce:	a1 1d       	adc	r26, r1
    20d0:	66 1f       	adc	r22, r22
    20d2:	82 9f       	mul	r24, r18
    20d4:	22 27       	eor	r18, r18
    20d6:	b0 0d       	add	r27, r0
    20d8:	a1 1d       	adc	r26, r1
    20da:	62 1f       	adc	r22, r18
    20dc:	73 9f       	mul	r23, r19
    20de:	b0 0d       	add	r27, r0
    20e0:	a1 1d       	adc	r26, r1
    20e2:	62 1f       	adc	r22, r18
    20e4:	83 9f       	mul	r24, r19
    20e6:	a0 0d       	add	r26, r0
    20e8:	61 1d       	adc	r22, r1
    20ea:	22 1f       	adc	r18, r18
    20ec:	74 9f       	mul	r23, r20
    20ee:	33 27       	eor	r19, r19
    20f0:	a0 0d       	add	r26, r0
    20f2:	61 1d       	adc	r22, r1
    20f4:	23 1f       	adc	r18, r19
    20f6:	84 9f       	mul	r24, r20
    20f8:	60 0d       	add	r22, r0
    20fa:	21 1d       	adc	r18, r1
    20fc:	82 2f       	mov	r24, r18
    20fe:	76 2f       	mov	r23, r22
    2100:	6a 2f       	mov	r22, r26
    2102:	11 24       	eor	r1, r1
    2104:	9f 57       	subi	r25, 0x7F	; 127
    2106:	50 40       	sbci	r21, 0x00	; 0
    2108:	8a f0       	brmi	.+34     	; 0x212c <__mulsf3_pse+0x84>
    210a:	e1 f0       	breq	.+56     	; 0x2144 <__mulsf3_pse+0x9c>
    210c:	88 23       	and	r24, r24
    210e:	4a f0       	brmi	.+18     	; 0x2122 <__mulsf3_pse+0x7a>
    2110:	ee 0f       	add	r30, r30
    2112:	ff 1f       	adc	r31, r31
    2114:	bb 1f       	adc	r27, r27
    2116:	66 1f       	adc	r22, r22
    2118:	77 1f       	adc	r23, r23
    211a:	88 1f       	adc	r24, r24
    211c:	91 50       	subi	r25, 0x01	; 1
    211e:	50 40       	sbci	r21, 0x00	; 0
    2120:	a9 f7       	brne	.-22     	; 0x210c <__mulsf3_pse+0x64>
    2122:	9e 3f       	cpi	r25, 0xFE	; 254
    2124:	51 05       	cpc	r21, r1
    2126:	70 f0       	brcs	.+28     	; 0x2144 <__mulsf3_pse+0x9c>
    2128:	1c cf       	rjmp	.-456    	; 0x1f62 <__fp_inf>
    212a:	a6 cf       	rjmp	.-180    	; 0x2078 <__fp_szero>
    212c:	5f 3f       	cpi	r21, 0xFF	; 255
    212e:	ec f3       	brlt	.-6      	; 0x212a <__mulsf3_pse+0x82>
    2130:	98 3e       	cpi	r25, 0xE8	; 232
    2132:	dc f3       	brlt	.-10     	; 0x212a <__mulsf3_pse+0x82>
    2134:	86 95       	lsr	r24
    2136:	77 95       	ror	r23
    2138:	67 95       	ror	r22
    213a:	b7 95       	ror	r27
    213c:	f7 95       	ror	r31
    213e:	e7 95       	ror	r30
    2140:	9f 5f       	subi	r25, 0xFF	; 255
    2142:	c1 f7       	brne	.-16     	; 0x2134 <__mulsf3_pse+0x8c>
    2144:	fe 2b       	or	r31, r30
    2146:	88 0f       	add	r24, r24
    2148:	91 1d       	adc	r25, r1
    214a:	96 95       	lsr	r25
    214c:	87 95       	ror	r24
    214e:	97 f9       	bld	r25, 7
    2150:	08 95       	ret

00002152 <__divmodhi4>:
    2152:	97 fb       	bst	r25, 7
    2154:	07 2e       	mov	r0, r23
    2156:	16 f4       	brtc	.+4      	; 0x215c <__divmodhi4+0xa>
    2158:	00 94       	com	r0
    215a:	06 d0       	rcall	.+12     	; 0x2168 <__divmodhi4_neg1>
    215c:	77 fd       	sbrc	r23, 7
    215e:	08 d0       	rcall	.+16     	; 0x2170 <__divmodhi4_neg2>
    2160:	0b d0       	rcall	.+22     	; 0x2178 <__udivmodhi4>
    2162:	07 fc       	sbrc	r0, 7
    2164:	05 d0       	rcall	.+10     	; 0x2170 <__divmodhi4_neg2>
    2166:	3e f4       	brtc	.+14     	; 0x2176 <__divmodhi4_exit>

00002168 <__divmodhi4_neg1>:
    2168:	90 95       	com	r25
    216a:	81 95       	neg	r24
    216c:	9f 4f       	sbci	r25, 0xFF	; 255
    216e:	08 95       	ret

00002170 <__divmodhi4_neg2>:
    2170:	70 95       	com	r23
    2172:	61 95       	neg	r22
    2174:	7f 4f       	sbci	r23, 0xFF	; 255

00002176 <__divmodhi4_exit>:
    2176:	08 95       	ret

00002178 <__udivmodhi4>:
    2178:	aa 1b       	sub	r26, r26
    217a:	bb 1b       	sub	r27, r27
    217c:	51 e1       	ldi	r21, 0x11	; 17
    217e:	07 c0       	rjmp	.+14     	; 0x218e <__udivmodhi4_ep>

00002180 <__udivmodhi4_loop>:
    2180:	aa 1f       	adc	r26, r26
    2182:	bb 1f       	adc	r27, r27
    2184:	a6 17       	cp	r26, r22
    2186:	b7 07       	cpc	r27, r23
    2188:	10 f0       	brcs	.+4      	; 0x218e <__udivmodhi4_ep>
    218a:	a6 1b       	sub	r26, r22
    218c:	b7 0b       	sbc	r27, r23

0000218e <__udivmodhi4_ep>:
    218e:	88 1f       	adc	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	5a 95       	dec	r21
    2194:	a9 f7       	brne	.-22     	; 0x2180 <__udivmodhi4_loop>
    2196:	80 95       	com	r24
    2198:	90 95       	com	r25
    219a:	bc 01       	movw	r22, r24
    219c:	cd 01       	movw	r24, r26
    219e:	08 95       	ret

000021a0 <_exit>:
    21a0:	f8 94       	cli

000021a2 <__stop_program>:
    21a2:	ff cf       	rjmp	.-2      	; 0x21a2 <__stop_program>
